import flatpickr from 'flatpickr';

function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement('a');
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}
function compute_slots(slots) {
    const result = {};
    for (const key in slots) {
        result[key] = true;
    }
    return result;
}
function set_store_value(store, ret, value) {
    store.set(value);
    return ret;
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_empty_stylesheet(node) {
    const style_element = element('style');
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function (event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function set_svg_attributes(node, attributes) {
    for (const key in attributes) {
        attr(node, key, attributes[key]);
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    if (value === null) {
        node.style.removeProperty(key);
    }
    else {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
}
function select_option(select, value) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
    select.selectedIndex = -1; // no option should be selected
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, cancelable, detail);
    return e;
}
class HtmlTag {
    constructor(is_svg = false) {
        this.is_svg = false;
        this.is_svg = is_svg;
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            if (this.is_svg)
                this.e = svg_element(target.nodeName);
            else
                this.e = element(target.nodeName);
            this.t = target;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

// we need to store the information for multiple documents because a Svelte application could also contain iframes
// https://github.com/sveltejs/svelte/issues/3624
const managed_styles = new Map();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_style_information(doc, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
    managed_styles.set(doc, info);
    return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
    if (!rules[name]) {
        rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        managed_styles.forEach(info => {
            const { stylesheet } = info;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            info.rules = {};
        });
        managed_styles.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail, { cancelable = false } = {}) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail, { cancelable });
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
            return !event.defaultPrevented;
        }
        return true;
    };
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
    return context;
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        // @ts-ignore
        callbacks.slice().forEach(fn => fn.call(this, event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
    else if (callback) {
        callback();
    }
}
const null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn, params, intro) {
    let config = fn(node, params);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = (program.b - t);
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        const program = {
            start: now() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config();
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);

function destroy_block(block, lookup) {
    block.d(1);
    lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            block.p(child_ctx, dirty);
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    return new_blocks;
}

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

const subscriber_queue = [];
/**
 * Creates a `Readable` store that allows reading by subscription.
 * @param value initial value
 * @param {StartStopNotifier}start start and stop notifications for subscriptions
 */
function readable(value, start) {
    return {
        subscribe: writable(value, start).subscribe
    };
}
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}
function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores);
    const stores_array = single
        ? [stores]
        : stores;
    const auto = fn.length < 2;
    return readable(initial_value, (set) => {
        let inited = false;
        const values = [];
        let pending = 0;
        let cleanup = noop;
        const sync = () => {
            if (pending) {
                return;
            }
            cleanup();
            const result = fn(single ? values[0] : values, set);
            if (auto) {
                set(result);
            }
            else {
                cleanup = is_function(result) ? result : noop;
            }
        };
        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
            values[i] = value;
            pending &= ~(1 << i);
            if (inited) {
                sync();
            }
        }, () => {
            pending |= (1 << i);
        }));
        inited = true;
        sync();
        return function stop() {
            run_all(unsubscribers);
            cleanup();
        };
    });
}

/* src/icons/ChevronRight.svelte generated by Svelte v3.49.0 */

function create_if_block$1M(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$3c(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1M(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M22 16L12 26 10.6 24.6 19.2 16 10.6 7.4 12 6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1M(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$3c($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ChevronRight extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3c, create_fragment$3c, safe_not_equal, { size: 0, title: 1 });
	}
}

var ChevronRight$1 = ChevronRight;

/* src/SkeletonText/SkeletonText.svelte generated by Svelte v3.49.0 */

function get_each_context$l(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i].width;
	return child_ctx;
}

// (40:0) {:else}
function create_else_block$v(ctx) {
	let p;
	let p_style_value;
	let mounted;
	let dispose;

	let p_levels = [
		/*$$restProps*/ ctx[4],
		{
			style: p_style_value = "width: " + /*width*/ ctx[2] + ";" + /*$$restProps*/ ctx[4].style
		}
	];

	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			set_attributes(p, p_data);
			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (!mounted) {
				dispose = [
					listen(p, "click", /*click_handler_1*/ ctx[12]),
					listen(p, "mouseover", /*mouseover_handler_1*/ ctx[13]),
					listen(p, "mouseenter", /*mouseenter_handler_1*/ ctx[14]),
					listen(p, "mouseleave", /*mouseleave_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(p, p_data = get_spread_update(p_levels, [
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4],
				dirty & /*width, $$restProps*/ 20 && p_style_value !== (p_style_value = "width: " + /*width*/ ctx[2] + ";" + /*$$restProps*/ ctx[4].style) && { style: p_style_value }
			]));

			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (30:0) {#if paragraph}
function create_if_block$1L(ctx) {
	let div;
	let mounted;
	let dispose;
	let each_value = /*rows*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$l(get_each_context$l(ctx, each_value, i));
	}

	let div_levels = [/*$$restProps*/ ctx[4]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*rows, heading*/ 9) {
				each_value = /*rows*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$l(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$l(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (32:4) {#each rows as { width }}
function create_each_block$l(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			set_style(p, "width", /*width*/ ctx[2]);
			toggle_class(p, "bx--skeleton__text", true);
			toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*rows*/ 8) {
				set_style(p, "width", /*width*/ ctx[2]);
			}

			if (dirty & /*heading*/ 1) {
				toggle_class(p, "bx--skeleton__heading", /*heading*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$3b(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*paragraph*/ ctx[1]) return create_if_block$1L;
		return create_else_block$v;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$3b($$self, $$props, $$invalidate) {
	let rows;
	let widthNum;
	let widthPx;
	const omit_props_names = ["lines","heading","paragraph","width"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { lines = 3 } = $$props;
	let { heading = false } = $$props;
	let { paragraph = false } = $$props;
	let { width = "100%" } = $$props;
	const RANDOM = [0.973, 0.153, 0.567];

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('lines' in $$new_props) $$invalidate(5, lines = $$new_props.lines);
		if ('heading' in $$new_props) $$invalidate(0, heading = $$new_props.heading);
		if ('paragraph' in $$new_props) $$invalidate(1, paragraph = $$new_props.paragraph);
		if ('width' in $$new_props) $$invalidate(2, width = $$new_props.width);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width*/ 4) {
			$$invalidate(7, widthNum = parseInt(width, 10));
		}

		if ($$self.$$.dirty & /*width*/ 4) {
			$$invalidate(6, widthPx = width.includes("px"));
		}

		if ($$self.$$.dirty & /*paragraph, lines, widthPx, widthNum, rows, width*/ 238) {
			if (paragraph) {
				for (let i = 0; i < lines; i++) {
					const min = widthPx ? widthNum - 75 : 0;
					const max = widthPx ? widthNum : 75;
					const rand = Math.floor(RANDOM[i % 3] * (max - min + 1)) + min + "px";

					$$invalidate(3, rows = [
						...rows,
						{
							width: widthPx ? rand : `calc(${width} - ${rand})`
						}
					]);
				}
			}
		}
	};

	$$invalidate(3, rows = []);

	return [
		heading,
		paragraph,
		width,
		rows,
		$$restProps,
		lines,
		widthPx,
		widthNum,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class SkeletonText extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3b, create_fragment$3b, safe_not_equal, {
			lines: 5,
			heading: 0,
			paragraph: 1,
			width: 2
		});
	}
}

var SkeletonText$1 = SkeletonText;

/* src/Accordion/AccordionSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$k(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (38:2) {#if open}
function create_if_block$1K(ctx) {
	let li;
	let span;
	let chevronright;
	let t0;
	let skeletontext0;
	let t1;
	let div;
	let skeletontext1;
	let t2;
	let skeletontext2;
	let t3;
	let skeletontext3;
	let current;
	chevronright = new ChevronRight$1({ props: { class: "bx--accordion__arrow" } });
	skeletontext0 = new SkeletonText$1({ props: { class: "bx--accordion__title" } });
	skeletontext1 = new SkeletonText$1({ props: { width: "90%" } });
	skeletontext2 = new SkeletonText$1({ props: { width: "80%" } });
	skeletontext3 = new SkeletonText$1({ props: { width: "95%" } });

	return {
		c() {
			li = element("li");
			span = element("span");
			create_component(chevronright.$$.fragment);
			t0 = space();
			create_component(skeletontext0.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(skeletontext1.$$.fragment);
			t2 = space();
			create_component(skeletontext2.$$.fragment);
			t3 = space();
			create_component(skeletontext3.$$.fragment);
			toggle_class(span, "bx--accordion__heading", true);
			toggle_class(div, "bx--accordion__content", true);
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			mount_component(chevronright, span, null);
			append(span, t0);
			mount_component(skeletontext0, span, null);
			append(li, t1);
			append(li, div);
			mount_component(skeletontext1, div, null);
			append(div, t2);
			mount_component(skeletontext2, div, null);
			append(div, t3);
			mount_component(skeletontext3, div, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(chevronright.$$.fragment, local);
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(skeletontext2.$$.fragment, local);
			transition_in(skeletontext3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright.$$.fragment, local);
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(skeletontext2.$$.fragment, local);
			transition_out(skeletontext3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(skeletontext2);
			destroy_component(skeletontext3);
		}
	};
}

// (54:2) {#each Array.from({ length: open ? count - 1 : count }, (_, i) => i) as item (item)}
function create_each_block$k(key_1, ctx) {
	let li;
	let span;
	let chevronright;
	let t0;
	let skeletontext;
	let t1;
	let current;
	chevronright = new ChevronRight$1({ props: { class: "bx--accordion__arrow" } });
	skeletontext = new SkeletonText$1({ props: { class: "bx--accordion__title" } });

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			span = element("span");
			create_component(chevronright.$$.fragment);
			t0 = space();
			create_component(skeletontext.$$.fragment);
			t1 = space();
			toggle_class(span, "bx--accordion__heading", true);
			toggle_class(li, "bx--accordion__item", true);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			mount_component(chevronright, span, null);
			append(span, t0);
			mount_component(skeletontext, span, null);
			append(li, t1);
			current = true;
		},
		p(new_ctx, dirty) {
		},
		i(local) {
			if (current) return;
			transition_in(chevronright.$$.fragment, local);
			transition_in(skeletontext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright.$$.fragment, local);
			transition_out(skeletontext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright);
			destroy_component(skeletontext);
		}
	};
}

function create_fragment$3a(ctx) {
	let ul;
	let t;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let mounted;
	let dispose;
	let if_block = /*open*/ ctx[3] && create_if_block$1K();

	let each_value = Array.from(
		{
			length: /*open*/ ctx[3]
			? /*count*/ ctx[0] - 1
			: /*count*/ ctx[0]
		},
		func$7
	);

	const get_key = ctx => /*item*/ ctx[9];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$k(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$k(key));
	}

	let ul_levels = [/*$$restProps*/ ctx[4]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (if_block) if_block.c();
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--skeleton", true);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[1] === 'start');
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[1] === 'end');
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[2] === 'xl');
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			if (if_block) if_block.m(ul, null);
			append(ul, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[5]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[3]) {
				if (if_block) {
					if (dirty & /*open*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1K();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(ul, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*open, count*/ 9) {
				each_value = Array.from(
					{
						length: /*open*/ ctx[3]
						? /*count*/ ctx[0] - 1
						: /*count*/ ctx[0]
					},
					func$7
				);

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, outro_and_destroy_block, create_each_block$k, null, get_each_context$k);
				check_outros();
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
			toggle_class(ul, "bx--skeleton", true);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[1] === 'start');
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[1] === 'end');
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[2] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (if_block) if_block.d();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$7 = (_, i) => i;

function instance$3a($$self, $$props, $$invalidate) {
	const omit_props_names = ["count","align","size","open"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { count = 4 } = $$props;
	let { align = "end" } = $$props;
	let { size = undefined } = $$props;
	let { open = true } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('count' in $$new_props) $$invalidate(0, count = $$new_props.count);
		if ('align' in $$new_props) $$invalidate(1, align = $$new_props.align);
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('open' in $$new_props) $$invalidate(3, open = $$new_props.open);
	};

	return [
		count,
		align,
		size,
		open,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class AccordionSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3a, create_fragment$3a, safe_not_equal, { count: 0, align: 1, size: 2, open: 3 });
	}
}

var AccordionSkeleton$1 = AccordionSkeleton;

/* src/Accordion/Accordion.svelte generated by Svelte v3.49.0 */

function create_else_block$u(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let ul_levels = [/*$$restProps*/ ctx[3]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[0] === 'start');
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[0] === 'end');
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler_1*/ ctx[7]),
					listen(ul, "mouseover", /*mouseover_handler_1*/ ctx[8]),
					listen(ul, "mouseenter", /*mouseenter_handler_1*/ ctx[9]),
					listen(ul, "mouseleave", /*mouseleave_handler_1*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(ul, "bx--accordion", true);
			toggle_class(ul, "bx--accordion--start", /*align*/ ctx[0] === 'start');
			toggle_class(ul, "bx--accordion--end", /*align*/ ctx[0] === 'end');
			toggle_class(ul, "bx--accordion--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(ul, "bx--accordion--xl", /*size*/ ctx[1] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (34:0) {#if skeleton}
function create_if_block$1J(ctx) {
	let accordionskeleton;
	let current;
	const accordionskeleton_spread_levels = [/*$$restProps*/ ctx[3], { align: /*align*/ ctx[0] }, { size: /*size*/ ctx[1] }];
	let accordionskeleton_props = {};

	for (let i = 0; i < accordionskeleton_spread_levels.length; i += 1) {
		accordionskeleton_props = assign(accordionskeleton_props, accordionskeleton_spread_levels[i]);
	}

	accordionskeleton = new AccordionSkeleton$1({ props: accordionskeleton_props });
	accordionskeleton.$on("click", /*click_handler*/ ctx[11]);
	accordionskeleton.$on("mouseover", /*mouseover_handler*/ ctx[12]);
	accordionskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[13]);
	accordionskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[14]);

	return {
		c() {
			create_component(accordionskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(accordionskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const accordionskeleton_changes = (dirty & /*$$restProps, align, size*/ 11)
			? get_spread_update(accordionskeleton_spread_levels, [
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3]),
					dirty & /*align*/ 1 && { align: /*align*/ ctx[0] },
					dirty & /*size*/ 2 && { size: /*size*/ ctx[1] }
				])
			: {};

			accordionskeleton.$set(accordionskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(accordionskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(accordionskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(accordionskeleton, detaching);
		}
	};
}

function create_fragment$39(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1J, create_else_block$u];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$39($$self, $$props, $$invalidate) {
	const omit_props_names = ["align","size","disabled","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { align = "end" } = $$props;
	let { size = undefined } = $$props;
	let { disabled = false } = $$props;
	let { skeleton = false } = $$props;
	const disableItems = writable(disabled);
	setContext("Accordion", { disableItems });

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('align' in $$new_props) $$invalidate(0, align = $$new_props.align);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('skeleton' in $$new_props) $$invalidate(2, skeleton = $$new_props.skeleton);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*disabled*/ 16) {
			disableItems.set(disabled);
		}
	};

	return [
		align,
		size,
		skeleton,
		$$restProps,
		disabled,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Accordion extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$39, create_fragment$39, safe_not_equal, {
			align: 0,
			size: 1,
			disabled: 4,
			skeleton: 2
		});
	}
}

var Accordion$1 = Accordion;

/* src/Accordion/AccordionItem.svelte generated by Svelte v3.49.0 */
const get_title_slot_changes$3 = dirty => ({});
const get_title_slot_context$3 = ctx => ({});

// (73:25) {title}
function fallback_block$M(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 4) set_data(t, /*title*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$38(ctx) {
	let li;
	let button;
	let chevronright;
	let t0;
	let div0;
	let t1;
	let div1;
	let current;
	let mounted;
	let dispose;

	chevronright = new ChevronRight$1({
			props: {
				class: "bx--accordion__arrow",
				"aria-label": /*iconDescription*/ ctx[3]
			}
		});

	const title_slot_template = /*#slots*/ ctx[7].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[6], get_title_slot_context$3);
	const title_slot_or_fallback = title_slot || fallback_block$M(ctx);
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let li_levels = [/*$$restProps*/ ctx[5]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			button = element("button");
			create_component(chevronright.$$.fragment);
			t0 = space();
			div0 = element("div");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--accordion__title", true);
			attr(button, "type", "button");
			attr(button, "title", /*iconDescription*/ ctx[3]);
			attr(button, "aria-expanded", /*open*/ ctx[0]);
			button.disabled = /*disabled*/ ctx[1];
			toggle_class(button, "bx--accordion__heading", true);
			toggle_class(div1, "bx--accordion__content", true);
			set_attributes(li, li_data);
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", /*open*/ ctx[0]);
			toggle_class(li, "bx--accordion__item--disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "bx--accordion__item--expanding", /*animation*/ ctx[4] === 'expanding');
			toggle_class(li, "bx--accordion__item--collapsing", /*animation*/ ctx[4] === 'collapsing');
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			mount_component(chevronright, button, null);
			append(button, t0);
			append(button, div0);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(div0, null);
			}

			append(li, t1);
			append(li, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", /*click_handler_1*/ ctx[14]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "keydown", /*keydown_handler*/ ctx[13]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[15]),
					listen(li, "animationend", /*animationend_handler*/ ctx[8]),
					listen(li, "animationend", /*animationend_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chevronright_changes = {};
			if (dirty & /*iconDescription*/ 8) chevronright_changes["aria-label"] = /*iconDescription*/ ctx[3];
			chevronright.$set(chevronright_changes);

			if (title_slot) {
				if (title_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[6], dirty, get_title_slot_changes$3),
						get_title_slot_context$3
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/ 4)) {
					title_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*iconDescription*/ 8) {
				attr(button, "title", /*iconDescription*/ ctx[3]);
			}

			if (!current || dirty & /*open*/ 1) {
				attr(button, "aria-expanded", /*open*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 2) {
				button.disabled = /*disabled*/ ctx[1];
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
			toggle_class(li, "bx--accordion__item", true);
			toggle_class(li, "bx--accordion__item--active", /*open*/ ctx[0]);
			toggle_class(li, "bx--accordion__item--disabled", /*disabled*/ ctx[1]);
			toggle_class(li, "bx--accordion__item--expanding", /*animation*/ ctx[4] === 'expanding');
			toggle_class(li, "bx--accordion__item--collapsing", /*animation*/ ctx[4] === 'collapsing');
		},
		i(local) {
			if (current) return;
			transition_in(chevronright.$$.fragment, local);
			transition_in(title_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright.$$.fragment, local);
			transition_out(title_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevronright);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$38($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","open","disabled","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "title" } = $$props;
	let { open = false } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "Expand/Collapse" } = $$props;
	let initialDisabled = disabled;
	const ctx = getContext("Accordion");

	const unsubscribe = ctx.disableItems.subscribe(value => {
		if (!value && initialDisabled) return;
		$$invalidate(1, disabled = value);
	});

	let animation = undefined;

	onMount(() => {
		return () => {
			unsubscribe();
		};
	});

	function animationend_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = !open);
		$$invalidate(4, animation = open ? 'expanding' : 'collapsing');
	};

	const keydown_handler_1 = ({ key }) => {
		if (open && key === 'Escape') {
			$$invalidate(0, open = false);
		}
	};

	const animationend_handler_1 = () => {
		$$invalidate(4, animation = undefined);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		open,
		disabled,
		title,
		iconDescription,
		animation,
		$$restProps,
		$$scope,
		slots,
		animationend_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1,
		animationend_handler_1
	];
}

class AccordionItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$38, create_fragment$38, safe_not_equal, {
			title: 2,
			open: 0,
			disabled: 1,
			iconDescription: 3
		});
	}
}

var AccordionItem$1 = AccordionItem;

/* src/AspectRatio/AspectRatio.svelte generated by Svelte v3.49.0 */

function create_fragment$37(ctx) {
	let div1;
	let div0;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--aspect-ratio--object", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--aspect-ratio", true);
			toggle_class(div1, "bx--aspect-ratio--2x1", /*ratio*/ ctx[0] === '2x1');
			toggle_class(div1, "bx--aspect-ratio--2x3", /*ratio*/ ctx[0] === '2x3');
			toggle_class(div1, "bx--aspect-ratio--16x9", /*ratio*/ ctx[0] === '16x9');
			toggle_class(div1, "bx--aspect-ratio--4x3", /*ratio*/ ctx[0] === '4x3');
			toggle_class(div1, "bx--aspect-ratio--1x1", /*ratio*/ ctx[0] === '1x1');
			toggle_class(div1, "bx--aspect-ratio--3x4", /*ratio*/ ctx[0] === '3x4');
			toggle_class(div1, "bx--aspect-ratio--3x2", /*ratio*/ ctx[0] === '3x2');
			toggle_class(div1, "bx--aspect-ratio--9x16", /*ratio*/ ctx[0] === '9x16');
			toggle_class(div1, "bx--aspect-ratio--1x2", /*ratio*/ ctx[0] === '1x2');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--aspect-ratio", true);
			toggle_class(div1, "bx--aspect-ratio--2x1", /*ratio*/ ctx[0] === '2x1');
			toggle_class(div1, "bx--aspect-ratio--2x3", /*ratio*/ ctx[0] === '2x3');
			toggle_class(div1, "bx--aspect-ratio--16x9", /*ratio*/ ctx[0] === '16x9');
			toggle_class(div1, "bx--aspect-ratio--4x3", /*ratio*/ ctx[0] === '4x3');
			toggle_class(div1, "bx--aspect-ratio--1x1", /*ratio*/ ctx[0] === '1x1');
			toggle_class(div1, "bx--aspect-ratio--3x4", /*ratio*/ ctx[0] === '3x4');
			toggle_class(div1, "bx--aspect-ratio--3x2", /*ratio*/ ctx[0] === '3x2');
			toggle_class(div1, "bx--aspect-ratio--9x16", /*ratio*/ ctx[0] === '9x16');
			toggle_class(div1, "bx--aspect-ratio--1x2", /*ratio*/ ctx[0] === '1x2');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$37($$self, $$props, $$invalidate) {
	const omit_props_names = ["ratio"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { ratio = "2x1" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ratio' in $$new_props) $$invalidate(0, ratio = $$new_props.ratio);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [ratio, $$restProps, $$scope, slots];
}

class AspectRatio extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$37, create_fragment$37, safe_not_equal, { ratio: 0 });
	}
}

var AspectRatio$1 = AspectRatio;

/* src/Breadcrumb/BreadcrumbSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$j(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (20:2) {#each Array.from({ length: count }, (_, i) => i) as item (item)}
function create_each_block$j(key_1, ctx) {
	let div;
	let span;
	let t1;

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			span = element("span");
			span.textContent = " ";
			t1 = space();
			toggle_class(span, "bx--link", true);
			toggle_class(div, "bx--breadcrumb-item", true);
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(div, t1);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$36(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$6);
	const get_key = ctx => /*item*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$j(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$j(key));
	}

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--breadcrumb", true);
			toggle_class(div, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 2) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$6);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$j, null, get_each_context$j);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--breadcrumb", true);
			toggle_class(div, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$6 = (_, i) => i;

function instance$36($$self, $$props, $$invalidate) {
	const omit_props_names = ["noTrailingSlash","count"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { noTrailingSlash = false } = $$props;
	let { count = 3 } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('noTrailingSlash' in $$new_props) $$invalidate(0, noTrailingSlash = $$new_props.noTrailingSlash);
		if ('count' in $$new_props) $$invalidate(1, count = $$new_props.count);
	};

	return [
		noTrailingSlash,
		count,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class BreadcrumbSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$36, create_fragment$36, safe_not_equal, { noTrailingSlash: 0, count: 1 });
	}
}

var BreadcrumbSkeleton$1 = BreadcrumbSkeleton;

/* src/Breadcrumb/Breadcrumb.svelte generated by Svelte v3.49.0 */

function create_else_block$t(ctx) {
	let nav;
	let ol;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let nav_levels = [{ "aria-label": "Breadcrumb" }, /*$$restProps*/ ctx[2]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ol = element("ol");
			if (default_slot) default_slot.c();
			toggle_class(ol, "bx--breadcrumb", true);
			toggle_class(ol, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
			set_attributes(nav, nav_data);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ol);

			if (default_slot) {
				default_slot.m(ol, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(nav, "click", /*click_handler_1*/ ctx[5]),
					listen(nav, "mouseover", /*mouseover_handler_1*/ ctx[6]),
					listen(nav, "mouseenter", /*mouseenter_handler_1*/ ctx[7]),
					listen(nav, "mouseleave", /*mouseleave_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (dirty & /*noTrailingSlash*/ 1) {
				toggle_class(ol, "bx--breadcrumb--no-trailing-slash", /*noTrailingSlash*/ ctx[0]);
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				{ "aria-label": "Breadcrumb" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (14:0) {#if skeleton}
function create_if_block$1I(ctx) {
	let breadcrumbskeleton;
	let current;

	const breadcrumbskeleton_spread_levels = [
		{
			noTrailingSlash: /*noTrailingSlash*/ ctx[0]
		},
		/*$$restProps*/ ctx[2]
	];

	let breadcrumbskeleton_props = {};

	for (let i = 0; i < breadcrumbskeleton_spread_levels.length; i += 1) {
		breadcrumbskeleton_props = assign(breadcrumbskeleton_props, breadcrumbskeleton_spread_levels[i]);
	}

	breadcrumbskeleton = new BreadcrumbSkeleton$1({ props: breadcrumbskeleton_props });
	breadcrumbskeleton.$on("click", /*click_handler*/ ctx[9]);
	breadcrumbskeleton.$on("mouseover", /*mouseover_handler*/ ctx[10]);
	breadcrumbskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[11]);
	breadcrumbskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[12]);

	return {
		c() {
			create_component(breadcrumbskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(breadcrumbskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const breadcrumbskeleton_changes = (dirty & /*noTrailingSlash, $$restProps*/ 5)
			? get_spread_update(breadcrumbskeleton_spread_levels, [
					dirty & /*noTrailingSlash*/ 1 && {
						noTrailingSlash: /*noTrailingSlash*/ ctx[0]
					},
					dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
				])
			: {};

			breadcrumbskeleton.$set(breadcrumbskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(breadcrumbskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(breadcrumbskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(breadcrumbskeleton, detaching);
		}
	};
}

function create_fragment$35(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1I, create_else_block$t];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$35($$self, $$props, $$invalidate) {
	const omit_props_names = ["noTrailingSlash","skeleton"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { noTrailingSlash = false } = $$props;
	let { skeleton = false } = $$props;

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('noTrailingSlash' in $$new_props) $$invalidate(0, noTrailingSlash = $$new_props.noTrailingSlash);
		if ('skeleton' in $$new_props) $$invalidate(1, skeleton = $$new_props.skeleton);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		noTrailingSlash,
		skeleton,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Breadcrumb extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$35, create_fragment$35, safe_not_equal, { noTrailingSlash: 0, skeleton: 1 });
	}
}

var Breadcrumb$1 = Breadcrumb;

/* src/Link/Link.svelte generated by Svelte v3.49.0 */

const get_icon_slot_changes_1$2 = dirty => ({});
const get_icon_slot_context_1$2 = ctx => ({});
const get_icon_slot_changes$7 = dirty => ({});
const get_icon_slot_context$7 = ctx => ({});

// (59:0) {:else}
function create_else_block$s(ctx) {
	let a;
	let t;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let if_block = !/*inline*/ ctx[3] && (/*$$slots*/ ctx[8].icon || /*icon*/ ctx[4]) && create_if_block_2$r(ctx);

	let a_levels = [
		{
			rel: a_rel_value = /*$$restProps*/ ctx[7].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[7]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--link", true);
			toggle_class(a, "bx--link--disabled", /*disabled*/ ctx[5]);
			toggle_class(a, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(a, "bx--link--visited", /*visited*/ ctx[6]);
			toggle_class(a, "bx--link--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(a, "bx--link--lg", /*size*/ ctx[1] === 'lg');
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot) {
				default_slot.m(a, null);
			}

			append(a, t);
			if (if_block) if_block.m(a, null);
			/*a_binding*/ ctx[20](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[15]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[16]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[17]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!/*inline*/ ctx[3] && (/*$$slots*/ ctx[8].icon || /*icon*/ ctx[4])) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*inline, $$slots, icon*/ 280) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$r(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*$$restProps*/ 128 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[7].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(a, "bx--link", true);
			toggle_class(a, "bx--link--disabled", /*disabled*/ ctx[5]);
			toggle_class(a, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(a, "bx--link--visited", /*visited*/ ctx[6]);
			toggle_class(a, "bx--link--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(a, "bx--link--lg", /*size*/ ctx[1] === 'lg');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*a_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (37:0) {#if disabled}
function create_if_block$1H(ctx) {
	let p;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let if_block = !/*inline*/ ctx[3] && (/*$$slots*/ ctx[8].icon || /*icon*/ ctx[4]) && create_if_block_1$F(ctx);
	let p_levels = [/*$$restProps*/ ctx[7]];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(p, p_data);
			toggle_class(p, "bx--link", true);
			toggle_class(p, "bx--link--disabled", /*disabled*/ ctx[5]);
			toggle_class(p, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(p, "bx--link--visited", /*visited*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			append(p, t);
			if (if_block) if_block.m(p, null);
			/*p_binding*/ ctx[19](p);
			current = true;

			if (!mounted) {
				dispose = [
					listen(p, "click", /*click_handler*/ ctx[11]),
					listen(p, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(p, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(p, "mouseleave", /*mouseleave_handler*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!/*inline*/ ctx[3] && (/*$$slots*/ ctx[8].icon || /*icon*/ ctx[4])) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*inline, $$slots, icon*/ 280) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$F(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(p, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(p, p_data = get_spread_update(p_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(p, "bx--link", true);
			toggle_class(p, "bx--link--disabled", /*disabled*/ ctx[5]);
			toggle_class(p, "bx--link--inline", /*inline*/ ctx[3]);
			toggle_class(p, "bx--link--visited", /*visited*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*p_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (77:4) {#if !inline && ($$slots.icon || icon)}
function create_if_block_2$r(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[10].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[9], get_icon_slot_context_1$2);
	const icon_slot_or_fallback = icon_slot || fallback_block_1$f(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--link__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[9], dirty, get_icon_slot_changes_1$2),
						get_icon_slot_context_1$2
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 16)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (79:26)            
function fallback_block_1$f(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[4];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[4])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (51:4) {#if !inline && ($$slots.icon || icon)}
function create_if_block_1$F(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[10].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[9], get_icon_slot_context$7);
	const icon_slot_or_fallback = icon_slot || fallback_block$L(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--link__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[9], dirty, get_icon_slot_changes$7),
						get_icon_slot_context$7
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 16)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (53:26)            
function fallback_block$L(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[4];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[4])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$34(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1H, create_else_block$s];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*disabled*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$34($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","href","inline","icon","disabled","visited","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { href = undefined } = $$props;
	let { inline = false } = $$props;
	let { icon = undefined } = $$props;
	let { disabled = false } = $$props;
	let { visited = false } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function p_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('inline' in $$new_props) $$invalidate(3, inline = $$new_props.inline);
		if ('icon' in $$new_props) $$invalidate(4, icon = $$new_props.icon);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('visited' in $$new_props) $$invalidate(6, visited = $$new_props.visited);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		size,
		href,
		inline,
		icon,
		disabled,
		visited,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		p_binding,
		a_binding
	];
}

class Link extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$34, create_fragment$34, safe_not_equal, {
			size: 1,
			href: 2,
			inline: 3,
			icon: 4,
			disabled: 5,
			visited: 6,
			ref: 0
		});
	}
}

var Link$1 = Link;

/* src/Breadcrumb/BreadcrumbItem.svelte generated by Svelte v3.49.0 */
const get_default_slot_changes_1 = dirty => ({ props: dirty & /*$$restProps*/ 4 });

const get_default_slot_context_1 = ctx => ({
	props: {
		'aria-current': /*$$restProps*/ ctx[2]['aria-current'],
		class: 'bx--link'
	}
});

const get_default_slot_changes$c = dirty => ({ props: dirty & /*$$restProps*/ 4 });

const get_default_slot_context$c = ctx => ({
	props: {
		'aria-current': /*$$restProps*/ ctx[2]['aria-current'],
		class: 'bx--link'
	}
});

// (37:2) {:else}
function create_else_block$r(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context_1);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $$restProps*/ 260)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes_1),
						get_default_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (33:2) {#if href}
function create_if_block$1G(ctx) {
	let link;
	let current;

	link = new Link$1({
			props: {
				href: /*href*/ ctx[0],
				"aria-current": /*$$restProps*/ ctx[2]['aria-current'],
				$$slots: { default: [create_default_slot$m] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*href*/ 1) link_changes.href = /*href*/ ctx[0];
			if (dirty & /*$$restProps*/ 4) link_changes["aria-current"] = /*$$restProps*/ ctx[2]['aria-current'];

			if (dirty & /*$$scope, $$restProps*/ 260) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

// (34:4) <Link href="{href}" aria-current="{$$restProps['aria-current']}">
function create_default_slot$m(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$c);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, $$restProps*/ 260)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$c),
						get_default_slot_context$c
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$33(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$1G, create_else_block$r];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let li_levels = [/*$$restProps*/ ctx[2]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--breadcrumb-item", true);
			toggle_class(li, "bx--breadcrumb-item--current", /*isCurrentPage*/ ctx[1] && /*$$restProps*/ ctx[2]['aria-current'] !== 'page');
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*click_handler*/ ctx[4]),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(li, "bx--breadcrumb-item", true);
			toggle_class(li, "bx--breadcrumb-item--current", /*isCurrentPage*/ ctx[1] && /*$$restProps*/ ctx[2]['aria-current'] !== 'page');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$33($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","isCurrentPage"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = undefined } = $$props;
	let { isCurrentPage = false } = $$props;
	setContext("BreadcrumbItem", {});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('isCurrentPage' in $$new_props) $$invalidate(1, isCurrentPage = $$new_props.isCurrentPage);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	return [
		href,
		isCurrentPage,
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class BreadcrumbItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$33, create_fragment$33, safe_not_equal, { href: 0, isCurrentPage: 1 });
	}
}

var BreadcrumbItem$1 = BreadcrumbItem;

/**
 * Pixel sizes of Carbon grid breakpoints.
 * @type {Record<import("./breakpoints").BreakpointSize, BreakpointValue>}
 */
const breakpoints = Object.freeze({
  sm: 320,
  md: 672,
  lg: 1056,
  xlg: 1312,
  max: 1584,
});

var breakpoints$1 = breakpoints;

/**
 * Creates a readable store that returns the current breakpoint size.
 * It also provides functions for creating derived stores used to do comparisons.
 */
function breakpointObserver() {
  const store = writable(undefined);

  onMount(() => {
    /** @type {Record<import("./breakpoints").BreakpointSize, MediaQueryList>} */
    const match = {
      sm: window.matchMedia(`(max-width: ${breakpoints.md}px)`),
      md: window.matchMedia(
        `(min-width: ${breakpoints.md}px) and (max-width: ${breakpoints.lg}px)`
      ),
      lg: window.matchMedia(
        `(min-width: ${breakpoints.lg}px) and (max-width: ${breakpoints.xlg}px)`
      ),
      xlg: window.matchMedia(
        `(min-width: ${breakpoints.xlg}px) and (max-width: ${breakpoints.max}px)`
      ),
      max: window.matchMedia(`(min-width: ${breakpoints.max}px)`),
    };
    const matchers = Object.entries(match);
    const sizeByMedia = Object.fromEntries(
      matchers.map(([size, queryList]) => [queryList.media, size])
    );

    const size = matchers.find(([size, queryList]) => queryList.matches)[0];
    store.set(size);

    /** @type {(e: MediaQueryListEvent) => void} */
    function handleChange({ matches, media }) {
      const size = sizeByMedia[media];
      if (matches) store.set(size);
    }

    matchers.forEach(([size, queryList]) =>
      queryList.addEventListener("change", handleChange)
    );

    return () => {
      matchers.forEach(([size, queryList]) =>
        queryList.removeEventListener("change", handleChange)
      );
    };
  });

  return {
    subscribe: store.subscribe,

    /**
     * Returns a store readable store that returns whether the current
     * breakpoint is smaller than {@link size}.
     * @param {import("./breakpoints").BreakpointSize} size Size to compare against.
     */
    smallerThan: (size) => {
      checkSizeValid(size);
      return derived(store, ($size) => breakpoints[$size] < breakpoints[size]);
    },

    /**
     * Returns a store readable store that returns whether the current
     * breakpoint is larger than {@link size}.
     * @param {import("./breakpoints").BreakpointSize} size Size to compare against.
     */
    largerThan: (size) => {
      checkSizeValid(size);
      return derived(store, ($size) => breakpoints[$size] > breakpoints[size]);
    },
  };
}

function checkSizeValid(size) {
  if (size in breakpoints == false)
    throw new Error(`"${size}" is not a valid breakpoint size.`);
}

/* src/Breakpoint/Breakpoint.svelte generated by Svelte v3.49.0 */

const get_default_slot_changes$b = dirty => ({
	size: dirty & /*size*/ 1,
	sizes: dirty & /*sizes*/ 2
});

const get_default_slot_context$b = ctx => ({
	size: /*size*/ ctx[0],
	sizes: /*sizes*/ ctx[1]
});

function create_fragment$32(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context$b);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, size, sizes*/ 19)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, get_default_slot_changes$b),
						get_default_slot_context$b
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$32($$self, $$props, $$invalidate) {
	let $observer;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;

	let { sizes = {
		sm: false,
		md: false,
		lg: false,
		xlg: false,
		max: false
	} } = $$props;

	const dispatch = createEventDispatcher();
	const observer = breakpointObserver();
	component_subscribe($$self, observer, value => $$invalidate(3, $observer = value));

	$$self.$$set = $$props => {
		if ('size' in $$props) $$invalidate(0, size = $$props.size);
		if ('sizes' in $$props) $$invalidate(1, sizes = $$props.sizes);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$observer*/ 8) {
			$$invalidate(0, size = $observer);
		}

		if ($$self.$$.dirty & /*size*/ 1) {
			$$invalidate(1, sizes = {
				sm: size == "sm",
				md: size == "md",
				lg: size == "lg",
				xlg: size == "xlg",
				max: size == "max"
			});
		}

		if ($$self.$$.dirty & /*size*/ 1) {
			if (size != undefined) dispatch("change", { size, breakpointValue: breakpoints[size] });
		}
	};

	return [size, sizes, observer, $observer, $$scope, slots];
}

class Breakpoint extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$32, create_fragment$32, safe_not_equal, { size: 0, sizes: 1 });
	}
}

var Breakpoint$1 = Breakpoint;

/* src/Button/ButtonSkeleton.svelte generated by Svelte v3.49.0 */

function create_else_block$q(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[7]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[8]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[9]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--btn", true);
			toggle_class(div, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(div, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(div, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(div, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (16:0) {#if href}
function create_if_block$1F(ctx) {
	let a;
	let t_value = "" + "";
	let t;
	let a_rel_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{ role: "button" },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			t = text(t_value);
			set_attributes(a, a_data);
			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[3]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*href*/ 1 && { href: /*href*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
				? 'noopener noreferrer'
				: undefined) && { rel: a_rel_value },
				{ role: "button" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skeleton", true);
			toggle_class(a, "bx--btn", true);
			toggle_class(a, "bx--btn--field", /*size*/ ctx[1] === 'field');
			toggle_class(a, "bx--btn--sm", /*size*/ ctx[1] === 'small');
			toggle_class(a, "bx--btn--lg", /*size*/ ctx[1] === 'lg');
			toggle_class(a, "bx--btn--xl", /*size*/ ctx[1] === 'xl');
		},
		d(detaching) {
			if (detaching) detach(a);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$31(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[0]) return create_if_block$1F;
		return create_else_block$q;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$31($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { size = "default" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
	};

	return [
		href,
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class ButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$31, create_fragment$31, safe_not_equal, { href: 0, size: 1 });
	}
}

var ButtonSkeleton$1 = ButtonSkeleton;

/* src/Button/Button.svelte generated by Svelte v3.49.0 */
const get_default_slot_changes$a = dirty => ({ props: dirty[0] & /*buttonProps*/ 512 });
const get_default_slot_context$a = ctx => ({ props: /*buttonProps*/ ctx[9] });

// (163:0) {:else}
function create_else_block$p(ctx) {
	let button;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_4$e(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [/*buttonProps*/ ctx[9]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[33](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[24]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[25]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[26]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[27])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$e(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[33](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (143:28) 
function create_if_block_2$q(ctx) {
	let a;
	let t;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	let if_block = /*hasIconOnly*/ ctx[8] && create_if_block_3$j(ctx);
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: {
				"aria-hidden": "true",
				class: "bx--btn__icon",
				"aria-label": /*iconDescription*/ ctx[3]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let a_levels = [/*buttonProps*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			if (if_block) if_block.m(a, null);
			append(a, t);

			if (default_slot) {
				default_slot.m(a, null);
			}

			if (switch_instance) {
				mount_component(switch_instance, a, null);
			}

			/*a_binding*/ ctx[32](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler_1*/ ctx[20]),
					listen(a, "mouseover", /*mouseover_handler_1*/ ctx[21]),
					listen(a, "mouseenter", /*mouseenter_handler_1*/ ctx[22]),
					listen(a, "mouseleave", /*mouseleave_handler_1*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*hasIconOnly*/ ctx[8]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$j(ctx);
					if_block.c();
					if_block.m(a, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 8) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[3];

			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, a, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty[0] & /*buttonProps*/ 512 && /*buttonProps*/ ctx[9]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			if (switch_instance) destroy_component(switch_instance);
			/*a_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (141:13) 
function create_if_block_1$E(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[19].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context$a);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope, buttonProps*/ 262656)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes$a),
						get_default_slot_context$a
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (130:0) {#if skeleton}
function create_if_block$1E(ctx) {
	let buttonskeleton;
	let current;

	const buttonskeleton_spread_levels = [
		{ href: /*href*/ ctx[7] },
		{ size: /*size*/ ctx[1] },
		/*$$restProps*/ ctx[10],
		{
			style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
		}
	];

	let buttonskeleton_props = {};

	for (let i = 0; i < buttonskeleton_spread_levels.length; i += 1) {
		buttonskeleton_props = assign(buttonskeleton_props, buttonskeleton_spread_levels[i]);
	}

	buttonskeleton = new ButtonSkeleton$1({ props: buttonskeleton_props });
	buttonskeleton.$on("click", /*click_handler*/ ctx[28]);
	buttonskeleton.$on("mouseover", /*mouseover_handler*/ ctx[29]);
	buttonskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[30]);
	buttonskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[31]);

	return {
		c() {
			create_component(buttonskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(buttonskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const buttonskeleton_changes = (dirty[0] & /*href, size, $$restProps, hasIconOnly*/ 1410)
			? get_spread_update(buttonskeleton_spread_levels, [
					dirty[0] & /*href*/ 128 && { href: /*href*/ ctx[7] },
					dirty[0] & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty[0] & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10]),
					dirty[0] & /*hasIconOnly*/ 256 && {
						style: /*hasIconOnly*/ ctx[8] && 'width: 3rem;'
					}
				])
			: {};

			buttonskeleton.$set(buttonskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonskeleton, detaching);
		}
	};
}

// (172:4) {#if hasIconOnly}
function create_if_block_4$e(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data(t, /*iconDescription*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (153:4) {#if hasIconOnly}
function create_if_block_3$j(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*iconDescription*/ ctx[3]);
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*iconDescription*/ 8) set_data(t, /*iconDescription*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$30(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1E, create_if_block_1$E, create_if_block_2$q, create_else_block$p];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		if (/*as*/ ctx[4]) return 1;
		if (/*href*/ ctx[7] && !/*disabled*/ ctx[6]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$30($$self, $$props, $$invalidate) {
	let hasIconOnly;
	let buttonProps;

	const omit_props_names = [
		"kind","size","expressive","isSelected","icon","iconDescription","tooltipAlignment","tooltipPosition","as","skeleton","disabled","href","tabindex","type","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = "primary" } = $$props;
	let { size = "default" } = $$props;
	let { expressive = false } = $$props;
	let { isSelected = false } = $$props;
	let { icon = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { as = false } = $$props;
	let { skeleton = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;
	let { tabindex = "0" } = $$props;
	let { type = "button" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ComposedModal");

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(11, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('expressive' in $$new_props) $$invalidate(12, expressive = $$new_props.expressive);
		if ('isSelected' in $$new_props) $$invalidate(13, isSelected = $$new_props.isSelected);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('tooltipAlignment' in $$new_props) $$invalidate(14, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$new_props) $$invalidate(15, tooltipPosition = $$new_props.tooltipPosition);
		if ('as' in $$new_props) $$invalidate(4, as = $$new_props.as);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(7, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(16, tabindex = $$new_props.tabindex);
		if ('type' in $$new_props) $$invalidate(17, type = $$new_props.type);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref*/ 1) {
			if (ctx && ref) {
				ctx.declareRef(ref);
			}
		}

		if ($$self.$$.dirty[0] & /*icon*/ 4) {
			$$invalidate(8, hasIconOnly = icon && !$$slots.default);
		}

		$$invalidate(9, buttonProps = {
			type: href && !disabled ? undefined : type,
			tabindex,
			disabled: disabled === true ? true : undefined,
			href,
			"aria-pressed": hasIconOnly && kind === "ghost" && !href
			? isSelected
			: undefined,
			...$$restProps,
			class: [
				"bx--btn",
				expressive && "bx--btn--expressive",
				(size === "small" && !expressive || size === "sm" && !expressive || size === "small" && !expressive) && "bx--btn--sm",
				size === "field" && !expressive || size === "md" && !expressive && "bx--btn--md",
				size === "field" && "bx--btn--field",
				size === "small" && "bx--btn--sm",
				size === "lg" && "bx--btn--lg",
				size === "xl" && "bx--btn--xl",
				kind && `bx--btn--${kind}`,
				disabled && "bx--btn--disabled",
				hasIconOnly && "bx--btn--icon-only",
				hasIconOnly && "bx--tooltip__trigger",
				hasIconOnly && "bx--tooltip--a11y",
				hasIconOnly && tooltipPosition && `bx--btn--icon-only--${tooltipPosition}`,
				hasIconOnly && tooltipAlignment && `bx--tooltip--align-${tooltipAlignment}`,
				hasIconOnly && isSelected && kind === "ghost" && "bx--btn--selected",
				$$restProps.class
			].filter(Boolean).join(" ")
		});
	};

	return [
		ref,
		size,
		icon,
		iconDescription,
		as,
		skeleton,
		disabled,
		href,
		hasIconOnly,
		buttonProps,
		$$restProps,
		kind,
		expressive,
		isSelected,
		tooltipAlignment,
		tooltipPosition,
		tabindex,
		type,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		button_binding
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$30,
			create_fragment$30,
			safe_not_equal,
			{
				kind: 11,
				size: 1,
				expressive: 12,
				isSelected: 13,
				icon: 2,
				iconDescription: 3,
				tooltipAlignment: 14,
				tooltipPosition: 15,
				as: 4,
				skeleton: 5,
				disabled: 6,
				href: 7,
				tabindex: 16,
				type: 17,
				ref: 0
			},
			null,
			[-1, -1]
		);
	}
}

var Button$1 = Button;

/* src/Button/ButtonSet.svelte generated by Svelte v3.49.0 */

function create_fragment$2$(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--btn-set", true);
			toggle_class(div, "bx--btn-set--stacked", /*stacked*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--btn-set", true);
			toggle_class(div, "bx--btn-set--stacked", /*stacked*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2$($$self, $$props, $$invalidate) {
	const omit_props_names = ["stacked"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { stacked = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('stacked' in $$new_props) $$invalidate(0, stacked = $$new_props.stacked);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [stacked, $$restProps, $$scope, slots];
}

class ButtonSet extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2$, create_fragment$2$, safe_not_equal, { stacked: 0 });
	}
}

var ButtonSet$1 = ButtonSet;

/* src/Checkbox/CheckboxSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$2_(ctx) {
	let div;
	let span;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
			toggle_class(div, "bx--checkbox-label", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2_($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class CheckboxSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2_, create_fragment$2_, safe_not_equal, {});
	}
}

var CheckboxSkeleton$1 = CheckboxSkeleton;

/* src/Checkbox/Checkbox.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$h = dirty => ({});
const get_labelText_slot_context$h = ctx => ({});

// (81:0) {:else}
function create_else_block$o(ctx) {
	let div;
	let input;
	let t;
	let label;
	let span;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[19].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[18], get_labelText_slot_context$h);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$K(ctx);
	let div_levels = [/*$$restProps*/ ctx[16]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t = space();
			label = element("label");
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(input, "type", "checkbox");
			input.value = /*value*/ ctx[4];
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[9];
			attr(input, "id", /*id*/ ctx[13]);
			input.indeterminate = /*indeterminate*/ ctx[5];
			attr(input, "name", /*name*/ ctx[12]);
			input.required = /*required*/ ctx[7];
			input.readOnly = /*readonly*/ ctx[8];
			toggle_class(input, "bx--checkbox", true);
			toggle_class(span, "bx--checkbox-label-text", true);
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			attr(label, "for", /*id*/ ctx[13]);
			attr(label, "title", /*title*/ ctx[2]);
			toggle_class(label, "bx--checkbox-label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[30](input);
			append(div, t);
			append(div, label);
			append(label, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			/*span_binding*/ ctx[32](span);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler_1*/ ctx[31]),
					listen(input, "change", /*change_handler*/ ctx[24]),
					listen(input, "blur", /*blur_handler*/ ctx[25]),
					listen(div, "click", /*click_handler_1*/ ctx[20]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[21]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[22]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*value*/ 16) {
				input.value = /*value*/ ctx[4];
			}

			if (!current || dirty[0] & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				input.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*id*/ 8192) {
				attr(input, "id", /*id*/ ctx[13]);
			}

			if (!current || dirty[0] & /*indeterminate*/ 32) {
				input.indeterminate = /*indeterminate*/ ctx[5];
			}

			if (!current || dirty[0] & /*name*/ 4096) {
				attr(input, "name", /*name*/ ctx[12]);
			}

			if (!current || dirty[0] & /*required*/ 128) {
				input.required = /*required*/ ctx[7];
			}

			if (!current || dirty[0] & /*readonly*/ 256) {
				input.readOnly = /*readonly*/ ctx[8];
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[18], dirty, get_labelText_slot_changes$h),
						get_labelText_slot_context$h
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 1024)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (dirty[0] & /*hideLabel*/ 2048) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (!current || dirty[0] & /*id*/ 8192) {
				attr(label, "for", /*id*/ ctx[13]);
			}

			if (!current || dirty[0] & /*title*/ 4) {
				attr(label, "title", /*title*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty[0] & /*$$restProps*/ 65536 && /*$$restProps*/ ctx[16]]));
			toggle_class(div, "bx--form-item", true);
			toggle_class(div, "bx--checkbox-wrapper", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[30](null);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			/*span_binding*/ ctx[32](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (73:0) {#if skeleton}
function create_if_block$1D(ctx) {
	let checkboxskeleton;
	let current;
	const checkboxskeleton_spread_levels = [/*$$restProps*/ ctx[16]];
	let checkboxskeleton_props = {};

	for (let i = 0; i < checkboxskeleton_spread_levels.length; i += 1) {
		checkboxskeleton_props = assign(checkboxskeleton_props, checkboxskeleton_spread_levels[i]);
	}

	checkboxskeleton = new CheckboxSkeleton$1({ props: checkboxskeleton_props });
	checkboxskeleton.$on("click", /*click_handler*/ ctx[26]);
	checkboxskeleton.$on("mouseover", /*mouseover_handler*/ ctx[27]);
	checkboxskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[28]);
	checkboxskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[29]);

	return {
		c() {
			create_component(checkboxskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkboxskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkboxskeleton_changes = (dirty[0] & /*$$restProps*/ 65536)
			? get_spread_update(checkboxskeleton_spread_levels, [get_spread_object(/*$$restProps*/ ctx[16])])
			: {};

			checkboxskeleton.$set(checkboxskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkboxskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkboxskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkboxskeleton, detaching);
		}
	};
}

// (121:31)            
function fallback_block$K(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2Z(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1D, create_else_block$o];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2Z($$self, $$props, $$invalidate) {
	let useGroup;
	let isTruncated;

	const omit_props_names = [
		"value","checked","group","indeterminate","skeleton","required","readonly","disabled","labelText","hideLabel","name","title","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { group = undefined } = $$props;
	let { indeterminate = false } = $$props;
	let { skeleton = false } = $$props;
	let { required = false } = $$props;
	let { readonly = false } = $$props;
	let { disabled = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { name = "" } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let refLabel = null;

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const change_handler_1 = () => {
		if (useGroup) {
			$$invalidate(1, group = group.includes(value)
			? group.filter(_value => _value !== value)
			: [...group, value]);
		} else {
			$$invalidate(0, checked = !checked);
		}
	};

	function span_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refLabel = $$value;
			$$invalidate(14, refLabel);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('group' in $$new_props) $$invalidate(1, group = $$new_props.group);
		if ('indeterminate' in $$new_props) $$invalidate(5, indeterminate = $$new_props.indeterminate);
		if ('skeleton' in $$new_props) $$invalidate(6, skeleton = $$new_props.skeleton);
		if ('required' in $$new_props) $$invalidate(7, required = $$new_props.required);
		if ('readonly' in $$new_props) $$invalidate(8, readonly = $$new_props.readonly);
		if ('disabled' in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ('labelText' in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ('name' in $$new_props) $$invalidate(12, name = $$new_props.name);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('id' in $$new_props) $$invalidate(13, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*group*/ 2) {
			$$invalidate(15, useGroup = Array.isArray(group));
		}

		if ($$self.$$.dirty[0] & /*useGroup, group, value, checked*/ 32787) {
			$$invalidate(0, checked = useGroup ? group.includes(value) : checked);
		}

		if ($$self.$$.dirty[0] & /*checked*/ 1) {
			dispatch("check", checked);
		}

		if ($$self.$$.dirty[0] & /*refLabel*/ 16384) {
			$$invalidate(17, isTruncated = refLabel?.offsetWidth < refLabel?.scrollWidth);
		}

		if ($$self.$$.dirty[0] & /*title, isTruncated, refLabel*/ 147460) {
			$$invalidate(2, title = !title && isTruncated ? refLabel?.innerText : title);
		}
	};

	return [
		checked,
		group,
		title,
		ref,
		value,
		indeterminate,
		skeleton,
		required,
		readonly,
		disabled,
		labelText,
		hideLabel,
		name,
		id,
		refLabel,
		useGroup,
		$$restProps,
		isTruncated,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		change_handler,
		blur_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		input_binding,
		change_handler_1,
		span_binding
	];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2Z,
			create_fragment$2Z,
			safe_not_equal,
			{
				value: 4,
				checked: 0,
				group: 1,
				indeterminate: 5,
				skeleton: 6,
				required: 7,
				readonly: 8,
				disabled: 9,
				labelText: 10,
				hideLabel: 11,
				name: 12,
				title: 2,
				id: 13,
				ref: 3
			},
			null,
			[-1, -1]
		);
	}
}

var Checkbox$1 = Checkbox;

/* src/Checkbox/InlineCheckbox.svelte generated by Svelte v3.49.0 */

function create_fragment$2Y(ctx) {
	let div;
	let input;
	let input_checked_value;
	let input_aria_checked_value;
	let t;
	let label;
	let label_aria_label_value;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "checkbox" },
		{
			checked: input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]
		},
		{ indeterminate: /*indeterminate*/ ctx[2] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[5],
		{
			"aria-checked": input_aria_checked_value = /*indeterminate*/ ctx[2]
			? undefined
			: /*checked*/ ctx[1]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t = space();
			label = element("label");
			set_attributes(input, input_data);
			toggle_class(input, "bx--checkbox", true);
			attr(label, "for", /*id*/ ctx[4]);
			attr(label, "title", /*title*/ ctx[3]);
			attr(label, "aria-label", label_aria_label_value = /*$$props*/ ctx[6]['aria-label']);
			toggle_class(label, "bx--checkbox-label", true);
			toggle_class(div, "bx--checkbox--inline", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[8](input);
			append(div, t);
			append(div, label);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "checkbox" },
				dirty & /*indeterminate, checked*/ 6 && input_checked_value !== (input_checked_value = /*indeterminate*/ ctx[2] ? false : /*checked*/ ctx[1]) && { checked: input_checked_value },
				dirty & /*indeterminate*/ 4 && { indeterminate: /*indeterminate*/ ctx[2] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
				dirty & /*indeterminate, checked*/ 6 && input_aria_checked_value !== (input_aria_checked_value = /*indeterminate*/ ctx[2]
				? undefined
				: /*checked*/ ctx[1]) && { "aria-checked": input_aria_checked_value }
			]));

			toggle_class(input, "bx--checkbox", true);

			if (dirty & /*id*/ 16) {
				attr(label, "for", /*id*/ ctx[4]);
			}

			if (dirty & /*title*/ 8) {
				attr(label, "title", /*title*/ ctx[3]);
			}

			if (dirty & /*$$props*/ 64 && label_aria_label_value !== (label_aria_label_value = /*$$props*/ ctx[6]['aria-label'])) {
				attr(label, "aria-label", label_aria_label_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$2Y($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","indeterminate","title","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { title = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(1, checked = $$new_props.checked);
		if ('indeterminate' in $$new_props) $$invalidate(2, indeterminate = $$new_props.indeterminate);
		if ('title' in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		checked,
		indeterminate,
		title,
		id,
		$$restProps,
		$$props,
		change_handler,
		input_binding
	];
}

class InlineCheckbox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2Y, create_fragment$2Y, safe_not_equal, {
			checked: 1,
			indeterminate: 2,
			title: 3,
			id: 4,
			ref: 0
		});
	}
}

var InlineCheckbox$1 = InlineCheckbox;

/* src/ContentSwitcher/ContentSwitcher.svelte generated by Svelte v3.49.0 */

function create_fragment$2X(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [{ role: "tablist" }, /*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[0] === 'xl');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[7]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[8]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[9]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "tablist" }, dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--content-switcher", true);
			toggle_class(div, "bx--content-switcher--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--content-switcher--xl", /*size*/ ctx[0] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2X($$self, $$props, $$invalidate) {
	let currentIndex;
	let switches;
	const omit_props_names = ["selectedIndex","size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedIndex = 0 } = $$props;
	let { size = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const currentId = writable(null);

	setContext("ContentSwitcher", {
		currentId,
		add: ({ id, text, selected }) => {
			if (selected) {
				$$invalidate(2, selectedIndex = switches.length);
			}

			$$invalidate(4, switches = [...switches, { id, text, selected }]);
		},
		update: id => {
			$$invalidate(2, selectedIndex = switches.map(({ id }) => id).indexOf(id));
		},
		change: direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = switches.length - 1;
			} else if (index >= switches.length) {
				index = 0;
			}

			$$invalidate(2, selectedIndex = index);
		}
	});

	afterUpdate(() => {
		if (selectedIndex !== currentIndex) {
			$$invalidate(3, currentIndex = selectedIndex);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selectedIndex' in $$new_props) $$invalidate(2, selectedIndex = $$new_props.selectedIndex);
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*switches, currentIndex*/ 24) {
			if (switches[currentIndex]) {
				dispatch("change", currentIndex);
				currentId.set(switches[currentIndex].id);
			}
		}
	};

	$$invalidate(3, currentIndex = -1);
	$$invalidate(4, switches = []);

	return [
		size,
		$$restProps,
		selectedIndex,
		currentIndex,
		switches,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ContentSwitcher extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2X, create_fragment$2X, safe_not_equal, { selectedIndex: 2, size: 0 });
	}
}

var ContentSwitcher$1 = ContentSwitcher;

/* src/ContentSwitcher/Switch.svelte generated by Svelte v3.49.0 */

function fallback_block$J(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2W(ctx) {
	let button;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$J(ctx);

	let button_levels = [
		{ type: "button" },
		{ role: "tab" },
		{
			tabindex: button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1'
		},
		{ "aria-selected": /*selected*/ ctx[0] },
		{ disabled: /*disabled*/ ctx[3] },
		{ id: /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--content-switcher__label", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[14](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", prevent_default(/*click_handler_1*/ ctx[15])),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[12]),
					listen(button, "keydown", /*keydown_handler*/ ctx[13]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ role: "tab" },
				(!current || dirty & /*selected*/ 1 && button_tabindex_value !== (button_tabindex_value = /*selected*/ ctx[0] ? '0' : '-1')) && { tabindex: button_tabindex_value },
				(!current || dirty & /*selected*/ 1) && { "aria-selected": /*selected*/ ctx[0] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { id: /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(button, "bx--content-switcher-btn", true);
			toggle_class(button, "bx--content-switcher--selected", /*selected*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2W($$self, $$props, $$invalidate) {
	const omit_props_names = ["text","selected","disabled","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "Provide text" } = $$props;
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("ContentSwitcher");
	ctx.add({ id, text, selected });

	const unsubscribe = ctx.currentId.subscribe($ => {
		$$invalidate(0, selected = $ === id);
	});

	afterUpdate(() => {
		if (selected) {
			ref.focus();
		}
	});

	onMount(() => {
		return () => unsubscribe();
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		ctx.update(id);
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'ArrowRight') {
			ctx.change(1);
		} else if (key === 'ArrowLeft') {
			ctx.change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		selected,
		ref,
		text,
		disabled,
		id,
		ctx,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		button_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class Switch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2W, create_fragment$2W, safe_not_equal, {
			text: 2,
			selected: 0,
			disabled: 3,
			id: 4,
			ref: 1
		});
	}
}

var Switch$1 = Switch;

/* src/ContextMenu/ContextMenu.svelte generated by Svelte v3.49.0 */

const { window: window_1 } = globals;

function create_fragment$2V(ctx) {
	let ul;
	let ul_style_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	let ul_levels = [
		{ role: "menu" },
		{ tabindex: "-1" },
		{ "data-direction": direction },
		{ "data-level": /*level*/ ctx[7] },
		/*$$restProps*/ ctx[12],
		{
			style: ul_style_value = "left: " + /*x*/ ctx[1] + "px; top: " + /*y*/ ctx[2] + "px; " + /*$$restProps*/ ctx[12].style
		}
	];

	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--menu", true);
			toggle_class(ul, "bx--menu--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--menu--invisible", /*open*/ ctx[0] && /*x*/ ctx[1] === 0 && /*y*/ ctx[2] === 0);
			toggle_class(ul, "bx--menu--root", /*level*/ ctx[7] === 1);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[20](ul);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "contextmenu", prevent_default(/*contextmenu_handler*/ ctx[17])),
					listen(window_1, "click", /*click_handler_1*/ ctx[18]),
					listen(window_1, "keydown", /*keydown_handler_1*/ ctx[19]),
					listen(ul, "click", /*click_handler*/ ctx[15]),
					listen(ul, "click", /*click_handler_2*/ ctx[21]),
					listen(ul, "keydown", /*keydown_handler*/ ctx[16]),
					listen(ul, "keydown", /*keydown_handler_2*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				{ role: "menu" },
				{ tabindex: "-1" },
				{ "data-direction": direction },
				(!current || dirty & /*level*/ 128) && { "data-level": /*level*/ ctx[7] },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12],
				(!current || dirty & /*x, y, $$restProps*/ 4102 && ul_style_value !== (ul_style_value = "left: " + /*x*/ ctx[1] + "px; top: " + /*y*/ ctx[2] + "px; " + /*$$restProps*/ ctx[12].style)) && { style: ul_style_value }
			]));

			toggle_class(ul, "bx--menu", true);
			toggle_class(ul, "bx--menu--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--menu--invisible", /*open*/ ctx[0] && /*x*/ ctx[1] === 0 && /*y*/ ctx[2] === 0);
			toggle_class(ul, "bx--menu--root", /*level*/ ctx[7] === 1);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

let direction = 1;

function instance$2V($$self, $$props, $$invalidate) {
	let level;
	const omit_props_names = ["target","open","x","y","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $hasPopup;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { target = null } = $$props;
	let { open = false } = $$props;
	let { x = 0 } = $$props;
	let { y = 0 } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const position = writable([x, y]);
	const currentIndex = writable(-1);
	const hasPopup = writable(false);
	component_subscribe($$self, hasPopup, value => $$invalidate(8, $hasPopup = value));
	const menuOffsetX = writable(0);
	const ctx = getContext("ContextMenu");
	let options = [];
	let prevX = 0;
	let prevY = 0;
	let focusIndex = -1;
	let openDetail = null;

	function close() {
		$$invalidate(0, open = false);
		$$invalidate(1, x = 0);
		$$invalidate(2, y = 0);
		prevX = 0;
		prevY = 0;
		$$invalidate(5, focusIndex = -1);
	}

	/** @type {(e: MouseEvent) => void} */
	function openMenu(e) {
		const { height, width } = ref.getBoundingClientRect();

		if (open || x === 0) {
			if (window.innerWidth - width < e.x) {
				$$invalidate(1, x = e.x - width);
			} else {
				$$invalidate(1, x = e.x);
			}
		}

		if (open || y === 0) {
			menuOffsetX.set(e.x);

			if (window.innerHeight - height < e.y) {
				$$invalidate(2, y = e.y - height);
			} else {
				$$invalidate(2, y = e.y);
			}
		}

		position.set([x, y]);
		$$invalidate(0, open = true);
		openDetail = e.target;
	}

	onMount(() => {
		return () => {
			if (target != null) {
				if (Array.isArray(target)) {
					target.forEach(node => node?.removeEventListener("contextmenu", openMenu));
				} else {
					target.removeEventListener("contextmenu", openMenu);
				}
			}
		};
	});

	setContext("ContextMenu", {
		menuOffsetX,
		currentIndex,
		position,
		close,
		setPopup: popup => {
			hasPopup.set(popup);
		}
	});

	afterUpdate(() => {
		if (open) {
			$$invalidate(6, options = [...ref.querySelectorAll("li[data-nested='false']")]);

			if (level === 1) {
				if (prevX !== x || prevY !== y) ref.focus();
				prevX = x;
				prevY = y;
			}

			dispatch("open", openDetail);
		} else {
			dispatch("close");
		}

		if (!$hasPopup && options[focusIndex]) options[focusIndex].focus();
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const contextmenu_handler = e => {
		if (target != null) return;
		if (level > 1) return;
		if (!ref) return;
		openMenu(e);
	};

	const click_handler_1 = e => {
		if (!open) return;
		close();
	};

	const keydown_handler_1 = e => {
		if (open && e.key === 'Escape') close();
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const click_handler_2 = ({ target }) => {
		const closestOption = target.closest('[tabindex]');

		if (closestOption && closestOption.getAttribute('role') !== 'menuitem') {
			close();
		}
	};

	const keydown_handler_2 = e => {
		if (open) e.preventDefault();
		if ($hasPopup) return;

		if (e.key === 'ArrowDown') {
			if (focusIndex < options.length - 1) $$invalidate(5, focusIndex++, focusIndex);
		} else if (e.key === 'ArrowUp') {
			if (focusIndex === -1) {
				$$invalidate(5, focusIndex = options.length - 1);
			} else {
				if (focusIndex > 0) $$invalidate(5, focusIndex--, focusIndex);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('target' in $$new_props) $$invalidate(4, target = $$new_props.target);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('x' in $$new_props) $$invalidate(1, x = $$new_props.x);
		if ('y' in $$new_props) $$invalidate(2, y = $$new_props.y);
		if ('ref' in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*target*/ 16) {
			if (target != null) {
				if (Array.isArray(target)) {
					target.forEach(node => node?.addEventListener("contextmenu", openMenu));
				} else {
					target.addEventListener("contextmenu", openMenu);
				}
			}
		}

		if ($$self.$$.dirty & /*focusIndex*/ 32) {
			currentIndex.set(focusIndex);
		}
	};

	$$invalidate(7, level = !ctx ? 1 : 2);

	return [
		open,
		x,
		y,
		ref,
		target,
		focusIndex,
		options,
		level,
		$hasPopup,
		hasPopup,
		close,
		openMenu,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		contextmenu_handler,
		click_handler_1,
		keydown_handler_1,
		ul_binding,
		click_handler_2,
		keydown_handler_2
	];
}

class ContextMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2V, create_fragment$2V, safe_not_equal, { target: 4, open: 0, x: 1, y: 2, ref: 3 });
	}
}

var ContextMenu$1 = ContextMenu;

/* src/ContextMenu/ContextMenuDivider.svelte generated by Svelte v3.49.0 */

function create_fragment$2U(ctx) {
	let li;

	return {
		c() {
			li = element("li");
			attr(li, "role", "separator");
			toggle_class(li, "bx--menu-divider", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

class ContextMenuDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment$2U, safe_not_equal, {});
	}
}

var ContextMenuDivider$1 = ContextMenuDivider;

/* src/ContextMenu/ContextMenuGroup.svelte generated by Svelte v3.49.0 */

function create_fragment$2T(ctx) {
	let li;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			li = element("li");
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "group");
			attr(ul, "aria-label", /*labelText*/ ctx[0]);
			attr(li, "role", "none");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*labelText*/ 1) {
				attr(ul, "aria-label", /*labelText*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2U($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedIds = [] } = $$props;
	let { labelText = "" } = $$props;
	const currentIds = writable([]);

	setContext("ContextMenuGroup", {
		currentIds,
		addOption: ({ id }) => {
			if (!selectedIds.includes(id)) {
				$$invalidate(1, selectedIds = [...selectedIds, id]);
			}
		},
		toggleOption: ({ id }) => {
			if (!selectedIds.includes(id)) {
				$$invalidate(1, selectedIds = [...selectedIds, id]);
			} else {
				$$invalidate(1, selectedIds = selectedIds.filter(_ => _ !== id));
			}
		}
	});

	$$self.$$set = $$props => {
		if ('selectedIds' in $$props) $$invalidate(1, selectedIds = $$props.selectedIds);
		if ('labelText' in $$props) $$invalidate(0, labelText = $$props.labelText);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedIds*/ 2) {
			currentIds.set(selectedIds);
		}
	};

	return [labelText, selectedIds, $$scope, slots];
}

class ContextMenuGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2U, create_fragment$2T, safe_not_equal, { selectedIds: 1, labelText: 0 });
	}
}

var ContextMenuGroup$1 = ContextMenuGroup;

/* src/icons/Checkmark.svelte generated by Svelte v3.49.0 */

function create_if_block$1C(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2S(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1C(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1C(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2T($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Checkmark extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2T, create_fragment$2S, safe_not_equal, { size: 0, title: 1 });
	}
}

var Checkmark$1 = Checkmark;

/* src/icons/CaretRight.svelte generated by Svelte v3.49.0 */

function create_if_block$1B(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2R(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1B(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M12 8L22 16 12 24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1B(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2S($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CaretRight extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2S, create_fragment$2R, safe_not_equal, { size: 0, title: 1 });
	}
}

var CaretRight$1 = CaretRight;

/* src/ContextMenu/ContextMenuOption.svelte generated by Svelte v3.49.0 */
const get_shortcutText_slot_changes = dirty => ({});
const get_shortcutText_slot_context = ctx => ({});
const get_labelText_slot_changes_1$2 = dirty => ({});
const get_labelText_slot_context_1$2 = ctx => ({});
const get_icon_slot_changes_1$1 = dirty => ({});
const get_icon_slot_context_1$1 = ctx => ({});
const get_labelText_slot_changes$g = dirty => ({});
const get_labelText_slot_context$g = ctx => ({});
const get_icon_slot_changes$6 = dirty => ({});
const get_icon_slot_context$6 = ctx => ({});

// (266:2) {:else}
function create_else_block$n(ctx) {
	let div1;
	let t0;
	let span;
	let t1;
	let div0;
	let current;
	let if_block = /*indented*/ ctx[2] && create_if_block_2$p(ctx);
	const labelText_slot_template = /*#slots*/ ctx[23].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[31], get_labelText_slot_context_1$2);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_3$1(ctx);
	const shortcutText_slot_template = /*#slots*/ ctx[23].shortcutText;
	const shortcutText_slot = create_slot(shortcutText_slot_template, ctx, /*$$scope*/ ctx[31], get_shortcutText_slot_context);
	const shortcutText_slot_or_fallback = shortcutText_slot || fallback_block_2$7(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			if (shortcutText_slot_or_fallback) shortcutText_slot_or_fallback.c();
			attr(span, "title", /*labelText*/ ctx[6]);
			toggle_class(span, "bx--menu-option__label", true);
			toggle_class(div0, "bx--menu-option__info", true);
			toggle_class(div1, "bx--menu-option__content", true);
			toggle_class(div1, "bx--menu-option__content--disabled", /*disabled*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (shortcutText_slot_or_fallback) {
				shortcutText_slot_or_fallback.m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*indented*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*indented*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$p(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[31], dirty, get_labelText_slot_changes_1$2),
						get_labelText_slot_context_1$2
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 64)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*labelText*/ 64) {
				attr(span, "title", /*labelText*/ ctx[6]);
			}

			if (shortcutText_slot) {
				if (shortcutText_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						shortcutText_slot,
						shortcutText_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(shortcutText_slot_template, /*$$scope*/ ctx[31], dirty, get_shortcutText_slot_changes),
						get_shortcutText_slot_context
					);
				}
			} else {
				if (shortcutText_slot_or_fallback && shortcutText_slot_or_fallback.p && (!current || dirty[0] & /*shortcutText*/ 128)) {
					shortcutText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div1, "bx--menu-option__content--disabled", /*disabled*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(labelText_slot_or_fallback, local);
			transition_in(shortcutText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(labelText_slot_or_fallback, local);
			transition_out(shortcutText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (shortcutText_slot_or_fallback) shortcutText_slot_or_fallback.d(detaching);
		}
	};
}

// (241:2) {#if subOptions}
function create_if_block$1A(ctx) {
	let div1;
	let t0;
	let span;
	let t1;
	let div0;
	let caretright;
	let t2;
	let contextmenu;
	let current;
	let if_block = /*indented*/ ctx[2] && create_if_block_1$D(ctx);
	const labelText_slot_template = /*#slots*/ ctx[23].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[31], get_labelText_slot_context$g);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$I(ctx);
	caretright = new CaretRight$1({});

	contextmenu = new ContextMenu$1({
			props: {
				open: /*submenuOpen*/ ctx[9],
				x: /*submenuPosition*/ ctx[16][0],
				y: /*submenuPosition*/ ctx[16][1],
				$$slots: { default: [create_default_slot$l] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			create_component(caretright.$$.fragment);
			t2 = space();
			create_component(contextmenu.$$.fragment);
			attr(span, "title", /*labelText*/ ctx[6]);
			toggle_class(span, "bx--menu-option__label", true);
			toggle_class(div0, "bx--menu-option__info", true);
			toggle_class(div1, "bx--menu-option__content", true);
			toggle_class(div1, "bx--menu-option__content--disabled", /*disabled*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			append(div1, t1);
			append(div1, div0);
			mount_component(caretright, div0, null);
			insert(target, t2, anchor);
			mount_component(contextmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*indented*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*indented*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$D(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[31], dirty, get_labelText_slot_changes$g),
						get_labelText_slot_context$g
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 64)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*labelText*/ 64) {
				attr(span, "title", /*labelText*/ ctx[6]);
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div1, "bx--menu-option__content--disabled", /*disabled*/ ctx[5]);
			}

			const contextmenu_changes = {};
			if (dirty[0] & /*submenuOpen*/ 512) contextmenu_changes.open = /*submenuOpen*/ ctx[9];
			if (dirty[0] & /*submenuPosition*/ 65536) contextmenu_changes.x = /*submenuPosition*/ ctx[16][0];
			if (dirty[0] & /*submenuPosition*/ 65536) contextmenu_changes.y = /*submenuPosition*/ ctx[16][1];

			if (dirty[1] & /*$$scope*/ 1) {
				contextmenu_changes.$$scope = { dirty, ctx };
			}

			contextmenu.$set(contextmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(labelText_slot_or_fallback, local);
			transition_in(caretright.$$.fragment, local);
			transition_in(contextmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(labelText_slot_or_fallback, local);
			transition_out(caretright.$$.fragment, local);
			transition_out(contextmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			destroy_component(caretright);
			if (detaching) detach(t2);
			destroy_component(contextmenu, detaching);
		}
	};
}

// (271:6) {#if indented}
function create_if_block_2$p(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[23].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[31], get_icon_slot_context_1$1);
	const icon_slot_or_fallback = icon_slot || fallback_block_4$1(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--menu-option__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[31], dirty, get_icon_slot_changes_1$1),
						get_icon_slot_context_1$1
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty[0] & /*icon*/ 8)) {
					icon_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (273:28)              
function fallback_block_4$1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (279:31) {labelText}
function fallback_block_3$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 64) set_data(t, /*labelText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (282:34) {shortcutText}
function fallback_block_2$7(ctx) {
	let t;

	return {
		c() {
			t = text(/*shortcutText*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*shortcutText*/ 128) set_data(t, /*shortcutText*/ ctx[7]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (246:6) {#if indented}
function create_if_block_1$D(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[23].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[31], get_icon_slot_context$6);
	const icon_slot_or_fallback = icon_slot || fallback_block_1$e(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--menu-option__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[31], dirty, get_icon_slot_changes$6),
						get_icon_slot_context$6
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty[0] & /*icon*/ 8)) {
					icon_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (248:28)              
function fallback_block_1$e(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (254:31) {labelText}
function fallback_block$I(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 64) set_data(t, /*labelText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (259:4) <ContextMenu       open="{submenuOpen}"       x="{submenuPosition[0]}"       y="{submenuPosition[1]}"     >
function create_default_slot$l(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[23].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[31], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[31],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[31])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[31], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2Q(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let li_aria_disabled_value;
	let li_aria_haspopup_value;
	let li_aria_expanded_value;
	let li_aria_checked_value;
	let li_data_nested_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block$1A, create_else_block$n];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*subOptions*/ ctx[17]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let li_levels = [
		{ role: /*role*/ ctx[15] },
		{ tabindex: "-1" },
		{
			"aria-disabled": li_aria_disabled_value = !/*subOptions*/ ctx[17] && /*disabled*/ ctx[5]
		},
		{
			"aria-haspopup": li_aria_haspopup_value = /*subOptions*/ ctx[17] ? true : undefined
		},
		{
			"aria-expanded": li_aria_expanded_value = /*subOptions*/ ctx[17]
			? /*submenuOpen*/ ctx[9]
			: undefined
		},
		{ indented: /*indented*/ ctx[2] },
		{
			"aria-checked": li_aria_checked_value = /*isSelectable*/ ctx[11] || /*isRadio*/ ctx[10]
			? /*selected*/ ctx[0]
			: undefined
		},
		{
			"data-nested": li_data_nested_value = /*ref*/ ctx[1] && /*ref*/ ctx[1].closest('.bx--menu').getAttribute('data-level') === '2'
		},
		{ "data-sub": /*subOptions*/ ctx[17] },
		{ "data-id": /*id*/ ctx[8] },
		/*$$restProps*/ ctx[19]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--menu-option", true);
			toggle_class(li, "bx--menu-option--disabled", true);
			toggle_class(li, "bx--menu-option--active", /*subOptions*/ ctx[17] && /*submenuOpen*/ ctx[9]);
			toggle_class(li, "bx--menu-option--danger", !/*subOptions*/ ctx[17] && /*kind*/ ctx[4] === 'danger');
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			/*li_binding*/ ctx[27](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "keydown", /*keydown_handler*/ ctx[24]),
					listen(li, "keydown", /*keydown_handler_1*/ ctx[28]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[25]),
					listen(li, "mouseenter", /*mouseenter_handler_1*/ ctx[29]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[26]),
					listen(li, "mouseleave", /*mouseleave_handler_1*/ ctx[30]),
					listen(li, "click", /*handleClick*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty[0] & /*role*/ 32768) && { role: /*role*/ ctx[15] },
				{ tabindex: "-1" },
				(!current || dirty[0] & /*subOptions, disabled*/ 131104 && li_aria_disabled_value !== (li_aria_disabled_value = !/*subOptions*/ ctx[17] && /*disabled*/ ctx[5])) && { "aria-disabled": li_aria_disabled_value },
				(!current || dirty[0] & /*subOptions*/ 131072 && li_aria_haspopup_value !== (li_aria_haspopup_value = /*subOptions*/ ctx[17] ? true : undefined)) && { "aria-haspopup": li_aria_haspopup_value },
				(!current || dirty[0] & /*subOptions, submenuOpen*/ 131584 && li_aria_expanded_value !== (li_aria_expanded_value = /*subOptions*/ ctx[17]
				? /*submenuOpen*/ ctx[9]
				: undefined)) && { "aria-expanded": li_aria_expanded_value },
				(!current || dirty[0] & /*indented*/ 4) && { indented: /*indented*/ ctx[2] },
				(!current || dirty[0] & /*isSelectable, isRadio, selected*/ 3073 && li_aria_checked_value !== (li_aria_checked_value = /*isSelectable*/ ctx[11] || /*isRadio*/ ctx[10]
				? /*selected*/ ctx[0]
				: undefined)) && { "aria-checked": li_aria_checked_value },
				(!current || dirty[0] & /*ref*/ 2 && li_data_nested_value !== (li_data_nested_value = /*ref*/ ctx[1] && /*ref*/ ctx[1].closest('.bx--menu').getAttribute('data-level') === '2')) && { "data-nested": li_data_nested_value },
				(!current || dirty[0] & /*subOptions*/ 131072) && { "data-sub": /*subOptions*/ ctx[17] },
				(!current || dirty[0] & /*id*/ 256) && { "data-id": /*id*/ ctx[8] },
				dirty[0] & /*$$restProps*/ 524288 && /*$$restProps*/ ctx[19]
			]));

			toggle_class(li, "bx--menu-option", true);
			toggle_class(li, "bx--menu-option--disabled", true);
			toggle_class(li, "bx--menu-option--active", /*subOptions*/ ctx[17] && /*submenuOpen*/ ctx[9]);
			toggle_class(li, "bx--menu-option--danger", !/*subOptions*/ ctx[17] && /*kind*/ ctx[4] === 'danger');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			/*li_binding*/ ctx[27](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const moderate01 = 150;

function instance$2R($$self, $$props, $$invalidate) {
	let isSelectable;
	let isRadio;
	let subOptions;

	const omit_props_names = [
		"kind","disabled","indented","icon","labelText","selected","selectable","shortcutText","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { kind = "default" } = $$props;
	let { disabled = false } = $$props;
	let { indented = false } = $$props;
	let { icon = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { selected = false } = $$props;
	let { selectable = false } = $$props;
	let { shortcutText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const ctx = getContext("ContextMenu");
	const ctxGroup = getContext("ContextMenuGroup");
	const ctxRadioGroup = getContext("ContextMenuRadioGroup");
	let unsubCurrentIds = undefined;
	let unsubCurrentId = undefined;
	let timeoutHover = undefined;
	let rootMenuPosition = [0, 0];
	let focusIndex = 0;
	let options = [];
	let role = "menuitem";
	let submenuOpen = false;
	let submenuPosition = [0, 0];
	let menuOffsetX = 0;

	const unsubPosition = ctx.position.subscribe(position => {
		$$invalidate(21, rootMenuPosition = position);
	});

	const unsubMenuOffsetX = ctx.menuOffsetX.subscribe(_menuOffsetX => {
		$$invalidate(22, menuOffsetX = _menuOffsetX);
	});

	function handleClick(opts = {}) {
		if (disabled) return ctx.close();
		if (subOptions) return;

		if (!!ctxGroup) {
			ctxGroup.toggleOption({ id });
		} else if (!!ctxRadioGroup) {
			if (opts.fromKeyboard) {
				ctxRadioGroup.setOption({ id: opts.id });
			} else {
				ctxRadioGroup.setOption({ id });
			}
		} else {
			$$invalidate(0, selected = !selected);
		}

		ctx.close();
		dispatch("click");
	}

	onMount(() => {
		if (selected === true) $$invalidate(20, selectable = true);

		if (ctxGroup) {
			unsubCurrentIds = ctxGroup.currentIds.subscribe(_currentIds => {
				$$invalidate(0, selected = _currentIds.includes(id));
			});
		}

		if (ctxRadioGroup) {
			unsubCurrentId = ctxRadioGroup.currentId.subscribe(_id => {
				$$invalidate(0, selected = id === _id);
			});
		}

		return () => {
			unsubPosition();
			unsubMenuOffsetX();
			if (unsubCurrentIds) unsubCurrentIds();
			if (unsubCurrentId) unsubCurrentId();
			if (typeof timeoutHover === "number") clearTimeout(timeoutHover);
		};
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = async ({ key, target }) => {
		if (subOptions && (key === 'ArrowRight' || key === ' ' || key === 'Enter')) {
			$$invalidate(9, submenuOpen = true);
			await tick();
			$$invalidate(14, options = [...ref.querySelectorAll('li[tabindex]')]);
			if (options[focusIndex]) options[focusIndex].focus();
			return;
		}

		if (submenuOpen) {
			if (key === 'ArrowLeft') {
				$$invalidate(9, submenuOpen = false);
				$$invalidate(13, focusIndex = 0);
				return;
			}

			if (key === 'ArrowDown') {
				if (focusIndex < options.length - 1) $$invalidate(13, focusIndex++, focusIndex);
			} else if (key === 'ArrowUp') {
				if (focusIndex === -1) {
					$$invalidate(13, focusIndex = options.length - 1);
				} else {
					if (focusIndex > 0) $$invalidate(13, focusIndex--, focusIndex);
				}
			}

			if (options[focusIndex]) options[focusIndex].focus();
		}

		if (key === ' ' || key === 'Enter') {
			handleClick({
				fromKeyboard: true,
				id: target.getAttribute('data-id')
			});
		}
	};

	const mouseenter_handler_1 = () => {
		if (subOptions) {
			$$invalidate(12, timeoutHover = setTimeout(
				() => {
					$$invalidate(9, submenuOpen = true);
				},
				moderate01
			));
		}
	};

	const mouseleave_handler_1 = e => {
		if (subOptions) {
			if (typeof timeoutHover === 'number') clearTimeout(timeoutHover);
			$$invalidate(9, submenuOpen = false);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(4, kind = $$new_props.kind);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('indented' in $$new_props) $$invalidate(2, indented = $$new_props.indented);
		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ('labelText' in $$new_props) $$invalidate(6, labelText = $$new_props.labelText);
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('selectable' in $$new_props) $$invalidate(20, selectable = $$new_props.selectable);
		if ('shortcutText' in $$new_props) $$invalidate(7, shortcutText = $$new_props.shortcutText);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(31, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*selectable*/ 1048576) {
			$$invalidate(11, isSelectable = !!ctxGroup || selectable);
		}

		if ($$self.$$.dirty[0] & /*submenuOpen*/ 512) {
			ctx.setPopup(submenuOpen);
		}

		if ($$self.$$.dirty[0] & /*submenuOpen, ref, rootMenuPosition, menuOffsetX*/ 6291970) {
			if (submenuOpen) {
				const { width, y } = ref.getBoundingClientRect();
				let x = rootMenuPosition[0] + width;

				if (window.innerWidth - menuOffsetX < width) {
					x = rootMenuPosition[0] - width;
				}

				$$invalidate(16, submenuPosition = [x, y]);
			}
		}

		if ($$self.$$.dirty[0] & /*isSelectable, selected, id, isRadio*/ 3329) {
			{
				if (isSelectable) {
					$$invalidate(2, indented = true);
					$$invalidate(15, role = "menuitemcheckbox");

					if (selected) {
						if (ctxGroup) ctxGroup.addOption({ id });
						$$invalidate(3, icon = Checkmark$1);
					} else {
						$$invalidate(3, icon = undefined);
					}
				}

				if (isRadio) {
					$$invalidate(2, indented = true);
					$$invalidate(15, role = "menuitemradio");
					ctxRadioGroup.addOption({ id });

					if (selected) {
						if (ctxRadioGroup) ctxRadioGroup.setOption({ id });
						$$invalidate(3, icon = Checkmark$1);
					} else {
						$$invalidate(3, icon = undefined);
					}
				}
			}
		}
	};

	$$invalidate(10, isRadio = !!ctxRadioGroup);
	$$invalidate(17, subOptions = $$slots.default);

	return [
		selected,
		ref,
		indented,
		icon,
		kind,
		disabled,
		labelText,
		shortcutText,
		id,
		submenuOpen,
		isRadio,
		isSelectable,
		timeoutHover,
		focusIndex,
		options,
		role,
		submenuPosition,
		subOptions,
		handleClick,
		$$restProps,
		selectable,
		rootMenuPosition,
		menuOffsetX,
		slots,
		keydown_handler,
		mouseenter_handler,
		mouseleave_handler,
		li_binding,
		keydown_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class ContextMenuOption extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2R,
			create_fragment$2Q,
			safe_not_equal,
			{
				kind: 4,
				disabled: 5,
				indented: 2,
				icon: 3,
				labelText: 6,
				selected: 0,
				selectable: 20,
				shortcutText: 7,
				id: 8,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var ContextMenuOption$1 = ContextMenuOption;

/* src/ContextMenu/ContextMenuRadioGroup.svelte generated by Svelte v3.49.0 */

function create_fragment$2P(ctx) {
	let li;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			li = element("li");
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "group");
			attr(ul, "aria-label", /*labelText*/ ctx[0]);
			attr(li, "role", "none");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*labelText*/ 1) {
				attr(ul, "aria-label", /*labelText*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2Q($$self, $$props, $$invalidate) {
	let $radioIds;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectedId = "" } = $$props;
	let { labelText = "" } = $$props;
	const currentId = writable("");
	const radioIds = writable([]);
	component_subscribe($$self, radioIds, value => $$invalidate(5, $radioIds = value));

	setContext("ContextMenuRadioGroup", {
		currentId,
		radioIds,
		addOption: ({ id }) => {
			if (!$radioIds.includes(id)) {
				radioIds.update(_ => [..._, id]);
			}
		},
		setOption: ({ id }) => {
			$$invalidate(2, selectedId = id);
		}
	});

	$$self.$$set = $$props => {
		if ('selectedId' in $$props) $$invalidate(2, selectedId = $$props.selectedId);
		if ('labelText' in $$props) $$invalidate(0, labelText = $$props.labelText);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedId*/ 4) {
			currentId.set(selectedId);
		}
	};

	return [labelText, radioIds, selectedId, $$scope, slots];
}

class ContextMenuRadioGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2Q, create_fragment$2P, safe_not_equal, { selectedId: 2, labelText: 0 });
	}
}

var ContextMenuRadioGroup$1 = ContextMenuRadioGroup;

/* src/icons/Copy.svelte generated by Svelte v3.49.0 */

function create_if_block$1z(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2O(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$1z(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M28,10V28H10V10H28m0-2H10a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V10a2,2,0,0,0-2-2Z");
			attr(path1, "d", "M4,18H2V4A2,2,0,0,1,4,2H18V4H4Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1z(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2P($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Copy extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2P, create_fragment$2O, safe_not_equal, { size: 0, title: 1 });
	}
}

var Copy$1 = Copy;

/* src/CopyButton/CopyButton.svelte generated by Svelte v3.49.0 */

function create_fragment$2N(ctx) {
	let button;
	let copy_1;
	let t0;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;
	copy_1 = new Copy$1({ props: { class: "bx--snippet__icon" } });

	let button_levels = [
		{ type: "button" },
		{ "aria-live": "polite" },
		{ "aria-label": /*iconDescription*/ ctx[2] },
		{ title: /*iconDescription*/ ctx[2] },
		/*$$restProps*/ ctx[8]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			create_component(copy_1.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(/*feedback*/ ctx[0]);
			attr(span, "aria-hidden", "true");
			toggle_class(span, "bx--assistive-text", true);
			toggle_class(span, "bx--copy-btn__feedback", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--copy-btn", true);
			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[5]);
			toggle_class(button, "bx--copy-btn--fade-in", /*animation*/ ctx[5] === 'fade-in');
			toggle_class(button, "bx--copy-btn--fade-out", /*animation*/ ctx[5] === 'fade-out');
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(copy_1, button, null);
			append(button, t0);
			append(button, span);
			append(span, t1);
			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[9]),
					listen(button, "click", /*click_handler_1*/ ctx[11]),
					listen(button, "animationend", /*animationend_handler*/ ctx[10]),
					listen(button, "animationend", /*animationend_handler_1*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*feedback*/ 1) set_data(t1, /*feedback*/ ctx[0]);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ "aria-live": "polite" },
				(!current || dirty & /*iconDescription*/ 4) && { "aria-label": /*iconDescription*/ ctx[2] },
				(!current || dirty & /*iconDescription*/ 4) && { title: /*iconDescription*/ ctx[2] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(button, "bx--copy-btn", true);
			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[5]);
			toggle_class(button, "bx--copy-btn--fade-in", /*animation*/ ctx[5] === 'fade-in');
			toggle_class(button, "bx--copy-btn--fade-out", /*animation*/ ctx[5] === 'fade-out');
		},
		i(local) {
			if (current) return;
			transition_in(copy_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copy_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(copy_1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2O($$self, $$props, $$invalidate) {
	const omit_props_names = ["feedback","feedbackTimeout","iconDescription","text","copy"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { feedback = "Copied!" } = $$props;
	let { feedbackTimeout = 2000 } = $$props;
	let { iconDescription = "Copy to clipboard" } = $$props;
	let { text } = $$props;

	let { copy = async text => {
		try {
			await navigator.clipboard.writeText(text);
		} catch(e) {
			console.log(e);
		}
	} } = $$props;

	const dispatch = createEventDispatcher();

	/** @type {"fade-in" | "fade-out"} */
	let animation = undefined;

	let timeout = undefined;

	onMount(() => {
		return () => clearTimeout(timeout);
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function animationend_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		if (text !== undefined) {
			copy(text);
			dispatch('copy');
		}

		if (animation === 'fade-in') return;
		$$invalidate(5, animation = 'fade-in');

		$$invalidate(6, timeout = setTimeout(
			() => {
				$$invalidate(5, animation = 'fade-out');
			},
			feedbackTimeout
		));
	};

	const animationend_handler_1 = ({ animationName }) => {
		if (animationName === 'hide-feedback') {
			$$invalidate(5, animation = undefined);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('feedback' in $$new_props) $$invalidate(0, feedback = $$new_props.feedback);
		if ('feedbackTimeout' in $$new_props) $$invalidate(1, feedbackTimeout = $$new_props.feedbackTimeout);
		if ('iconDescription' in $$new_props) $$invalidate(2, iconDescription = $$new_props.iconDescription);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('copy' in $$new_props) $$invalidate(4, copy = $$new_props.copy);
	};

	return [
		feedback,
		feedbackTimeout,
		iconDescription,
		text,
		copy,
		animation,
		timeout,
		dispatch,
		$$restProps,
		click_handler,
		animationend_handler,
		click_handler_1,
		animationend_handler_1
	];
}

class CopyButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2O, create_fragment$2N, safe_not_equal, {
			feedback: 0,
			feedbackTimeout: 1,
			iconDescription: 2,
			text: 3,
			copy: 4
		});
	}
}

var CopyButton$1 = CopyButton;

/* src/icons/WarningFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$1y(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2M(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$1y(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14C30,8.3,23.7,2,16,2z M14.9,8h2.2v11h-2.2V8z M16,25\tc-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22c0.8,0,1.5,0.7,1.5,1.5S16.8,25,16,25z");
			attr(path1, "fill", "none");
			attr(path1, "d", "M17.5,23.5c0,0.8-0.7,1.5-1.5,1.5c-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22\tC16.8,22,17.5,22.7,17.5,23.5z M17.1,8h-2.2v11h2.2V8z");
			attr(path1, "data-icon-path", "inner-path");
			attr(path1, "opacity", "0");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1y(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2N($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class WarningFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2N, create_fragment$2M, safe_not_equal, { size: 0, title: 1 });
	}
}

var WarningFilled$1 = WarningFilled;

/* src/icons/WarningAltFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$1x(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2L(ctx) {
	let svg;
	let path0;
	let path1;
	let path2;
	let if_block = /*title*/ ctx[1] && create_if_block$1x(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
			attr(path2, "d", "M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
			append(svg, path2);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1x(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2M($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class WarningAltFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2M, create_fragment$2L, safe_not_equal, { size: 0, title: 1 });
	}
}

var WarningAltFilled$1 = WarningAltFilled;

/* src/ListBox/ListBox.svelte generated by Svelte v3.49.0 */

function create_if_block_1$C(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[6]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 64) set_data(t, /*invalidText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (62:0) {#if !invalid && warn}
function create_if_block$1w(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[8]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*warnText*/ 256) set_data(t, /*warnText*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2K(ctx) {
	let div;
	let div_data_invalid_value;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{ role: "listbox" },
		{ tabindex: "-1" },
		{
			"data-invalid": div_data_invalid_value = /*invalid*/ ctx[5] || undefined
		},
		/*$$restProps*/ ctx[9]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[5] && create_if_block_1$C(ctx);
	let if_block1 = !/*invalid*/ ctx[5] && /*warn*/ ctx[7] && create_if_block$1w(ctx);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === 'xl');
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === 'inline');
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "keydown", /*keydown_handler*/ ctx[12]),
					listen(div, "keydown", keydown_handler_1),
					listen(div, "click", prevent_default(/*click_handler*/ ctx[13]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				{ tabindex: "-1" },
				(!current || dirty & /*invalid*/ 32 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[5] || undefined)) && { "data-invalid": div_data_invalid_value },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div, "bx--list-box", true);
			toggle_class(div, "bx--list-box--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div, "bx--list-box--xl", /*size*/ ctx[0] === 'xl');
			toggle_class(div, "bx--list-box--inline", /*type*/ ctx[1] === 'inline');
			toggle_class(div, "bx--list-box--disabled", /*disabled*/ ctx[4]);
			toggle_class(div, "bx--list-box--expanded", /*open*/ ctx[2]);
			toggle_class(div, "bx--list-box--light", /*light*/ ctx[3]);
			toggle_class(div, "bx--list-box--warning", !/*invalid*/ ctx[5] && /*warn*/ ctx[7]);

			if (/*invalid*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$C(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!/*invalid*/ ctx[5] && /*warn*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1w(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

const keydown_handler_1 = e => {
	if (e.key === 'Escape') {
		e.stopPropagation();
	}
};

function instance$2L($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","type","open","light","disabled","invalid","invalidText","warn","warnText"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ('open' in $$new_props) $$invalidate(2, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('invalid' in $$new_props) $$invalidate(5, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(6, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(7, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(8, warnText = $$new_props.warnText);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		type,
		open,
		light,
		disabled,
		invalid,
		invalidText,
		warn,
		warnText,
		$$restProps,
		$$scope,
		slots,
		keydown_handler,
		click_handler
	];
}

class ListBox extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2L, create_fragment$2K, safe_not_equal, {
			size: 0,
			type: 1,
			open: 2,
			light: 3,
			disabled: 4,
			invalid: 5,
			invalidText: 6,
			warn: 7,
			warnText: 8
		});
	}
}

var ListBox$1 = ListBox;

/* src/ListBox/ListBoxField.svelte generated by Svelte v3.49.0 */

function create_fragment$2J(ctx) {
	let div;
	let div_aria_owns_value;
	let div_aria_controls_value;
	let div_aria_label_value;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div_levels = [
		{ role: /*role*/ ctx[2] },
		{ "aria-expanded": /*ariaExpanded*/ ctx[6] },
		{
			"aria-owns": div_aria_owns_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined
		},
		{
			"aria-controls": div_aria_controls_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined
		},
		{ "aria-disabled": /*disabled*/ ctx[1] },
		{
			"aria-label": div_aria_label_value = /*ariaExpanded*/ ctx[6]
			? /*translateWithId*/ ctx[4]('close')
			: /*translateWithId*/ ctx[4]('open')
		},
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[1] ? '-1' : /*tabindex*/ ctx[3]
		},
		/*$$restProps*/ ctx[7]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__field", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[19](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[12]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(div, "keydown", stop_propagation(/*keydown_handler*/ ctx[16])),
					listen(div, "focus", /*focus_handler*/ ctx[17]),
					listen(div, "blur", /*blur_handler*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*ariaExpanded*/ 64) && { "aria-expanded": /*ariaExpanded*/ ctx[6] },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_owns_value !== (div_aria_owns_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined)) && { "aria-owns": div_aria_owns_value },
				(!current || dirty & /*ariaExpanded, menuId*/ 96 && div_aria_controls_value !== (div_aria_controls_value = /*ariaExpanded*/ ctx[6] && /*menuId*/ ctx[5] || undefined)) && { "aria-controls": div_aria_controls_value },
				(!current || dirty & /*disabled*/ 2) && { "aria-disabled": /*disabled*/ ctx[1] },
				(!current || dirty & /*ariaExpanded, translateWithId*/ 80 && div_aria_label_value !== (div_aria_label_value = /*ariaExpanded*/ ctx[6]
				? /*translateWithId*/ ctx[4]('close')
				: /*translateWithId*/ ctx[4]('open'))) && { "aria-label": div_aria_label_value },
				(!current || dirty & /*disabled, tabindex*/ 10 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[1] ? '-1' : /*tabindex*/ ctx[3])) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(div, "bx--list-box__field", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2K($$self, $$props, $$invalidate) {
	let ariaExpanded;
	let menuId;
	const omit_props_names = ["disabled","role","tabindex","translationIds","translateWithId","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disabled = false } = $$props;
	let { role = "combobox" } = $$props;
	let { tabindex = "-1" } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	const ctx = getContext("MultiSelect");

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(22, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ('tabindex' in $$new_props) $$invalidate(3, tabindex = $$new_props.tabindex);
		if ('translateWithId' in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(9, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			if (ctx && ref) {
				ctx.declareRef({ key: "field", ref });
			}
		}

		$$invalidate(6, ariaExpanded = $$props["aria-expanded"]);

		if ($$self.$$.dirty & /*id*/ 512) {
			$$invalidate(5, menuId = `menu-${id}`);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		ref,
		disabled,
		role,
		tabindex,
		translateWithId,
		menuId,
		ariaExpanded,
		$$restProps,
		translationIds,
		id,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		div_binding
	];
}

class ListBoxField extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2K, create_fragment$2J, safe_not_equal, {
			disabled: 1,
			role: 2,
			tabindex: 3,
			translationIds: 8,
			translateWithId: 4,
			id: 9,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[8];
	}
}

var ListBoxField$1 = ListBoxField;

/* src/ListBox/ListBoxMenu.svelte generated by Svelte v3.49.0 */

function create_fragment$2I(ctx) {
	let div;
	let div_id_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{ role: "listbox" },
		{
			id: div_id_value = "menu-" + /*id*/ ctx[1]
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[6](div);
			current = true;

			if (!mounted) {
				dispose = listen(div, "scroll", /*scroll_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "listbox" },
				(!current || dirty & /*id*/ 2 && div_id_value !== (div_id_value = "menu-" + /*id*/ ctx[1])) && { id: div_id_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--list-box__menu", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$2J($$self, $$props, $$invalidate) {
	const omit_props_names = ["id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;

	function scroll_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, id, $$restProps, $$scope, slots, scroll_handler, div_binding];
}

class ListBoxMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2J, create_fragment$2I, safe_not_equal, { id: 1, ref: 0 });
	}
}

var ListBoxMenu$1 = ListBoxMenu;

/* src/icons/ChevronDown.svelte generated by Svelte v3.49.0 */

function create_if_block$1v(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2H(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1v(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M16 22L6 12 7.4 10.6 16 19.2 24.6 10.6 26 12z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1v(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2I($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ChevronDown extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2I, create_fragment$2H, safe_not_equal, { size: 0, title: 1 });
	}
}

var ChevronDown$1 = ChevronDown;

/* src/ListBox/ListBoxMenuIcon.svelte generated by Svelte v3.49.0 */

function create_fragment$2G(ctx) {
	let div;
	let chevrondown;
	let current;
	let mounted;
	let dispose;

	chevrondown = new ChevronDown$1({
			props: {
				"aria-label": /*description*/ ctx[1],
				title: /*description*/ ctx[1]
			}
		});

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(chevrondown.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(chevrondown, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", prevent_default(/*click_handler*/ ctx[6]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const chevrondown_changes = {};
			if (dirty & /*description*/ 2) chevrondown_changes["aria-label"] = /*description*/ ctx[1];
			if (dirty & /*description*/ 2) chevrondown_changes.title = /*description*/ ctx[1];
			chevrondown.$set(chevrondown_changes);
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--list-box__menu-icon", true);
			toggle_class(div, "bx--list-box__menu-icon--open", /*open*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(chevrondown);
			mounted = false;
			dispose();
		}
	};
}

function instance$2H($$self, $$props, $$invalidate) {
	let translationId;
	let description;
	const omit_props_names = ["open","translationIds","translateWithId"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { open = false } = $$props;
	const translationIds = { close: "close", open: "open" };
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const defaultTranslations = {
		[translationIds.close]: "Close menu",
		[translationIds.open]: "Open menu"
	};

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('translateWithId' in $$new_props) $$invalidate(4, translateWithId = $$new_props.translateWithId);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			$$invalidate(5, translationId = open ? translationIds.close : translationIds.open);
		}

		if ($$self.$$.dirty & /*translateWithId, translationId*/ 48) {
			$$invalidate(1, description = translateWithId?.(translationId) ?? defaultTranslations[translationId]);
		}
	};

	return [
		open,
		description,
		$$restProps,
		translationIds,
		translateWithId,
		translationId,
		click_handler
	];
}

class ListBoxMenuIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2H, create_fragment$2G, safe_not_equal, {
			open: 0,
			translationIds: 3,
			translateWithId: 4
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

var ListBoxMenuIcon$1 = ListBoxMenuIcon;

/* src/ListBox/ListBoxMenuItem.svelte generated by Svelte v3.49.0 */

function create_fragment$2F(ctx) {
	let div1;
	let div0;
	let div1_disabled_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	let div1_levels = [
		{ role: "option" },
		{ "aria-selected": /*active*/ ctx[0] },
		{
			disabled: div1_disabled_value = /*disabled*/ ctx[2] ? true : undefined
		},
		/*$$restProps*/ ctx[5]
	];

	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "title", /*title*/ ctx[4]);
			toggle_class(div0, "bx--list-box__menu-item__option", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[12](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[9]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*title*/ 16) {
				attr(div0, "title", /*title*/ ctx[4]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ role: "option" },
				(!current || dirty & /*active*/ 1) && { "aria-selected": /*active*/ ctx[0] },
				(!current || dirty & /*disabled*/ 4 && div1_disabled_value !== (div1_disabled_value = /*disabled*/ ctx[2] ? true : undefined)) && { disabled: div1_disabled_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(div1, "bx--list-box__menu-item", true);
			toggle_class(div1, "bx--list-box__menu-item--active", /*active*/ ctx[0]);
			toggle_class(div1, "bx--list-box__menu-item--highlighted", /*highlighted*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[12](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2G($$self, $$props, $$invalidate) {
	let isTruncated;
	let title;
	const omit_props_names = ["active","highlighted","disabled"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { active = false } = $$props;
	let { highlighted = false } = $$props;
	let { disabled = false } = $$props;
	let ref = null;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
		if ('highlighted' in $$new_props) $$invalidate(1, highlighted = $$new_props.highlighted);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 8) {
			$$invalidate(6, isTruncated = ref?.offsetWidth < ref?.scrollWidth);
		}

		if ($$self.$$.dirty & /*isTruncated, ref*/ 72) {
			$$invalidate(4, title = isTruncated ? ref?.innerText : undefined);
		}
	};

	return [
		active,
		highlighted,
		disabled,
		ref,
		title,
		$$restProps,
		isTruncated,
		$$scope,
		slots,
		click_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding
	];
}

class ListBoxMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2G, create_fragment$2F, safe_not_equal, { active: 0, highlighted: 1, disabled: 2 });
	}
}

var ListBoxMenuItem$1 = ListBoxMenuItem;

/* src/icons/Close.svelte generated by Svelte v3.49.0 */

function create_if_block$1u(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2E(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1u(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1u(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2F($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Close extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2F, create_fragment$2E, safe_not_equal, { size: 0, title: 1 });
	}
}

var Close$1 = Close;

/* src/ListBox/ListBoxSelection.svelte generated by Svelte v3.49.0 */

function create_else_block$m(ctx) {
	let div;
	let t;
	let close;
	let div_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*selectionCount*/ ctx[1] !== undefined && create_if_block_1$B(ctx);
	close = new Close$1({});

	let div_levels = [
		{ role: "button" },
		{ "aria-label": /*description*/ ctx[4] },
		{ title: /*description*/ ctx[4] },
		{
			tabindex: div_tabindex_value = /*disabled*/ ctx[2] ? '-1' : '0'
		},
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(close.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);
			mount_component(close, div, null);
			/*div_binding*/ ctx[12](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", stop_propagation(prevent_default(/*click_handler_1*/ ctx[13]))),
					listen(div, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[14]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*selectionCount*/ ctx[1] !== undefined) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$B(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "button" },
				(!current || dirty & /*description*/ 16) && { "aria-label": /*description*/ ctx[4] },
				(!current || dirty & /*description*/ 16) && { title: /*description*/ ctx[4] },
				(!current || dirty & /*disabled*/ 4 && div_tabindex_value !== (div_tabindex_value = /*disabled*/ ctx[2] ? '-1' : '0')) && { tabindex: div_tabindex_value },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--list-box__selection", true);
			toggle_class(div, "bx--tag--filter", /*selectionCount*/ ctx[1]);
			toggle_class(div, "bx--list-box__selection--multi", /*selectionCount*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			destroy_component(close);
			/*div_binding*/ ctx[12](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (52:0) {#if selectionCount !== undefined}
function create_if_block$1t(ctx) {
	let div1;
	let span;
	let t0;
	let t1;
	let div0;
	let close;
	let div0_tabindex_value;
	let current;
	let mounted;
	let dispose;
	close = new Close$1({});

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t0 = text(/*selectionCount*/ ctx[1]);
			t1 = space();
			div0 = element("div");
			create_component(close.$$.fragment);
			attr(span, "title", /*selectionCount*/ ctx[1]);
			toggle_class(span, "bx--tag__label", true);
			attr(div0, "role", "button");
			attr(div0, "tabindex", div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0);
			attr(div0, "disabled", /*disabled*/ ctx[2]);
			attr(div0, "aria-label", /*translationIds*/ ctx[3].clearAll);
			attr(div0, "title", /*description*/ ctx[4]);
			toggle_class(div0, "bx--tag__close-icon", true);
			toggle_class(div1, "bx--tag", true);
			toggle_class(div1, "bx--tag--filter", true);
			toggle_class(div1, "bx--tag--high-contrast", true);
			toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(span, t0);
			append(div1, t1);
			append(div1, div0);
			mount_component(close, div0, null);
			/*div0_binding*/ ctx[9](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(prevent_default(/*click_handler*/ ctx[10]))),
					listen(div0, "keydown", stop_propagation(/*keydown_handler*/ ctx[11]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*selectionCount*/ 2) set_data(t0, /*selectionCount*/ ctx[1]);

			if (!current || dirty & /*selectionCount*/ 2) {
				attr(span, "title", /*selectionCount*/ ctx[1]);
			}

			if (!current || dirty & /*disabled*/ 4 && div0_tabindex_value !== (div0_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) {
				attr(div0, "tabindex", div0_tabindex_value);
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(div0, "disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*description*/ 16) {
				attr(div0, "title", /*description*/ ctx[4]);
			}

			if (dirty & /*disabled*/ 4) {
				toggle_class(div1, "bx--tag--disabled", /*disabled*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(close);
			/*div0_binding*/ ctx[9](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (106:4) {#if selectionCount !== undefined}
function create_if_block_1$B(ctx) {
	let t;

	return {
		c() {
			t = text(/*selectionCount*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*selectionCount*/ 2) set_data(t, /*selectionCount*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2D(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1t, create_else_block$m];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*selectionCount*/ ctx[1] !== undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2E($$self, $$props, $$invalidate) {
	let translationId;
	let description;
	const omit_props_names = ["selectionCount","disabled","translationIds","translateWithId","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { selectionCount = undefined } = $$props;
	let { disabled = false } = $$props;

	const translationIds = {
		clearAll: "clearAll",
		clearSelection: "clearSelection"
	};

	let { translateWithId = id => defaultTranslations[id] } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.clearAll]: "Clear all selected items",
		[translationIds.clearSelection]: "Clear selected item"
	};

	const dispatch = createEventDispatcher();
	const ctx = getContext("MultiSelect");

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler = e => {
		if (!disabled) {
			dispatch('clear', e);
		}
	};

	const keydown_handler = e => {
		if (!disabled && e.key === 'Enter') {
			dispatch('clear', e);
		}
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = e => {
		if (!disabled) {
			dispatch('clear', e);
		}
	};

	const keydown_handler_1 = e => {
		if (!disabled && e.key === 'Enter') {
			dispatch('clear', e);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selectionCount' in $$new_props) $$invalidate(1, selectionCount = $$new_props.selectionCount);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('translateWithId' in $$new_props) $$invalidate(7, translateWithId = $$new_props.translateWithId);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref*/ 1) {
			if (ctx && ref) {
				ctx.declareRef({ key: "selection", ref });
			}
		}

		if ($$self.$$.dirty & /*selectionCount*/ 2) {
			$$invalidate(8, translationId = selectionCount
			? translationIds.clearAll
			: translationIds.clearSelection);
		}

		if ($$self.$$.dirty & /*translateWithId, translationId*/ 384) {
			$$invalidate(4, description = translateWithId?.(translationId) ?? defaultTranslations[translationId]);
		}
	};

	return [
		ref,
		selectionCount,
		disabled,
		translationIds,
		description,
		dispatch,
		$$restProps,
		translateWithId,
		translationId,
		div0_binding,
		click_handler,
		keydown_handler,
		div_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class ListBoxSelection extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2E, create_fragment$2D, safe_not_equal, {
			selectionCount: 1,
			disabled: 2,
			translationIds: 3,
			translateWithId: 7,
			ref: 0
		});
	}

	get translationIds() {
		return this.$$.ctx[3];
	}
}

var ListBoxSelection$1 = ListBoxSelection;

/* src/ComboBox/ComboBox.svelte generated by Svelte v3.49.0 */

function get_each_context$i(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[56] = list[i];
	child_ctx[58] = i;
	return child_ctx;
}

const get_default_slot_changes$9 = dirty => ({
	item: dirty[0] & /*filteredItems*/ 16777216,
	index: dirty[0] & /*filteredItems*/ 16777216
});

const get_default_slot_context$9 = ctx => ({
	item: /*item*/ ctx[56],
	index: /*i*/ ctx[58]
});

// (220:2) {#if titleText}
function create_if_block_6$9(ctx) {
	let label;
	let t;

	return {
		c() {
			label = element("label");
			t = text(/*titleText*/ ctx[9]);
			attr(label, "for", /*id*/ ctx[19]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 512) set_data(t, /*titleText*/ ctx[9]);

			if (dirty[0] & /*id*/ 524288) {
				attr(label, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
		}
	};
}

// (342:6) {#if invalid}
function create_if_block_5$a(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (345:6) {#if !invalid && warn}
function create_if_block_4$d(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (350:6) {#if value}
function create_if_block_3$i(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection$1({
			props: {
				translateWithId: /*translateWithIdSelection*/ ctx[18],
				disabled: /*disabled*/ ctx[8],
				open: /*open*/ ctx[2]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[46]);
	listboxselection.$on("clear", /*clear*/ ctx[21]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithIdSelection*/ 262144) listboxselection_changes.translateWithId = /*translateWithIdSelection*/ ctx[18];
			if (dirty[0] & /*disabled*/ 256) listboxselection_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*open*/ 4) listboxselection_changes.open = /*open*/ ctx[2];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (243:4) <ListBoxField       role="button"       aria-expanded="{open}"       on:click="{async () => {         if (disabled) return;         open = true;         await tick();         ref.focus();       }}"       id="{id}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3$2(ctx) {
	let input;
	let input_aria_controls_value;
	let input_aria_owns_value;
	let t0;
	let t1;
	let t2;
	let t3;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[2] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[25]
		},
		{ "aria-labelledby": /*comboId*/ ctx[26] },
		{ "aria-disabled": /*disabled*/ ctx[8] },
		{
			"aria-controls": input_aria_controls_value = /*open*/ ctx[2] ? /*menuId*/ ctx[27] : undefined
		},
		{
			"aria-owns": input_aria_owns_value = /*open*/ ctx[2] ? /*menuId*/ ctx[27] : undefined
		},
		{ disabled: /*disabled*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[10] },
		{ id: /*id*/ ctx[19] },
		{ name: /*name*/ ctx[20] },
		/*$$restProps*/ ctx[30]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[13] && create_if_block_5$a();
	let if_block1 = !/*invalid*/ ctx[13] && /*warn*/ ctx[14] && create_if_block_4$d();
	let if_block2 = /*value*/ ctx[1] && create_if_block_3$i(ctx);

	listboxmenuicon = new ListBoxMenuIcon$1({
			props: {
				translateWithId: /*translateWithId*/ ctx[17],
				open: /*open*/ ctx[2]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[47]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[16]);
			toggle_class(input, "bx--text-input--empty", /*value*/ ctx[1] === '');
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[41](input);
			set_input_value(input, /*value*/ ctx[1]);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t3, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[42]),
					listen(input, "input", /*input_handler*/ ctx[43]),
					listen(input, "keydown", /*keydown_handler*/ ctx[35]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[44])),
					listen(input, "keyup", /*keyup_handler*/ ctx[36]),
					listen(input, "focus", /*focus_handler*/ ctx[37]),
					listen(input, "blur", /*blur_handler*/ ctx[38]),
					listen(input, "blur", /*blur_handler_1*/ ctx[45]),
					listen(input, "paste", /*paste_handler*/ ctx[39])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 4) && { "aria-expanded": /*open*/ ctx[2] },
				(!current || dirty[0] & /*highlightedId*/ 33554432) && {
					"aria-activedescendant": /*highlightedId*/ ctx[25]
				},
				(!current || dirty[0] & /*comboId*/ 67108864) && { "aria-labelledby": /*comboId*/ ctx[26] },
				(!current || dirty[0] & /*disabled*/ 256) && { "aria-disabled": /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*open, menuId*/ 134217732 && input_aria_controls_value !== (input_aria_controls_value = /*open*/ ctx[2] ? /*menuId*/ ctx[27] : undefined)) && {
					"aria-controls": input_aria_controls_value
				},
				(!current || dirty[0] & /*open, menuId*/ 134217732 && input_aria_owns_value !== (input_aria_owns_value = /*open*/ ctx[2] ? /*menuId*/ ctx[27] : undefined)) && { "aria-owns": input_aria_owns_value },
				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*placeholder*/ 1024) && { placeholder: /*placeholder*/ ctx[10] },
				(!current || dirty[0] & /*id*/ 524288) && { id: /*id*/ ctx[19] },
				(!current || dirty[0] & /*name*/ 1048576) && { name: /*name*/ ctx[20] },
				dirty[0] & /*$$restProps*/ 1073741824 && /*$$restProps*/ ctx[30]
			]));

			if (dirty[0] & /*value*/ 2 && input.value !== /*value*/ ctx[1]) {
				set_input_value(input, /*value*/ ctx[1]);
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[16]);
			toggle_class(input, "bx--text-input--empty", /*value*/ ctx[1] === '');

			if (/*invalid*/ ctx[13]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 8192) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$a();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[13] && /*warn*/ ctx[14]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 24576) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$d();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*value*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*value*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_3$i(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t3.parentNode, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*translateWithId*/ 131072) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[17];
			if (dirty[0] & /*open*/ 4) listboxmenuicon_changes.open = /*open*/ ctx[2];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[41](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t3);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (369:4) {#if open}
function create_if_block_1$A(ctx) {
	let listboxmenu;
	let updating_ref;
	let current;

	function listboxmenu_ref_binding(value) {
		/*listboxmenu_ref_binding*/ ctx[51](value);
	}

	let listboxmenu_props = {
		"aria-label": /*ariaLabel*/ ctx[28],
		id: /*id*/ ctx[19],
		$$slots: { default: [create_default_slot_1$8] },
		$$scope: { ctx }
	};

	if (/*listRef*/ ctx[4] !== void 0) {
		listboxmenu_props.ref = /*listRef*/ ctx[4];
	}

	listboxmenu = new ListBoxMenu$1({ props: listboxmenu_props });
	binding_callbacks.push(() => bind(listboxmenu, 'ref', listboxmenu_ref_binding));
	listboxmenu.$on("scroll", /*scroll_handler*/ ctx[52]);

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*ariaLabel*/ 268435456) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[28];
			if (dirty[0] & /*id*/ 524288) listboxmenu_changes.id = /*id*/ ctx[19];

			if (dirty[0] & /*filteredItems, selectedId, highlightedIndex, open, value, itemToString, selectedItem*/ 29360167 | dirty[1] & /*$$scope*/ 4194304) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_ref && dirty[0] & /*listRef*/ 16) {
				updating_ref = true;
				listboxmenu_changes.ref = /*listRef*/ ctx[4];
				add_flush_callback(() => updating_ref = false);
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (399:44)                
function fallback_block$H(ctx) {
	let t_value = /*itemToString*/ ctx[5](/*item*/ ctx[56]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, filteredItems*/ 16777248 && t_value !== (t_value = /*itemToString*/ ctx[5](/*item*/ ctx[56]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (402:12) {#if selectedItem && selectedItem.id === item.id}
function create_if_block_2$o(ctx) {
	let checkmark;
	let current;

	checkmark = new Checkmark$1({
			props: {
				class: "bx--list-box__menu-item__selected-icon"
			}
		});

	return {
		c() {
			create_component(checkmark.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmark, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(checkmark.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmark.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmark, detaching);
		}
	};
}

// (377:10) <ListBoxMenuItem             id="{item.id}"             active="{selectedId === item.id}"             highlighted="{highlightedIndex === i}"             disabled="{item.disabled}"             on:click="{(e) => {               if (item.disabled) {                 e.stopPropagation();                 return;               }               selectedId = item.id;               open = false;                if (filteredItems[i]) {                 value = itemToString(filteredItems[i]);               }             }}"             on:mouseenter="{() => {               if (item.disabled) return;               highlightedIndex = i;             }}"           >
function create_default_slot_2$6(ctx) {
	let t0;
	let t1;
	let current;
	const default_slot_template = /*#slots*/ ctx[34].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[53], get_default_slot_context$9);
	const default_slot_or_fallback = default_slot || fallback_block$H(ctx);
	let if_block = /*selectedItem*/ ctx[22] && /*selectedItem*/ ctx[22].id === /*item*/ ctx[56].id && create_if_block_2$o();

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			insert(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t1, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*filteredItems*/ 16777216 | dirty[1] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[53],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[53])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[53], dirty, get_default_slot_changes$9),
						get_default_slot_context$9
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*itemToString, filteredItems*/ 16777248)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (/*selectedItem*/ ctx[22] && /*selectedItem*/ ctx[22].id === /*item*/ ctx[56].id) {
				if (if_block) {
					if (dirty[0] & /*selectedItem, filteredItems*/ 20971520) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$o();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching) detach(t0);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t1);
		}
	};
}

// (376:8) {#each filteredItems as item, i (item.id)}
function create_each_block$i(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3(...args) {
		return /*click_handler_3*/ ctx[49](/*item*/ ctx[56], /*i*/ ctx[58], ...args);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[50](/*item*/ ctx[56], /*i*/ ctx[58]);
	}

	listboxmenuitem = new ListBoxMenuItem$1({
			props: {
				id: /*item*/ ctx[56].id,
				active: /*selectedId*/ ctx[0] === /*item*/ ctx[56].id,
				highlighted: /*highlightedIndex*/ ctx[23] === /*i*/ ctx[58],
				disabled: /*item*/ ctx[56].disabled,
				$$slots: { default: [create_default_slot_2$6] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filteredItems*/ 16777216) listboxmenuitem_changes.id = /*item*/ ctx[56].id;
			if (dirty[0] & /*selectedId, filteredItems*/ 16777217) listboxmenuitem_changes.active = /*selectedId*/ ctx[0] === /*item*/ ctx[56].id;
			if (dirty[0] & /*highlightedIndex, filteredItems*/ 25165824) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[23] === /*i*/ ctx[58];
			if (dirty[0] & /*filteredItems*/ 16777216) listboxmenuitem_changes.disabled = /*item*/ ctx[56].disabled;

			if (dirty[0] & /*selectedItem, filteredItems, itemToString*/ 20971552 | dirty[1] & /*$$scope*/ 4194304) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (370:6) <ListBoxMenu         aria-label="{ariaLabel}"         id="{id}"         on:scroll         bind:ref="{listRef}"       >
function create_default_slot_1$8(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*filteredItems*/ ctx[24];
	const get_key = ctx => /*item*/ ctx[56].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$i(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$i(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filteredItems, selectedId, highlightedIndex, open, value, itemToString, selectedItem*/ 29360167 | dirty[1] & /*$$scope*/ 4194304) {
				each_value = /*filteredItems*/ ctx[24];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$i, each_1_anchor, get_each_context$i);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (229:2) <ListBox     class="bx--combo-box {direction === 'top' &&       'bx--list-box--up'} {!invalid && warn && 'bx--combo-box--warning'}"     id="{comboId}"     aria-label="{ariaLabel}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"   >
function create_default_slot$k(ctx) {
	let listboxfield;
	let t;
	let if_block_anchor;
	let current;

	listboxfield = new ListBoxField$1({
			props: {
				role: "button",
				"aria-expanded": /*open*/ ctx[2],
				id: /*id*/ ctx[19],
				disabled: /*disabled*/ ctx[8],
				translateWithId: /*translateWithId*/ ctx[17],
				$$slots: { default: [create_default_slot_3$2] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[48]);
	let if_block = /*open*/ ctx[2] && create_if_block_1$A(ctx);

	return {
		c() {
			create_component(listboxfield.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(listboxfield, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 4) listboxfield_changes["aria-expanded"] = /*open*/ ctx[2];
			if (dirty[0] & /*id*/ 524288) listboxfield_changes.id = /*id*/ ctx[19];
			if (dirty[0] & /*disabled*/ 256) listboxfield_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*translateWithId*/ 131072) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[17];

			if (dirty[0] & /*translateWithId, open, disabled, translateWithIdSelection, value, invalid, warn, highlightedId, comboId, menuId, placeholder, id, name, $$restProps, ref, light, highlightedIndex, filteredItems, selectedId, itemToString, selectedItem*/ 1340040495 | dirty[1] & /*$$scope*/ 4194304) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$A(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (410:2) {#if !invalid && helperText && !warn}
function create_if_block$1s(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2C(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[9] && create_if_block_6$9(ctx);

	listbox = new ListBox$1({
			props: {
				class: "bx--combo-box " + (/*direction*/ ctx[6] === 'top' && 'bx--list-box--up') + " " + (!/*invalid*/ ctx[13] && /*warn*/ ctx[14] && 'bx--combo-box--warning'),
				id: /*comboId*/ ctx[26],
				"aria-label": /*ariaLabel*/ ctx[28],
				disabled: /*disabled*/ ctx[8],
				invalid: /*invalid*/ ctx[13],
				invalidText: /*invalidText*/ ctx[12],
				open: /*open*/ ctx[2],
				light: /*light*/ ctx[16],
				size: /*size*/ ctx[7],
				warn: /*warn*/ ctx[14],
				warnText: /*warnText*/ ctx[15],
				$$slots: { default: [create_default_slot$k] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*invalid*/ ctx[13] && /*helperText*/ ctx[11] && !/*warn*/ ctx[14] && create_if_block$1s(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--list-box__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[40]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6$9(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*direction, invalid, warn*/ 24640) listbox_changes.class = "bx--combo-box " + (/*direction*/ ctx[6] === 'top' && 'bx--list-box--up') + " " + (!/*invalid*/ ctx[13] && /*warn*/ ctx[14] && 'bx--combo-box--warning');
			if (dirty[0] & /*comboId*/ 67108864) listbox_changes.id = /*comboId*/ ctx[26];
			if (dirty[0] & /*ariaLabel*/ 268435456) listbox_changes["aria-label"] = /*ariaLabel*/ ctx[28];
			if (dirty[0] & /*disabled*/ 256) listbox_changes.disabled = /*disabled*/ ctx[8];
			if (dirty[0] & /*invalid*/ 8192) listbox_changes.invalid = /*invalid*/ ctx[13];
			if (dirty[0] & /*invalidText*/ 4096) listbox_changes.invalidText = /*invalidText*/ ctx[12];
			if (dirty[0] & /*open*/ 4) listbox_changes.open = /*open*/ ctx[2];
			if (dirty[0] & /*light*/ 65536) listbox_changes.light = /*light*/ ctx[16];
			if (dirty[0] & /*size*/ 128) listbox_changes.size = /*size*/ ctx[7];
			if (dirty[0] & /*warn*/ 16384) listbox_changes.warn = /*warn*/ ctx[14];
			if (dirty[0] & /*warnText*/ 32768) listbox_changes.warnText = /*warnText*/ ctx[15];

			if (dirty[0] & /*ariaLabel, id, listRef, filteredItems, selectedId, highlightedIndex, open, value, itemToString, selectedItem, disabled, translateWithId, ref, translateWithIdSelection, invalid, warn, highlightedId, comboId, menuId, placeholder, name, $$restProps, light*/ 1608475967 | dirty[1] & /*$$scope*/ 4194304) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*invalid*/ ctx[13] && /*helperText*/ ctx[11] && !/*warn*/ ctx[14]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1s(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$2D($$self, $$props, $$invalidate) {
	let ariaLabel;
	let menuId;
	let comboId;
	let highlightedId;
	let filteredItems;

	const omit_props_names = [
		"items","itemToString","selectedId","value","direction","size","disabled","titleText","placeholder","helperText","invalidText","invalid","warn","warnText","light","open","shouldFilterItem","translateWithId","translateWithIdSelection","id","name","ref","listRef","clear"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedId = undefined } = $$props;
	let { value = "" } = $$props;
	let { direction = "bottom" } = $$props;
	let { size = undefined } = $$props;
	let { disabled = false } = $$props;
	let { titleText = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { helperText = "" } = $$props;
	let { invalidText = "" } = $$props;
	let { invalid = false } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { light = false } = $$props;
	let { open = false } = $$props;
	let { shouldFilterItem = () => true } = $$props;
	let { translateWithId = undefined } = $$props;
	let { translateWithIdSelection = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	let { listRef = null } = $$props;
	const dispatch = createEventDispatcher();
	let selectedItem = undefined;
	let prevSelectedId = null;
	let highlightedIndex = -1;

	function change(dir) {
		let index = highlightedIndex + dir;
		let _items = !filteredItems?.length ? items : filteredItems;

		if (index < 0) {
			index = _items.length - 1;
		} else if (index >= _items.length) {
			index = 0;
		}

		let disabled = items[index].disabled;

		while (disabled) {
			index = index + dir;

			if (index < 0) {
				index = items.length - 1;
			} else if (index >= items.length) {
				index = 0;
			}

			disabled = items[index].disabled;
		}

		$$invalidate(23, highlightedIndex = index);
	}

	function clear(options = {}) {
		$$invalidate(33, prevSelectedId = null);
		$$invalidate(23, highlightedIndex = -1);
		$$invalidate(25, highlightedId = undefined);
		$$invalidate(0, selectedId = undefined);
		$$invalidate(22, selectedItem = undefined);
		$$invalidate(2, open = false);
		$$invalidate(1, value = "");
		if (options?.focus !== false) ref?.focus();
	}

	afterUpdate(() => {
		if (open) {
			ref.focus();
			$$invalidate(24, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		} else {
			$$invalidate(23, highlightedIndex = -1);
			$$invalidate(24, filteredItems = []);

			if (!selectedItem) {
				$$invalidate(0, selectedId = undefined);
				$$invalidate(1, value = "");
				$$invalidate(23, highlightedIndex = -1);
				$$invalidate(25, highlightedId = undefined);
			} else {
				// programmatically set value
				$$invalidate(1, value = itemToString(selectedItem));
			}
		}
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && ref && !ref.contains(target)) {
			$$invalidate(2, open = false);
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(1, value);
	}

	const input_handler = ({ target }) => {
		if (!open && target.value.length > 0) {
			$$invalidate(2, open = true);
		}

		if (!value.length) {
			clear();
			$$invalidate(2, open = true);
		}
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Enter') {
			$$invalidate(2, open = !open);

			if (highlightedIndex > -1 && filteredItems[highlightedIndex]?.id !== selectedId) {
				$$invalidate(2, open = false);

				if (filteredItems[highlightedIndex]) {
					$$invalidate(1, value = itemToString(filteredItems[highlightedIndex]));
					$$invalidate(22, selectedItem = filteredItems[highlightedIndex]);
					$$invalidate(0, selectedId = filteredItems[highlightedIndex].id);
				}
			} else {
				// searching typed value in text list with lowercase
				const matchedItem = filteredItems.find(e => e.text.toLowerCase() === value?.toLowerCase() && !e.disabled) ?? filteredItems.find(e => !e.disabled);

				if (matchedItem) {
					// typed value has matched or fallback to first enabled item
					$$invalidate(2, open = false);

					$$invalidate(22, selectedItem = matchedItem);
					$$invalidate(1, value = itemToString(selectedItem));
					$$invalidate(0, selectedId = selectedItem.id);
				}
			}

			$$invalidate(23, highlightedIndex = -1);
		} else if (key === 'Tab') {
			$$invalidate(2, open = false);
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Escape') {
			$$invalidate(2, open = false);
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		if (!open || !relatedTarget) return;

		if (relatedTarget && !['INPUT', 'SELECT', 'TEXTAREA'].includes(relatedTarget.tagName) && relatedTarget.getAttribute('role') !== 'button' && relatedTarget.getAttribute('role') !== 'searchbox') {
			ref.focus();
		}
	};

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = e => {
		if (disabled) return;
		e.stopPropagation();
		$$invalidate(2, open = !open);
	};

	const click_handler_2 = async () => {
		if (disabled) return;
		$$invalidate(2, open = true);
		await tick();
		ref.focus();
	};

	const click_handler_3 = (item, i, e) => {
		if (item.disabled) {
			e.stopPropagation();
			return;
		}

		$$invalidate(0, selectedId = item.id);
		$$invalidate(2, open = false);

		if (filteredItems[i]) {
			$$invalidate(1, value = itemToString(filteredItems[i]));
		}
	};

	const mouseenter_handler = (item, i) => {
		if (item.disabled) return;
		$$invalidate(23, highlightedIndex = i);
	};

	function listboxmenu_ref_binding(value) {
		listRef = value;
		$$invalidate(4, listRef);
	}

	function scroll_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(55, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(30, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('items' in $$new_props) $$invalidate(31, items = $$new_props.items);
		if ('itemToString' in $$new_props) $$invalidate(5, itemToString = $$new_props.itemToString);
		if ('selectedId' in $$new_props) $$invalidate(0, selectedId = $$new_props.selectedId);
		if ('value' in $$new_props) $$invalidate(1, value = $$new_props.value);
		if ('direction' in $$new_props) $$invalidate(6, direction = $$new_props.direction);
		if ('size' in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('titleText' in $$new_props) $$invalidate(9, titleText = $$new_props.titleText);
		if ('placeholder' in $$new_props) $$invalidate(10, placeholder = $$new_props.placeholder);
		if ('helperText' in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('invalid' in $$new_props) $$invalidate(13, invalid = $$new_props.invalid);
		if ('warn' in $$new_props) $$invalidate(14, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(15, warnText = $$new_props.warnText);
		if ('light' in $$new_props) $$invalidate(16, light = $$new_props.light);
		if ('open' in $$new_props) $$invalidate(2, open = $$new_props.open);
		if ('shouldFilterItem' in $$new_props) $$invalidate(32, shouldFilterItem = $$new_props.shouldFilterItem);
		if ('translateWithId' in $$new_props) $$invalidate(17, translateWithId = $$new_props.translateWithId);
		if ('translateWithIdSelection' in $$new_props) $$invalidate(18, translateWithIdSelection = $$new_props.translateWithIdSelection);
		if ('id' in $$new_props) $$invalidate(19, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(20, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ('listRef' in $$new_props) $$invalidate(4, listRef = $$new_props.listRef);
		if ('$$scope' in $$new_props) $$invalidate(53, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value*/ 2 | $$self.$$.dirty[1] & /*items, shouldFilterItem*/ 3) {
			$$invalidate(24, filteredItems = items.filter(item => shouldFilterItem(item, value)));
		}

		if ($$self.$$.dirty[0] & /*selectedId, filteredItems, open, selectedItem*/ 20971525 | $$self.$$.dirty[1] & /*prevSelectedId, items*/ 5) {
			if (selectedId !== undefined) {
				if (prevSelectedId !== selectedId) {
					$$invalidate(33, prevSelectedId = selectedId);

					if (filteredItems?.length === 1 && open) {
						$$invalidate(0, selectedId = filteredItems[0].id);
						$$invalidate(22, selectedItem = filteredItems[0]);
						$$invalidate(23, highlightedIndex = -1);
						$$invalidate(25, highlightedId = undefined);
					} else {
						$$invalidate(22, selectedItem = items.find(item => item.id === selectedId));
					}

					dispatch("select", { selectedId, selectedItem });
				}
			} else {
				$$invalidate(33, prevSelectedId = selectedId);
				$$invalidate(22, selectedItem = undefined);
			}
		}

		$$invalidate(28, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[0] & /*id*/ 524288) {
			$$invalidate(27, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 524288) {
			$$invalidate(26, comboId = `combo-${id}`);
		}

		if ($$self.$$.dirty[0] & /*highlightedIndex*/ 8388608 | $$self.$$.dirty[1] & /*items*/ 1) {
			$$invalidate(25, highlightedId = items[highlightedIndex] ? items[highlightedIndex].id : 0);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		selectedId,
		value,
		open,
		ref,
		listRef,
		itemToString,
		direction,
		size,
		disabled,
		titleText,
		placeholder,
		helperText,
		invalidText,
		invalid,
		warn,
		warnText,
		light,
		translateWithId,
		translateWithIdSelection,
		id,
		name,
		clear,
		selectedItem,
		highlightedIndex,
		filteredItems,
		highlightedId,
		comboId,
		menuId,
		ariaLabel,
		change,
		$$restProps,
		items,
		shouldFilterItem,
		prevSelectedId,
		slots,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		click_handler,
		input_binding,
		input_input_handler,
		input_handler,
		keydown_handler_1,
		blur_handler_1,
		clear_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		mouseenter_handler,
		listboxmenu_ref_binding,
		scroll_handler,
		$$scope
	];
}

class ComboBox extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2D,
			create_fragment$2C,
			safe_not_equal,
			{
				items: 31,
				itemToString: 5,
				selectedId: 0,
				value: 1,
				direction: 6,
				size: 7,
				disabled: 8,
				titleText: 9,
				placeholder: 10,
				helperText: 11,
				invalidText: 12,
				invalid: 13,
				warn: 14,
				warnText: 15,
				light: 16,
				open: 2,
				shouldFilterItem: 32,
				translateWithId: 17,
				translateWithIdSelection: 18,
				id: 19,
				name: 20,
				ref: 3,
				listRef: 4,
				clear: 21
			},
			null,
			[-1, -1]
		);
	}

	get clear() {
		return this.$$.ctx[21];
	}
}

var ComboBox$1 = ComboBox;

/** A set of stores indicating whether a modal is open. */
const stores = new Set();

/** Store for the number of open modals. */
const modalsOpen = writable(0);

const updateModalsOpen = () =>
  modalsOpen.set([...stores].filter((open) => get_store_value(open)).length);

/**
 * Adds a modal's store to the open modal tracking.
 * Has to be called during component initialization.
 * Modal is automatically removed on destroy.
 * @param {import('svelte/store').Readable<boolean>} openStore
 *   Store that indicates whether the modal is opened.
 */
const trackModal = (openStore) =>
  onMount(() => {
    stores.add(openStore);
    const unsubscribe = openStore.subscribe(updateModalsOpen);

    return () => {
      unsubscribe();
      stores.delete(openStore);

      updateModalsOpen();
    };
  });

modalsOpen.subscribe((openCount) => {
  if (typeof document !== "undefined")
    document.body.classList.toggle("bx--body--with-modal-open", openCount > 0);
});

/* src/ComposedModal/ComposedModal.svelte generated by Svelte v3.49.0 */

function create_fragment$2B(ctx) {
	let div1;
	let div0;
	let div0_aria_label_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);
	let div1_levels = [{ role: "presentation" }, /*$$restProps*/ ctx[14]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "role", "dialog");
			attr(div0, "aria-modal", "true");
			attr(div0, "aria-label", div0_aria_label_value = /*$$props*/ ctx[15]['aria-label'] || /*$label*/ ctx[9] || undefined);
			attr(div0, "class", /*containerClass*/ ctx[5]);
			toggle_class(div0, "bx--modal-container", true);
			toggle_class(div0, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			toggle_class(div0, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div0, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--modal", true);
			toggle_class(div1, "is-visible", /*open*/ ctx[0]);
			toggle_class(div1, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[24](div0);
			/*div1_binding*/ ctx[26](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler_1*/ ctx[25]),
					listen(div1, "keydown", /*keydown_handler*/ ctx[19]),
					listen(div1, "keydown", /*keydown_handler_1*/ ctx[27]),
					listen(div1, "click", /*click_handler*/ ctx[20]),
					listen(div1, "click", /*click_handler_2*/ ctx[28]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[21]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[22]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[23]),
					listen(div1, "transitionend", /*transitionend_handler*/ ctx[29])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[17],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*$$props, $label*/ 33280 && div0_aria_label_value !== (div0_aria_label_value = /*$$props*/ ctx[15]['aria-label'] || /*$label*/ ctx[9] || undefined)) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (!current || dirty[0] & /*containerClass*/ 32) {
				attr(div0, "class", /*containerClass*/ ctx[5]);
			}

			if (dirty[0] & /*containerClass*/ 32) {
				toggle_class(div0, "bx--modal-container", true);
			}

			if (dirty[0] & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			}

			if (dirty[0] & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			}

			if (dirty[0] & /*containerClass, size*/ 36) {
				toggle_class(div0, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ role: "presentation" },
				dirty[0] & /*$$restProps*/ 16384 && /*$$restProps*/ ctx[14]
			]));

			toggle_class(div1, "bx--modal", true);
			toggle_class(div1, "is-visible", /*open*/ ctx[0]);
			toggle_class(div1, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[24](null);
			/*div1_binding*/ ctx[26](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2C($$self, $$props, $$invalidate) {
	let didOpen;

	const omit_props_names = [
		"size","open","danger","preventCloseOnClickOutside","containerClass","selectorPrimaryFocus","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $openStore;
	let $label;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { containerClass = "" } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const label = writable(undefined);
	component_subscribe($$self, label, value => $$invalidate(9, $label = value));
	let buttonRef = null;
	let innerModal = null;
	let didClickInnerModal = false;

	setContext("ComposedModal", {
		closeModal: () => {
			$$invalidate(0, open = false);
		},
		submit: () => {
			dispatch("submit");
			dispatch("click:button--primary");
		},
		declareRef: ref => {
			buttonRef = ref;
		},
		updateLabel: value => {
			label.set(value);
		}
	});

	function focus(element) {
		if (selectorPrimaryFocus == null) return;
		const node = (element || innerModal)?.querySelector(selectorPrimaryFocus) || buttonRef;
		if (node != null) node.focus();
	}

	let opened = false;
	const openStore = writable(open);
	component_subscribe($$self, openStore, value => $$invalidate(32, $openStore = value));
	trackModal(openStore);

	onMount(() => {
		tick().then(() => {
			focus();
		});
	});

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
			}
		} else if (open) {
			opened = true;
			dispatch("open");
		}
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerModal = $$value;
			$$invalidate(6, innerModal);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(7, didClickInnerModal = true);
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = e => {
		if (open) {
			if (e.key === 'Escape') {
				$$invalidate(0, open = false);
			} else if (e.key === 'Tab') {
				// taken from github.com/carbon-design-system/carbon/packages/react/src/internal/keyboard/navigation.js
				const selectorTabbable = `
  a[href], area[href], input:not([disabled]):not([tabindex='-1']),
  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),
  textarea:not([disabled]):not([tabindex='-1']),
  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]
`;

				const tabbable = Array.from(ref.querySelectorAll(selectorTabbable));
				let index = tabbable.indexOf(document.activeElement);
				if (index === -1 && e.shiftKey) index = 0;
				index += tabbable.length + (e.shiftKey ? -1 : 1);
				index %= tabbable.length;
				tabbable[index].focus();
				e.preventDefault();
			}
		}
	};

	const click_handler_2 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(7, didClickInnerModal = false);
	};

	const transitionend_handler = ({ propertyName, currentTarget }) => {
		if (propertyName === 'transform') {
			dispatch('transitionend', { open });
		}

		if (didOpen) {
			focus(currentTarget);
			$$invalidate(8, didOpen = false);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(14, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('danger' in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ('preventCloseOnClickOutside' in $$new_props) $$invalidate(4, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ('containerClass' in $$new_props) $$invalidate(5, containerClass = $$new_props.containerClass);
		if ('selectorPrimaryFocus' in $$new_props) $$invalidate(16, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(17, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*open*/ 1) {
			$$invalidate(8, didOpen = open);
		}

		if ($$self.$$.dirty[0] & /*open*/ 1) {
			set_store_value(openStore, $openStore = open, $openStore);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		preventCloseOnClickOutside,
		containerClass,
		innerModal,
		didClickInnerModal,
		didOpen,
		$label,
		dispatch,
		label,
		focus,
		openStore,
		$$restProps,
		$$props,
		selectorPrimaryFocus,
		$$scope,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		click_handler_1,
		div1_binding,
		keydown_handler_1,
		click_handler_2,
		transitionend_handler
	];
}

class ComposedModal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2C,
			create_fragment$2B,
			safe_not_equal,
			{
				size: 2,
				open: 0,
				danger: 3,
				preventCloseOnClickOutside: 4,
				containerClass: 5,
				selectorPrimaryFocus: 16,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var ComposedModal$1 = ComposedModal;

/* src/ComposedModal/ModalHeader.svelte generated by Svelte v3.49.0 */

function create_if_block_1$z(ctx) {
	let h2;
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(/*label*/ ctx[1]);
			attr(h2, "class", /*labelClass*/ ctx[2]);
			toggle_class(h2, "bx--modal-header__label", true);
			toggle_class(h2, "bx--type-delta", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);

			if (dirty & /*labelClass*/ 4) {
				attr(h2, "class", /*labelClass*/ ctx[2]);
			}

			if (dirty & /*labelClass*/ 4) {
				toggle_class(h2, "bx--modal-header__label", true);
			}

			if (dirty & /*labelClass*/ 4) {
				toggle_class(h2, "bx--type-delta", true);
			}
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (41:2) {#if title}
function create_if_block$1r(ctx) {
	let h3;
	let t;

	return {
		c() {
			h3 = element("h3");
			t = text(/*title*/ ctx[0]);
			attr(h3, "class", /*titleClass*/ ctx[3]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(h3, "bx--type-beta", true);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t, /*title*/ ctx[0]);

			if (dirty & /*titleClass*/ 8) {
				attr(h3, "class", /*titleClass*/ ctx[3]);
			}

			if (dirty & /*titleClass*/ 8) {
				toggle_class(h3, "bx--modal-header__heading", true);
			}

			if (dirty & /*titleClass*/ 8) {
				toggle_class(h3, "bx--type-beta", true);
			}
		},
		d(detaching) {
			if (detaching) detach(h3);
		}
	};
}

function create_fragment$2A(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let button;
	let close;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[1] && create_if_block_1$z(ctx);
	let if_block1 = /*title*/ ctx[0] && create_if_block$1r(ctx);
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	close = new Close$1({
			props: {
				size: 20,
				class: "bx--modal-close__icon " + /*closeIconClass*/ ctx[5],
				"aria-hidden": "true"
			}
		});

	let div_levels = [/*$$restProps*/ ctx[8]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			button = element("button");
			create_component(close.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[6]);
			attr(button, "class", /*closeClass*/ ctx[4]);
			toggle_class(button, "bx--modal-close", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t2);
			append(div, button);
			mount_component(close, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "click", /*closeModal*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*label*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$z(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*title*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$1r(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			const close_changes = {};
			if (dirty & /*closeIconClass*/ 32) close_changes.class = "bx--modal-close__icon " + /*closeIconClass*/ ctx[5];
			close.$set(close_changes);

			if (!current || dirty & /*iconDescription*/ 64) {
				attr(button, "aria-label", /*iconDescription*/ ctx[6]);
			}

			if (!current || dirty & /*closeClass*/ 16) {
				attr(button, "class", /*closeClass*/ ctx[4]);
			}

			if (dirty & /*closeClass*/ 16) {
				toggle_class(button, "bx--modal-close", true);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div, "bx--modal-header", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
			destroy_component(close);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2B($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"title","label","labelClass","titleClass","closeClass","closeIconClass","iconDescription"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { label = "" } = $$props;
	let { labelClass = "" } = $$props;
	let { titleClass = "" } = $$props;
	let { closeClass = "" } = $$props;
	let { closeIconClass = "" } = $$props;
	let { iconDescription = "Close" } = $$props;
	const { closeModal, updateLabel } = getContext("ComposedModal");

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('title' in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ('label' in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ('labelClass' in $$new_props) $$invalidate(2, labelClass = $$new_props.labelClass);
		if ('titleClass' in $$new_props) $$invalidate(3, titleClass = $$new_props.titleClass);
		if ('closeClass' in $$new_props) $$invalidate(4, closeClass = $$new_props.closeClass);
		if ('closeIconClass' in $$new_props) $$invalidate(5, closeIconClass = $$new_props.closeIconClass);
		if ('iconDescription' in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*label*/ 2) {
			updateLabel(label);
		}
	};

	return [
		title,
		label,
		labelClass,
		titleClass,
		closeClass,
		closeIconClass,
		iconDescription,
		closeModal,
		$$restProps,
		$$scope,
		slots,
		click_handler
	];
}

class ModalHeader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2B, create_fragment$2A, safe_not_equal, {
			title: 0,
			label: 1,
			labelClass: 2,
			titleClass: 3,
			closeClass: 4,
			closeIconClass: 5,
			iconDescription: 6
		});
	}
}

var ModalHeader$1 = ModalHeader;

/* src/ComposedModal/ModalBody.svelte generated by Svelte v3.49.0 */

function create_if_block$1q(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2z(ctx) {
	let div;
	let div_tabindex_value;
	let div_role_value;
	let t;
	let if_block_anchor;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{
			tabindex: div_tabindex_value = /*hasScrollingContent*/ ctx[1] ? '0' : undefined
		},
		{
			role: div_role_value = /*hasScrollingContent*/ ctx[1] ? 'region' : undefined
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	let if_block = /*hasScrollingContent*/ ctx[1] && create_if_block$1q();

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-content", true);
			toggle_class(div, "bx--modal-content--with-form", /*hasForm*/ ctx[0]);
			toggle_class(div, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*hasScrollingContent*/ 2 && div_tabindex_value !== (div_tabindex_value = /*hasScrollingContent*/ ctx[1] ? '0' : undefined)) && { tabindex: div_tabindex_value },
				(!current || dirty & /*hasScrollingContent*/ 2 && div_role_value !== (div_role_value = /*hasScrollingContent*/ ctx[1] ? 'region' : undefined)) && { role: div_role_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--modal-content", true);
			toggle_class(div, "bx--modal-content--with-form", /*hasForm*/ ctx[0]);
			toggle_class(div, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[1]);

			if (/*hasScrollingContent*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block$1q();
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2A($$self, $$props, $$invalidate) {
	const omit_props_names = ["hasForm","hasScrollingContent"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hasForm' in $$new_props) $$invalidate(0, hasForm = $$new_props.hasForm);
		if ('hasScrollingContent' in $$new_props) $$invalidate(1, hasScrollingContent = $$new_props.hasScrollingContent);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [hasForm, hasScrollingContent, $$restProps, $$scope, slots];
}

class ModalBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2A, create_fragment$2z, safe_not_equal, { hasForm: 0, hasScrollingContent: 1 });
	}
}

var ModalBody$1 = ModalBody;

/* src/ComposedModal/ModalFooter.svelte generated by Svelte v3.49.0 */

function get_each_context$h(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

// (66:32) 
function create_if_block_2$n(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				kind: "secondary",
				class: /*secondaryClass*/ ctx[6],
				$$slots: { default: [create_default_slot_2$5] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_1*/ ctx[14]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*secondaryClass*/ 64) button_changes.class = /*secondaryClass*/ ctx[6];

			if (dirty & /*$$scope, secondaryButtonText*/ 32784) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (55:2) {#if secondaryButtons.length > 0}
function create_if_block_1$y(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*secondaryButtons*/ ctx[5];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*dispatch, secondaryButtons*/ 288) {
				each_value = /*secondaryButtons*/ ctx[5];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$h(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$h(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (67:4) <Button       kind="secondary"       class="{secondaryClass}"       on:click="{() => {         closeModal();         dispatch('click:button--secondary', { text: secondaryButtonText });       }}"     >
function create_default_slot_2$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*secondaryButtonText*/ 16) set_data(t, /*secondaryButtonText*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (57:6) <Button         kind="secondary"         on:click="{() => {           dispatch('click:button--secondary', { text: button.text });         }}"       >
function create_default_slot_1$7(ctx) {
	let t0_value = /*button*/ ctx[16].text + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*secondaryButtons*/ 32 && t0_value !== (t0_value = /*button*/ ctx[16].text + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (56:4) {#each secondaryButtons as button}
function create_each_block$h(ctx) {
	let button;
	let current;

	function click_handler() {
		return /*click_handler*/ ctx[13](/*button*/ ctx[16]);
	}

	button = new Button$1({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_1$7] },
				$$scope: { ctx }
			}
		});

	button.$on("click", click_handler);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty & /*$$scope, secondaryButtons*/ 32800) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (78:2) {#if primaryButtonText}
function create_if_block$1p(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				kind: /*danger*/ ctx[7] ? 'danger' : 'primary',
				disabled: /*primaryButtonDisabled*/ ctx[2],
				class: /*primaryClass*/ ctx[3],
				icon: /*primaryButtonIcon*/ ctx[1],
				$$slots: { default: [create_default_slot$j] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*submit*/ ctx[10]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*danger*/ 128) button_changes.kind = /*danger*/ ctx[7] ? 'danger' : 'primary';
			if (dirty & /*primaryButtonDisabled*/ 4) button_changes.disabled = /*primaryButtonDisabled*/ ctx[2];
			if (dirty & /*primaryClass*/ 8) button_changes.class = /*primaryClass*/ ctx[3];
			if (dirty & /*primaryButtonIcon*/ 2) button_changes.icon = /*primaryButtonIcon*/ ctx[1];

			if (dirty & /*$$scope, primaryButtonText*/ 32769) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (79:4) <Button       kind="{danger ? 'danger' : 'primary'}"       disabled="{primaryButtonDisabled}"       class="{primaryClass}"       icon="{primaryButtonIcon}"       on:click="{submit}"     >
function create_default_slot$j(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*primaryButtonText*/ 1) set_data(t, /*primaryButtonText*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2y(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let current;
	const if_block_creators = [create_if_block_1$y, create_if_block_2$n];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*secondaryButtons*/ ctx[5].length > 0) return 0;
		if (/*secondaryButtonText*/ ctx[4]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*primaryButtonText*/ ctx[0] && create_if_block$1p(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	let div_levels = [/*$$restProps*/ ctx[11]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--modal-footer", true);
			toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[5].length === 2);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				} else {
					if_block0 = null;
				}
			}

			if (/*primaryButtonText*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*primaryButtonText*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$1p(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]]));
			toggle_class(div, "bx--modal-footer", true);
			toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[5].length === 2);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2z($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"primaryButtonText","primaryButtonIcon","primaryButtonDisabled","primaryClass","secondaryButtonText","secondaryButtons","secondaryClass","danger"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonIcon = undefined } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { primaryClass = undefined } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { secondaryButtons = [] } = $$props;
	let { secondaryClass = undefined } = $$props;
	let { danger = false } = $$props;
	const dispatch = createEventDispatcher();
	const { closeModal, submit } = getContext("ComposedModal");

	const click_handler = button => {
		dispatch('click:button--secondary', { text: button.text });
	};

	const click_handler_1 = () => {
		closeModal();
		dispatch('click:button--secondary', { text: secondaryButtonText });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('primaryButtonText' in $$new_props) $$invalidate(0, primaryButtonText = $$new_props.primaryButtonText);
		if ('primaryButtonIcon' in $$new_props) $$invalidate(1, primaryButtonIcon = $$new_props.primaryButtonIcon);
		if ('primaryButtonDisabled' in $$new_props) $$invalidate(2, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ('primaryClass' in $$new_props) $$invalidate(3, primaryClass = $$new_props.primaryClass);
		if ('secondaryButtonText' in $$new_props) $$invalidate(4, secondaryButtonText = $$new_props.secondaryButtonText);
		if ('secondaryButtons' in $$new_props) $$invalidate(5, secondaryButtons = $$new_props.secondaryButtons);
		if ('secondaryClass' in $$new_props) $$invalidate(6, secondaryClass = $$new_props.secondaryClass);
		if ('danger' in $$new_props) $$invalidate(7, danger = $$new_props.danger);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	return [
		primaryButtonText,
		primaryButtonIcon,
		primaryButtonDisabled,
		primaryClass,
		secondaryButtonText,
		secondaryButtons,
		secondaryClass,
		danger,
		dispatch,
		closeModal,
		submit,
		$$restProps,
		slots,
		click_handler,
		click_handler_1,
		$$scope
	];
}

class ModalFooter extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2z, create_fragment$2y, safe_not_equal, {
			primaryButtonText: 0,
			primaryButtonIcon: 1,
			primaryButtonDisabled: 2,
			primaryClass: 3,
			secondaryButtonText: 4,
			secondaryButtons: 5,
			secondaryClass: 6,
			danger: 7
		});
	}
}

var ModalFooter$1 = ModalFooter;

/* src/CodeSnippet/CodeSnippetSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block_1$x(ctx) {
	let span0;
	let t0;
	let span1;
	let t1;
	let span2;

	return {
		c() {
			span0 = element("span");
			t0 = space();
			span1 = element("span");
			t1 = space();
			span2 = element("span");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			insert(target, t0, anchor);
			insert(target, span1, anchor);
			insert(target, t1, anchor);
			insert(target, span2, anchor);
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t0);
			if (detaching) detach(span1);
			if (detaching) detach(t1);
			if (detaching) detach(span2);
		}
	};
}

// (22:4) {#if type === "single"}
function create_if_block$1o(ctx) {
	let span;

	return {
		c() {
			span = element("span");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$2x(ctx) {
	let div1;
	let div0;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[0] === "single") return create_if_block$1o;
		if (/*type*/ ctx[0] === "multi") return create_if_block_1$x;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			toggle_class(div0, "bx--snippet-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[0] === 'single');
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[0] === 'multi');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[0] === 'single');
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[0] === 'multi');
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2y($$self, $$props, $$invalidate) {
	const omit_props_names = ["type"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { type = "single" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('type' in $$new_props) $$invalidate(0, type = $$new_props.type);
	};

	return [
		type,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class CodeSnippetSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2y, create_fragment$2x, safe_not_equal, { type: 0 });
	}
}

var CodeSnippetSkeleton$1 = CodeSnippetSkeleton;

/* src/CodeSnippet/CodeSnippet.svelte generated by Svelte v3.49.0 */

function create_else_block_1$4(ctx) {
	let div1;
	let div0;
	let pre;
	let code_1;
	let div0_role_value;
	let div0_tabindex_value;
	let div0_aria_label_value;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);
	const default_slot_or_fallback = default_slot || fallback_block_2$6(ctx);
	let if_block0 = !/*hideCopyButton*/ ctx[6] && create_if_block_4$c(ctx);
	let if_block1 = /*showMoreLess*/ ctx[2] && create_if_block_3$h(ctx);
	let div1_levels = [/*$$restProps*/ ctx[22]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			pre = element("pre");
			code_1 = element("code");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr(div0, "role", div0_role_value = /*type*/ ctx[3] === 'single' ? 'textbox' : undefined);

			attr(div0, "tabindex", div0_tabindex_value = /*type*/ ctx[3] === 'single' && !/*disabled*/ ctx[7]
			? '0'
			: undefined);

			attr(div0, "aria-label", div0_aria_label_value = /*$$restProps*/ ctx[22]['aria-label'] || /*copyLabel*/ ctx[12] || 'code-snippet');
			set_style(div0, "width", "100%");
			set_style(div0, "min-height", /*minHeight*/ ctx[19] + "px");
			set_style(div0, "max-height", /*maxHeight*/ ctx[18]);
			toggle_class(div0, "bx--snippet-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(div1, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(div1, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[6]);
			toggle_class(div1, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[3] === 'single');
			toggle_class(div1, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[3] === 'multi');
			toggle_class(div1, "bx--snippet--disabled", /*type*/ ctx[3] !== 'inline' && /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, pre);
			append(pre, code_1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(code_1, null);
			}

			/*pre_binding*/ ctx[39](pre);
			append(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "mouseover", /*mouseover_handler_2*/ ctx[30]),
					listen(div1, "mouseenter", /*mouseenter_handler_2*/ ctx[31]),
					listen(div1, "mouseleave", /*mouseleave_handler_2*/ ctx[32])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[44],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*code*/ 16)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*type*/ 8 && div0_role_value !== (div0_role_value = /*type*/ ctx[3] === 'single' ? 'textbox' : undefined)) {
				attr(div0, "role", div0_role_value);
			}

			if (!current || dirty[0] & /*type, disabled*/ 136 && div0_tabindex_value !== (div0_tabindex_value = /*type*/ ctx[3] === 'single' && !/*disabled*/ ctx[7]
			? '0'
			: undefined)) {
				attr(div0, "tabindex", div0_tabindex_value);
			}

			if (!current || dirty[0] & /*$$restProps, copyLabel*/ 4198400 && div0_aria_label_value !== (div0_aria_label_value = /*$$restProps*/ ctx[22]['aria-label'] || /*copyLabel*/ ctx[12] || 'code-snippet')) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (!current || dirty[0] & /*minHeight*/ 524288) {
				set_style(div0, "min-height", /*minHeight*/ ctx[19] + "px");
			}

			if (!current || dirty[0] & /*maxHeight*/ 262144) {
				set_style(div0, "max-height", /*maxHeight*/ ctx[18]);
			}

			if (!/*hideCopyButton*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*hideCopyButton*/ 64) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$c(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*showMoreLess*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*showMoreLess*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$h(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22]]));
			toggle_class(div1, "bx--snippet", true);
			toggle_class(div1, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(div1, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(div1, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[6]);
			toggle_class(div1, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
			toggle_class(div1, "bx--snippet--single", /*type*/ ctx[3] === 'single');
			toggle_class(div1, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(div1, "bx--snippet--multi", /*type*/ ctx[3] === 'multi');
			toggle_class(div1, "bx--snippet--disabled", /*type*/ ctx[3] !== 'inline' && /*disabled*/ ctx[7]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*pre_binding*/ ctx[39](null);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (138:28) 
function create_if_block_1$w(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2$m, create_else_block$l];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*hideCopyButton*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (129:0) {#if skeleton}
function create_if_block$1n(ctx) {
	let codesnippetskeleton;
	let current;
	const codesnippetskeleton_spread_levels = [{ type: /*type*/ ctx[3] }, /*$$restProps*/ ctx[22]];
	let codesnippetskeleton_props = {};

	for (let i = 0; i < codesnippetskeleton_spread_levels.length; i += 1) {
		codesnippetskeleton_props = assign(codesnippetskeleton_props, codesnippetskeleton_spread_levels[i]);
	}

	codesnippetskeleton = new CodeSnippetSkeleton$1({ props: codesnippetskeleton_props });
	codesnippetskeleton.$on("click", /*click_handler*/ ctx[33]);
	codesnippetskeleton.$on("mouseover", /*mouseover_handler*/ ctx[34]);
	codesnippetskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[35]);
	codesnippetskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[36]);

	return {
		c() {
			create_component(codesnippetskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(codesnippetskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const codesnippetskeleton_changes = (dirty[0] & /*type, $$restProps*/ 4194312)
			? get_spread_update(codesnippetskeleton_spread_levels, [
					dirty[0] & /*type*/ 8 && { type: /*type*/ ctx[3] },
					dirty[0] & /*$$restProps*/ 4194304 && get_spread_object(/*$$restProps*/ ctx[22])
				])
			: {};

			codesnippetskeleton.$set(codesnippetskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(codesnippetskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(codesnippetskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(codesnippetskeleton, detaching);
		}
	};
}

// (225:41) {code}
function fallback_block_2$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (227:4) {#if !hideCopyButton}
function create_if_block_4$c(ctx) {
	let copybutton;
	let current;

	copybutton = new CopyButton$1({
			props: {
				text: /*code*/ ctx[4],
				copy: /*copy*/ ctx[5],
				disabled: /*disabled*/ ctx[7],
				feedback: /*feedback*/ ctx[13],
				feedbackTimeout: /*feedbackTimeout*/ ctx[14],
				iconDescription: /*copyButtonDescription*/ ctx[11]
			}
		});

	copybutton.$on("click", /*click_handler_2*/ ctx[40]);
	copybutton.$on("copy", /*copy_handler*/ ctx[41]);
	copybutton.$on("animationend", /*animationend_handler*/ ctx[42]);

	return {
		c() {
			create_component(copybutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(copybutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const copybutton_changes = {};
			if (dirty[0] & /*code*/ 16) copybutton_changes.text = /*code*/ ctx[4];
			if (dirty[0] & /*copy*/ 32) copybutton_changes.copy = /*copy*/ ctx[5];
			if (dirty[0] & /*disabled*/ 128) copybutton_changes.disabled = /*disabled*/ ctx[7];
			if (dirty[0] & /*feedback*/ 8192) copybutton_changes.feedback = /*feedback*/ ctx[13];
			if (dirty[0] & /*feedbackTimeout*/ 16384) copybutton_changes.feedbackTimeout = /*feedbackTimeout*/ ctx[14];
			if (dirty[0] & /*copyButtonDescription*/ 2048) copybutton_changes.iconDescription = /*copyButtonDescription*/ ctx[11];
			copybutton.$set(copybutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(copybutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(copybutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(copybutton, detaching);
		}
	};
}

// (240:4) {#if showMoreLess}
function create_if_block_3$h(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				kind: "ghost",
				size: "small",
				class: "bx--snippet-btn--expand",
				disabled: /*disabled*/ ctx[7],
				$$slots: { default: [create_default_slot$i] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_4*/ ctx[43]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty[0] & /*disabled*/ 128) button_changes.disabled = /*disabled*/ ctx[7];

			if (dirty[0] & /*expandText*/ 1048576 | dirty[1] & /*$$scope*/ 8192) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (241:6) <Button         kind="ghost"         size="small"         class="bx--snippet-btn--expand"         disabled="{disabled}"         on:click="{() => {           expanded = !expanded;         }}"       >
function create_default_slot$i(ctx) {
	let span;
	let t0;
	let t1;
	let chevrondown;
	let current;

	chevrondown = new ChevronDown$1({
			props: {
				class: "bx--icon-chevron--down bx--snippet__icon",
				"aria-label": /*expandText*/ ctx[20]
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text(/*expandText*/ ctx[20]);
			t1 = space();
			create_component(chevrondown.$$.fragment);
			toggle_class(span, "bx--snippet-btn--text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			insert(target, t1, anchor);
			mount_component(chevrondown, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*expandText*/ 1048576) set_data(t0, /*expandText*/ ctx[20]);
			const chevrondown_changes = {};
			if (dirty[0] & /*expandText*/ 1048576) chevrondown_changes["aria-label"] = /*expandText*/ ctx[20];
			chevrondown.$set(chevrondown_changes);
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			destroy_component(chevrondown, detaching);
		}
	};
}

// (155:2) {:else}
function create_else_block$l(ctx) {
	let button;
	let code_1;
	let t0;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);
	const default_slot_or_fallback = default_slot || fallback_block_1$d(ctx);

	let button_levels = [
		{ type: "button" },
		{ "aria-live": "polite" },
		{ "aria-label": /*copyLabel*/ ctx[12] },
		/*$$restProps*/ ctx[22]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			code_1 = element("code");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t0 = space();
			span = element("span");
			t1 = text(/*feedback*/ ctx[13]);
			attr(code_1, "id", /*id*/ ctx[15]);
			attr(span, "aria-hidden", "true");
			toggle_class(span, "bx--assistive-text", true);
			toggle_class(span, "bx--copy-btn__feedback", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--btn--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[16]);
			toggle_class(button, "bx--copy-btn--fade-in", /*animation*/ ctx[16] === 'fade-in');
			toggle_class(button, "bx--copy-btn--fade-out", /*animation*/ ctx[16] === 'fade-out');
			toggle_class(button, "bx--snippet", true);
			toggle_class(button, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(button, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(button, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, code_1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(code_1, null);
			}

			append(button, t0);
			append(button, span);
			append(span, t1);
			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_1*/ ctx[26]),
					listen(button, "click", /*click_handler_3*/ ctx[37]),
					listen(button, "animationend", /*animationend_handler_1*/ ctx[38]),
					listen(button, "mouseover", /*mouseover_handler_1*/ ctx[27]),
					listen(button, "mouseenter", /*mouseenter_handler_1*/ ctx[28]),
					listen(button, "mouseleave", /*mouseleave_handler_1*/ ctx[29])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[44],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*code*/ 16)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 32768) {
				attr(code_1, "id", /*id*/ ctx[15]);
			}

			if (!current || dirty[0] & /*feedback*/ 8192) set_data(t1, /*feedback*/ ctx[13]);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ "aria-live": "polite" },
				(!current || dirty[0] & /*copyLabel*/ 4096) && { "aria-label": /*copyLabel*/ ctx[12] },
				dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22]
			]));

			toggle_class(button, "bx--copy", true);
			toggle_class(button, "bx--btn--copy", true);
			toggle_class(button, "bx--copy-btn--animating", /*animation*/ ctx[16]);
			toggle_class(button, "bx--copy-btn--fade-in", /*animation*/ ctx[16] === 'fade-in');
			toggle_class(button, "bx--copy-btn--fade-out", /*animation*/ ctx[16] === 'fade-out');
			toggle_class(button, "bx--snippet", true);
			toggle_class(button, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(button, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(button, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (139:2) {#if hideCopyButton}
function create_if_block_2$m(ctx) {
	let span;
	let code_1;
	let current;
	const default_slot_template = /*#slots*/ ctx[25].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);
	const default_slot_or_fallback = default_slot || fallback_block$G(ctx);
	let span_levels = [/*$$restProps*/ ctx[22]];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			code_1 = element("code");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(code_1, "id", /*id*/ ctx[15]);
			set_attributes(span, span_data);
			toggle_class(span, "bx--snippet", true);
			toggle_class(span, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(span, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(span, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[6]);
			toggle_class(span, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
			toggle_class(span, "bx--snippet--single", /*type*/ ctx[3] === 'single');
			toggle_class(span, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(span, "bx--snippet--multi", /*type*/ ctx[3] === 'multi');
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, code_1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(code_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[44],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*code*/ 16)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 32768) {
				attr(code_1, "id", /*id*/ ctx[15]);
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22]]));
			toggle_class(span, "bx--snippet", true);
			toggle_class(span, "bx--snippet--expand", /*expanded*/ ctx[0]);
			toggle_class(span, "bx--snippet--light", /*light*/ ctx[9]);
			toggle_class(span, "bx--snippet--no-copy", /*hideCopyButton*/ ctx[6]);
			toggle_class(span, "bx--snippet--wraptext", /*wrapText*/ ctx[8]);
			toggle_class(span, "bx--snippet--single", /*type*/ ctx[3] === 'single');
			toggle_class(span, "bx--snippet--inline", /*type*/ ctx[3] === 'inline');
			toggle_class(span, "bx--snippet--multi", /*type*/ ctx[3] === 'multi');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (191:14) {code}
function fallback_block_1$d(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (152:14) {code}
function fallback_block$G(ctx) {
	let t;

	return {
		c() {
			t = text(/*code*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*code*/ 16) set_data(t, /*code*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2w(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1n, create_if_block_1$w, create_else_block_1$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[10]) return 0;
		if (/*type*/ ctx[3] === "inline") return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2x($$self, $$props, $$invalidate) {
	let expandText;
	let minHeight;
	let maxHeight;

	const omit_props_names = [
		"type","code","copy","expanded","hideCopyButton","disabled","wrapText","light","skeleton","copyButtonDescription","copyLabel","feedback","feedbackTimeout","showLessText","showMoreText","showMoreLess","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { type = "single" } = $$props;
	let { code = undefined } = $$props;

	let { copy = async code => {
		try {
			await navigator.clipboard.writeText(code);
		} catch(e) {
			console.log(e);
		}
	} } = $$props;

	let { expanded = false } = $$props;
	let { hideCopyButton = false } = $$props;
	let { disabled = false } = $$props;
	let { wrapText = false } = $$props;
	let { light = false } = $$props;
	let { skeleton = false } = $$props;
	let { copyButtonDescription = undefined } = $$props;
	let { copyLabel = undefined } = $$props;
	let { feedback = "Copied!" } = $$props;
	let { feedbackTimeout = 2000 } = $$props;
	let { showLessText = "Show less" } = $$props;
	let { showMoreText = "Show more" } = $$props;
	let { showMoreLess = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	/** @type {"fade-in" | "fade-out"} */
	let animation = undefined;

	let timeout = undefined;

	function setShowMoreLess() {
		const { height } = ref.getBoundingClientRect();
		if (height > 0) $$invalidate(2, showMoreLess = ref.getBoundingClientRect().height > 255);
	}

	onMount(() => {
		return () => clearTimeout(timeout);
	});

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_3 = () => {
		copy(code);
		dispatch('copy');
		if (animation === 'fade-in') return;
		$$invalidate(16, animation = 'fade-in');

		$$invalidate(17, timeout = setTimeout(
			() => {
				$$invalidate(16, animation = 'fade-out');
			},
			feedbackTimeout
		));
	};

	const animationend_handler_1 = ({ animationName }) => {
		if (animationName === 'hide-feedback') {
			$$invalidate(16, animation = undefined);
		}
	};

	function pre_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function copy_handler(event) {
		bubble.call(this, $$self, event);
	}

	function animationend_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_4 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
		if ('code' in $$new_props) $$invalidate(4, code = $$new_props.code);
		if ('copy' in $$new_props) $$invalidate(5, copy = $$new_props.copy);
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('hideCopyButton' in $$new_props) $$invalidate(6, hideCopyButton = $$new_props.hideCopyButton);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('wrapText' in $$new_props) $$invalidate(8, wrapText = $$new_props.wrapText);
		if ('light' in $$new_props) $$invalidate(9, light = $$new_props.light);
		if ('skeleton' in $$new_props) $$invalidate(10, skeleton = $$new_props.skeleton);
		if ('copyButtonDescription' in $$new_props) $$invalidate(11, copyButtonDescription = $$new_props.copyButtonDescription);
		if ('copyLabel' in $$new_props) $$invalidate(12, copyLabel = $$new_props.copyLabel);
		if ('feedback' in $$new_props) $$invalidate(13, feedback = $$new_props.feedback);
		if ('feedbackTimeout' in $$new_props) $$invalidate(14, feedbackTimeout = $$new_props.feedbackTimeout);
		if ('showLessText' in $$new_props) $$invalidate(23, showLessText = $$new_props.showLessText);
		if ('showMoreText' in $$new_props) $$invalidate(24, showMoreText = $$new_props.showMoreText);
		if ('showMoreLess' in $$new_props) $$invalidate(2, showMoreLess = $$new_props.showMoreLess);
		if ('id' in $$new_props) $$invalidate(15, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expanded, showLessText, showMoreText*/ 25165825) {
			$$invalidate(20, expandText = expanded ? showLessText : showMoreText);
		}

		if ($$self.$$.dirty[0] & /*expanded*/ 1) {
			$$invalidate(19, minHeight = expanded ? 16 * 15 : 48);
		}

		if ($$self.$$.dirty[0] & /*expanded*/ 1) {
			$$invalidate(18, maxHeight = expanded ? "none" : 16 * 15 + "px");
		}

		if ($$self.$$.dirty[0] & /*type, ref, code*/ 26) {
			if (type === "multi" && ref) {
				if (code === undefined) setShowMoreLess();
				if (code) tick().then(setShowMoreLess);
			}
		}

		if ($$self.$$.dirty[0] & /*type, expanded*/ 9) {
			if (type === "multi") dispatch(expanded ? "expand" : "collapse");
		}
	};

	return [
		expanded,
		ref,
		showMoreLess,
		type,
		code,
		copy,
		hideCopyButton,
		disabled,
		wrapText,
		light,
		skeleton,
		copyButtonDescription,
		copyLabel,
		feedback,
		feedbackTimeout,
		id,
		animation,
		timeout,
		maxHeight,
		minHeight,
		expandText,
		dispatch,
		$$restProps,
		showLessText,
		showMoreText,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_3,
		animationend_handler_1,
		pre_binding,
		click_handler_2,
		copy_handler,
		animationend_handler,
		click_handler_4,
		$$scope
	];
}

class CodeSnippet extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2x,
			create_fragment$2w,
			safe_not_equal,
			{
				type: 3,
				code: 4,
				copy: 5,
				expanded: 0,
				hideCopyButton: 6,
				disabled: 7,
				wrapText: 8,
				light: 9,
				skeleton: 10,
				copyButtonDescription: 11,
				copyLabel: 12,
				feedback: 13,
				feedbackTimeout: 14,
				showLessText: 23,
				showMoreText: 24,
				showMoreLess: 2,
				id: 15,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var CodeSnippet$1 = CodeSnippet;

/* src/RadioButton/RadioButton.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$f = dirty => ({});
const get_labelText_slot_context$f = ctx => ({});

// (74:4) {#if labelText || $$slots.labelText}
function create_if_block$1m(ctx) {
	let span;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[16].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[15], get_labelText_slot_context$f);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$F(ctx);

	return {
		c() {
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[15], dirty, get_labelText_slot_changes$f),
						get_labelText_slot_context$f
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 64)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLabel*/ 128) {
				toggle_class(span, "bx--visually-hidden", /*hideLabel*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (76:31)            
function fallback_block$F(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 64) set_data(t, /*labelText*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2v(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*labelText*/ ctx[6] || /*$$slots*/ ctx[13].labelText) && create_if_block$1m(ctx);
	let div_levels = [/*$$restProps*/ ctx[12]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span = element("span");
			t1 = space();
			if (if_block) if_block.c();
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[8]);
			attr(input, "name", /*name*/ ctx[9]);
			input.checked = /*checked*/ ctx[0];
			input.disabled = /*disabled*/ ctx[3];
			input.required = /*required*/ ctx[4];
			input.value = /*value*/ ctx[2];
			toggle_class(input, "bx--radio-button", true);
			toggle_class(span, "bx--radio-button__appearance", true);
			attr(label, "for", /*id*/ ctx[8]);
			toggle_class(label, "bx--radio-button__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[5] === 'left');
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			/*input_binding*/ ctx[18](input);
			append(div, t0);
			append(div, label);
			append(label, span);
			append(label, t1);
			if (if_block) if_block.m(label, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "change", /*change_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 256) {
				attr(input, "id", /*id*/ ctx[8]);
			}

			if (!current || dirty & /*name*/ 512) {
				attr(input, "name", /*name*/ ctx[9]);
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			if (!current || dirty & /*required*/ 16) {
				input.required = /*required*/ ctx[4];
			}

			if (!current || dirty & /*value*/ 4) {
				input.value = /*value*/ ctx[2];
			}

			if (/*labelText*/ ctx[6] || /*$$slots*/ ctx[13].labelText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*labelText, $$slots*/ 8256) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1m(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]]));
			toggle_class(div, "bx--radio-button-wrapper", true);
			toggle_class(div, "bx--radio-button-wrapper--label-left", /*labelPosition*/ ctx[5] === 'left');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*input_binding*/ ctx[18](null);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2w($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","checked","disabled","required","labelPosition","labelText","hideLabel","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { value = "" } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { required = false } = $$props;
	let { labelPosition = "right" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("RadioButtonGroup");

	const selectedValue = ctx
	? ctx.selectedValue
	: writable(checked ? value : undefined);

	component_subscribe($$self, selectedValue, value => $$invalidate(14, $selectedValue = value));

	if (ctx) {
		ctx.add({ id, checked, disabled, value });
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler_1 = () => {
		if (ctx) {
			ctx.update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('required' in $$new_props) $$invalidate(4, required = $$new_props.required);
		if ('labelPosition' in $$new_props) $$invalidate(5, labelPosition = $$new_props.labelPosition);
		if ('labelText' in $$new_props) $$invalidate(6, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(7, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 16388) {
			$$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		value,
		disabled,
		required,
		labelPosition,
		labelText,
		hideLabel,
		id,
		name,
		ctx,
		selectedValue,
		$$restProps,
		$$slots,
		$selectedValue,
		$$scope,
		slots,
		change_handler,
		input_binding,
		change_handler_1
	];
}

class RadioButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2w, create_fragment$2v, safe_not_equal, {
			value: 2,
			checked: 0,
			disabled: 3,
			required: 4,
			labelPosition: 5,
			labelText: 6,
			hideLabel: 7,
			id: 8,
			name: 9,
			ref: 1
		});
	}
}

var RadioButton$1 = RadioButton;

/* src/DataTable/Table.svelte generated by Svelte v3.49.0 */

function create_else_block$k(ctx) {
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let table_levels = [/*$$restProps*/ ctx[6], { style: /*tableStyle*/ ctx[5] }];
	let table_data = {};

	for (let i = 0; i < table_levels.length; i += 1) {
		table_data = assign(table_data, table_levels[i]);
	}

	return {
		c() {
			table = element("table");
			if (default_slot) default_slot.c();
			set_attributes(table, table_data);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[3]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, table, anchor);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			set_attributes(table, table_data = get_spread_update(table_levels, [
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				(!current || dirty & /*tableStyle*/ 32) && { style: /*tableStyle*/ ctx[5] }
			]));

			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[3]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[4]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(table);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (27:0) {#if stickyHeader}
function create_if_block$1l(ctx) {
	let section;
	let table;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let section_levels = [/*$$restProps*/ ctx[6]];
	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			table = element("table");
			if (default_slot) default_slot.c();
			attr(table, "style", /*tableStyle*/ ctx[5]);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[3]);
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[4]);
			set_attributes(section, section_data);
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, table);

			if (default_slot) {
				default_slot.m(table, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*tableStyle*/ 32) {
				attr(table, "style", /*tableStyle*/ ctx[5]);
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[0] === 'compact');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[0] === 'short');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[0] === 'tall');
			}

			if (dirty & /*size*/ 1) {
				toggle_class(table, "bx--data-table--md", /*size*/ ctx[0] === 'medium');
			}

			if (dirty & /*sortable*/ 8) {
				toggle_class(table, "bx--data-table--sort", /*sortable*/ ctx[3]);
			}

			if (dirty & /*zebra*/ 2) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[1]);
			}

			if (dirty & /*useStaticWidth*/ 4) {
				toggle_class(table, "bx--data-table--static", /*useStaticWidth*/ ctx[2]);
			}

			if (dirty & /*stickyHeader*/ 16) {
				toggle_class(table, "bx--data-table--sticky-header", /*stickyHeader*/ ctx[4]);
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(section, "bx--data-table_inner-container", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2u(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1l, create_else_block$k];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*stickyHeader*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2v($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","zebra","useStaticWidth","sortable","stickyHeader","tableStyle"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { sortable = false } = $$props;
	let { stickyHeader = false } = $$props;
	let { tableStyle = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('zebra' in $$new_props) $$invalidate(1, zebra = $$new_props.zebra);
		if ('useStaticWidth' in $$new_props) $$invalidate(2, useStaticWidth = $$new_props.useStaticWidth);
		if ('sortable' in $$new_props) $$invalidate(3, sortable = $$new_props.sortable);
		if ('stickyHeader' in $$new_props) $$invalidate(4, stickyHeader = $$new_props.stickyHeader);
		if ('tableStyle' in $$new_props) $$invalidate(5, tableStyle = $$new_props.tableStyle);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		size,
		zebra,
		useStaticWidth,
		sortable,
		stickyHeader,
		tableStyle,
		$$restProps,
		$$scope,
		slots
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2v, create_fragment$2u, safe_not_equal, {
			size: 0,
			zebra: 1,
			useStaticWidth: 2,
			sortable: 3,
			stickyHeader: 4,
			tableStyle: 5
		});
	}
}

var Table$1 = Table;

/* src/DataTable/TableBody.svelte generated by Svelte v3.49.0 */

function create_fragment$2t(ctx) {
	let tbody;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tbody_levels = [{ "aria-live": "polite" }, /*$$restProps*/ ctx[0]];
	let tbody_data = {};

	for (let i = 0; i < tbody_levels.length; i += 1) {
		tbody_data = assign(tbody_data, tbody_levels[i]);
	}

	return {
		c() {
			tbody = element("tbody");
			if (default_slot) default_slot.c();
			set_attributes(tbody, tbody_data);
		},
		m(target, anchor) {
			insert(target, tbody, anchor);

			if (default_slot) {
				default_slot.m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
				{ "aria-live": "polite" },
				dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tbody);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2u($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, $$scope, slots];
}

class TableBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2u, create_fragment$2t, safe_not_equal, {});
	}
}

var TableBody$1 = TableBody;

/* src/DataTable/TableCell.svelte generated by Svelte v3.49.0 */

function create_fragment$2s(ctx) {
	let td;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let td_levels = [/*$$restProps*/ ctx[0]];
	let td_data = {};

	for (let i = 0; i < td_levels.length; i += 1) {
		td_data = assign(td_data, td_levels[i]);
	}

	return {
		c() {
			td = element("td");
			if (default_slot) default_slot.c();
			set_attributes(td, td_data);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (default_slot) {
				default_slot.m(td, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(td, "click", /*click_handler*/ ctx[3]),
					listen(td, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(td, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(td, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(td, td_data = get_spread_update(td_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2t($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2t, create_fragment$2s, safe_not_equal, {});
	}
}

var TableCell$1 = TableCell;

/* src/DataTable/TableContainer.svelte generated by Svelte v3.49.0 */

function create_if_block$1k(ctx) {
	let div;
	let h4;
	let t0;
	let t1;
	let p;
	let t2;

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*description*/ ctx[1]);
			toggle_class(h4, "bx--data-table-header__title", true);
			toggle_class(p, "bx--data-table-header__description", true);
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(h4, t0);
			append(div, t1);
			append(div, p);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*description*/ 2) set_data(t2, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$2r(ctx) {
	let div;
	let t;
	let current;
	let if_block = /*title*/ ctx[0] && create_if_block$1k(ctx);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	let div_levels = [/*$$restProps*/ ctx[4]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table-container--static", /*useStaticWidth*/ ctx[3]);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1k(ctx);
					if_block.c();
					if_block.m(div, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
			toggle_class(div, "bx--data-table-container", true);
			toggle_class(div, "bx--data-table-container--static", /*useStaticWidth*/ ctx[3]);
			toggle_class(div, "bx--data-table--max-width", /*stickyHeader*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2s($$self, $$props, $$invalidate) {
	const omit_props_names = ["title","description","stickyHeader","useStaticWidth"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { stickyHeader = false } = $$props;
	let { useStaticWidth = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('title' in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ('description' in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ('stickyHeader' in $$new_props) $$invalidate(2, stickyHeader = $$new_props.stickyHeader);
		if ('useStaticWidth' in $$new_props) $$invalidate(3, useStaticWidth = $$new_props.useStaticWidth);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [title, description, stickyHeader, useStaticWidth, $$restProps, $$scope, slots];
}

class TableContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2s, create_fragment$2r, safe_not_equal, {
			title: 0,
			description: 1,
			stickyHeader: 2,
			useStaticWidth: 3
		});
	}
}

var TableContainer$1 = TableContainer;

/* src/DataTable/TableHead.svelte generated by Svelte v3.49.0 */

function create_fragment$2q(ctx) {
	let thead;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let thead_levels = [/*$$restProps*/ ctx[0]];
	let thead_data = {};

	for (let i = 0; i < thead_levels.length; i += 1) {
		thead_data = assign(thead_data, thead_levels[i]);
	}

	return {
		c() {
			thead = element("thead");
			if (default_slot) default_slot.c();
			set_attributes(thead, thead_data);
		},
		m(target, anchor) {
			insert(target, thead, anchor);

			if (default_slot) {
				default_slot.m(thead, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(thead, "click", /*click_handler*/ ctx[3]),
					listen(thead, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(thead, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(thead, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(thead, thead_data = get_spread_update(thead_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(thead);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2r($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2r, create_fragment$2q, safe_not_equal, {});
	}
}

var TableHead$1 = TableHead;

/* src/icons/ArrowUp.svelte generated by Svelte v3.49.0 */

function create_if_block$1j(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2p(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1j(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M16 4L6 14 7.41 15.41 15 7.83 15 28 17 28 17 7.83 24.59 15.41 26 14 16 4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1j(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2q($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ArrowUp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2q, create_fragment$2p, safe_not_equal, { size: 0, title: 1 });
	}
}

var ArrowUp$1 = ArrowUp;

/* src/icons/ArrowsVertical.svelte generated by Svelte v3.49.0 */

function create_if_block$1i(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2o(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1i(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M27.6 20.6L24 24.2 24 4 22 4 22 24.2 18.4 20.6 17 22 23 28 29 22zM9 4L3 10 4.4 11.4 8 7.8 8 28 10 28 10 7.8 13.6 11.4 15 10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1i(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2p($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ArrowsVertical extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2p, create_fragment$2o, safe_not_equal, { size: 0, title: 1 });
	}
}

var ArrowsVertical$1 = ArrowsVertical;

/* src/DataTable/TableHeader.svelte generated by Svelte v3.49.0 */

function create_else_block$j(ctx) {
	let th;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	let th_levels = [
		{ scope: /*scope*/ ctx[3] },
		{ "data-header": /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--table-header-label", true);
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(th, "click", /*click_handler_1*/ ctx[14]),
					listen(th, "mouseover", /*mouseover_handler_1*/ ctx[15]),
					listen(th, "mouseenter", /*mouseenter_handler_1*/ ctx[16]),
					listen(th, "mouseleave", /*mouseleave_handler_1*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*scope*/ 8) && { scope: /*scope*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { "data-header": /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (34:0) {#if sortable}
function create_if_block$1h(ctx) {
	let th;
	let button;
	let div;
	let t0;
	let arrowup;
	let t1;
	let arrowsvertical;
	let th_aria_sort_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	arrowup = new ArrowUp$1({
			props: {
				size: 20,
				"aria-label": /*ariaLabel*/ ctx[5],
				class: "bx--table-sort__icon"
			}
		});

	arrowsvertical = new ArrowsVertical$1({
			props: {
				size: 20,
				"aria-label": /*ariaLabel*/ ctx[5],
				class: "bx--table-sort__icon-unsorted"
			}
		});

	let th_levels = [
		{
			"aria-sort": th_aria_sort_value = /*active*/ ctx[2] ? /*sortDirection*/ ctx[1] : 'none'
		},
		{ scope: /*scope*/ ctx[3] },
		{ "data-header": /*id*/ ctx[4] },
		/*$$restProps*/ ctx[6]
	];

	let th_data = {};

	for (let i = 0; i < th_levels.length; i += 1) {
		th_data = assign(th_data, th_levels[i]);
	}

	return {
		c() {
			th = element("th");
			button = element("button");
			div = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(arrowup.$$.fragment);
			t1 = space();
			create_component(arrowsvertical.$$.fragment);
			toggle_class(div, "bx--table-header-label", true);
			toggle_class(button, "bx--table-sort", true);
			toggle_class(button, "bx--table-sort--active", /*active*/ ctx[2]);
			toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[2] && /*sortDirection*/ ctx[1] === 'descending');
			set_attributes(th, th_data);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, button);
			append(button, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(button, t0);
			mount_component(arrowup, button, null);
			append(button, t1);
			mount_component(arrowsvertical, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[13]),
					listen(th, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(th, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(th, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			const arrowup_changes = {};
			if (dirty & /*ariaLabel*/ 32) arrowup_changes["aria-label"] = /*ariaLabel*/ ctx[5];
			arrowup.$set(arrowup_changes);
			const arrowsvertical_changes = {};
			if (dirty & /*ariaLabel*/ 32) arrowsvertical_changes["aria-label"] = /*ariaLabel*/ ctx[5];
			arrowsvertical.$set(arrowsvertical_changes);

			if (dirty & /*active*/ 4) {
				toggle_class(button, "bx--table-sort--active", /*active*/ ctx[2]);
			}

			if (dirty & /*active, sortDirection*/ 6) {
				toggle_class(button, "bx--table-sort--ascending", /*active*/ ctx[2] && /*sortDirection*/ ctx[1] === 'descending');
			}

			set_attributes(th, th_data = get_spread_update(th_levels, [
				(!current || dirty & /*active, sortDirection*/ 6 && th_aria_sort_value !== (th_aria_sort_value = /*active*/ ctx[2] ? /*sortDirection*/ ctx[1] : 'none')) && { "aria-sort": th_aria_sort_value },
				(!current || dirty & /*scope*/ 8) && { scope: /*scope*/ ctx[3] },
				(!current || dirty & /*id*/ 16) && { "data-header": /*id*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(arrowup.$$.fragment, local);
			transition_in(arrowsvertical.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(arrowup.$$.fragment, local);
			transition_out(arrowsvertical.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (default_slot) default_slot.d(detaching);
			destroy_component(arrowup);
			destroy_component(arrowsvertical);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$2n(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1h, create_else_block$j];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*sortable*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2o($$self, $$props, $$invalidate) {
	let ariaLabel;
	const omit_props_names = ["sortable","sortDirection","active","scope","translateWithId","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { sortable = false } = $$props;
	let { sortDirection = "none" } = $$props;
	let { active = false } = $$props;
	let { scope = "col" } = $$props;
	let { translateWithId = () => "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('sortable' in $$new_props) $$invalidate(0, sortable = $$new_props.sortable);
		if ('sortDirection' in $$new_props) $$invalidate(1, sortDirection = $$new_props.sortDirection);
		if ('active' in $$new_props) $$invalidate(2, active = $$new_props.active);
		if ('scope' in $$new_props) $$invalidate(3, scope = $$new_props.scope);
		if ('translateWithId' in $$new_props) $$invalidate(7, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*translateWithId*/ 128) {
			// TODO: translate with id
			$$invalidate(5, ariaLabel = translateWithId());
		}
	};

	return [
		sortable,
		sortDirection,
		active,
		scope,
		id,
		ariaLabel,
		$$restProps,
		translateWithId,
		$$scope,
		slots,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class TableHeader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2o, create_fragment$2n, safe_not_equal, {
			sortable: 0,
			sortDirection: 1,
			active: 2,
			scope: 3,
			translateWithId: 7,
			id: 4
		});
	}
}

var TableHeader$1 = TableHeader;

/* src/DataTable/TableRow.svelte generated by Svelte v3.49.0 */

function create_fragment$2m(ctx) {
	let tr;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let tr_levels = [/*$$restProps*/ ctx[0]];
	let tr_data = {};

	for (let i = 0; i < tr_levels.length; i += 1) {
		tr_data = assign(tr_data, tr_levels[i]);
	}

	return {
		c() {
			tr = element("tr");
			if (default_slot) default_slot.c();
			set_attributes(tr, tr_data);
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			if (default_slot) {
				default_slot.m(tr, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "click", /*click_handler*/ ctx[3]),
					listen(tr, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(tr, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(tr, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(tr, tr_data = get_spread_update(tr_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2n($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TableRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2n, create_fragment$2m, safe_not_equal, {});
	}
}

var TableRow$1 = TableRow;

/* src/DataTable/DataTable.svelte generated by Svelte v3.49.0 */

function get_each_context$g(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[66] = list[i];
	child_ctx[68] = i;
	return child_ctx;
}

const get_expanded_row_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880
});

const get_expanded_row_slot_context = ctx => ({ row: /*row*/ ctx[66] });

function get_each_context_1$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[69] = list[i];
	child_ctx[71] = i;
	return child_ctx;
}

const get_cell_slot_changes_1 = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880,
	cell: dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336,
	rowIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880,
	cellIndex: dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336
});

const get_cell_slot_context_1 = ctx => ({
	row: /*row*/ ctx[66],
	cell: /*cell*/ ctx[69],
	rowIndex: /*i*/ ctx[68],
	cellIndex: /*j*/ ctx[71]
});

const get_cell_slot_changes = dirty => ({
	row: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880,
	cell: dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336,
	rowIndex: dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880,
	cellIndex: dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336
});

const get_cell_slot_context = ctx => ({
	row: /*row*/ ctx[66],
	cell: /*cell*/ ctx[69],
	rowIndex: /*i*/ ctx[68],
	cellIndex: /*j*/ ctx[71]
});

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[72] = list[i];
	return child_ctx;
}

const get_cell_header_slot_changes = dirty => ({ header: dirty[0] & /*headers*/ 64 });
const get_cell_header_slot_context = ctx => ({ header: /*header*/ ctx[72] });
const get_description_slot_changes = dirty => ({});
const get_description_slot_context = ctx => ({});
const get_title_slot_changes$2 = dirty => ({});
const get_title_slot_context$2 = ctx => ({});

// (262:2) {#if title || $$slots.title || description || $$slots.description}
function create_if_block_13(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = (/*title*/ ctx[8] || /*$$slots*/ ctx[38].title) && create_if_block_15(ctx);
	let if_block1 = (/*description*/ ctx[9] || /*$$slots*/ ctx[38].description) && create_if_block_14(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[8] || /*$$slots*/ ctx[38].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*title*/ 256 | dirty[1] & /*$$slots*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_15(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*description*/ ctx[9] || /*$$slots*/ ctx[38].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*description*/ 512 | dirty[1] & /*$$slots*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_14(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (264:6) {#if title || $$slots.title}
function create_if_block_15(ctx) {
	let h4;
	let current;
	const title_slot_template = /*#slots*/ ctx[48].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[62], get_title_slot_context$2);
	const title_slot_or_fallback = title_slot || fallback_block_4(ctx);

	return {
		c() {
			h4 = element("h4");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			toggle_class(h4, "bx--data-table-header__title", true);
		},
		m(target, anchor) {
			insert(target, h4, anchor);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(h4, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (title_slot) {
				if (title_slot.p && (!current || dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[62], dirty, get_title_slot_changes$2),
						get_title_slot_context$2
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty[0] & /*title*/ 256)) {
					title_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h4);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
		}
	};
}

// (266:29) {title}
function fallback_block_4(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*title*/ 256) set_data(t, /*title*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (269:6) {#if description || $$slots.description}
function create_if_block_14(ctx) {
	let p;
	let current;
	const description_slot_template = /*#slots*/ ctx[48].description;
	const description_slot = create_slot(description_slot_template, ctx, /*$$scope*/ ctx[62], get_description_slot_context);
	const description_slot_or_fallback = description_slot || fallback_block_3(ctx);

	return {
		c() {
			p = element("p");
			if (description_slot_or_fallback) description_slot_or_fallback.c();
			toggle_class(p, "bx--data-table-header__description", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (description_slot_or_fallback) {
				description_slot_or_fallback.m(p, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (description_slot) {
				if (description_slot.p && (!current || dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						description_slot,
						description_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(description_slot_template, /*$$scope*/ ctx[62], dirty, get_description_slot_changes),
						get_description_slot_context
					);
				}
			} else {
				if (description_slot_or_fallback && description_slot_or_fallback.p && (!current || dirty[0] & /*description*/ 512)) {
					description_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(description_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(description_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (description_slot_or_fallback) description_slot_or_fallback.d(detaching);
		}
	};
}

// (271:35) {description}
function fallback_block_3(ctx) {
	let t;

	return {
		c() {
			t = text(/*description*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*description*/ 512) set_data(t, /*description*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (287:8) {#if expandable}
function create_if_block_11$2(ctx) {
	let th;
	let th_data_previous_value_value;
	let current;
	let if_block = /*batchExpansion*/ ctx[12] && create_if_block_12$2(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			attr(th, "scope", "col");
			attr(th, "data-previous-value", th_data_previous_value_value = /*expanded*/ ctx[22] ? 'collapsed' : undefined);
			toggle_class(th, "bx--table-expand", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*batchExpansion*/ ctx[12]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*batchExpansion*/ 4096) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_12$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(th, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*expanded*/ 4194304 && th_data_previous_value_value !== (th_data_previous_value_value = /*expanded*/ ctx[22] ? 'collapsed' : undefined)) {
				attr(th, "data-previous-value", th_data_previous_value_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

// (293:12) {#if batchExpansion}
function create_if_block_12$2(ctx) {
	let button;
	let chevronright;
	let current;
	let mounted;
	let dispose;

	chevronright = new ChevronRight$1({
			props: { class: "bx--table-expand__svg" }
		});

	return {
		c() {
			button = element("button");
			create_component(chevronright.$$.fragment);
			attr(button, "type", "button");
			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[49]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(chevronright.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright);
			mounted = false;
			dispose();
		}
	};
}

// (309:8) {#if selectable && !batchSelection}
function create_if_block_10$3(ctx) {
	let th;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (312:8) {#if batchSelection && !radio}
function create_if_block_9$4(ctx) {
	let th;
	let inlinecheckbox;
	let updating_ref;
	let current;

	function inlinecheckbox_ref_binding(value) {
		/*inlinecheckbox_ref_binding*/ ctx[50](value);
	}

	let inlinecheckbox_props = {
		"aria-label": "Select all rows",
		checked: /*selectAll*/ ctx[30],
		indeterminate: /*indeterminate*/ ctx[29]
	};

	if (/*refSelectAll*/ ctx[24] !== void 0) {
		inlinecheckbox_props.ref = /*refSelectAll*/ ctx[24];
	}

	inlinecheckbox = new InlineCheckbox$1({ props: inlinecheckbox_props });
	binding_callbacks.push(() => bind(inlinecheckbox, 'ref', inlinecheckbox_ref_binding));
	inlinecheckbox.$on("change", /*change_handler*/ ctx[51]);

	return {
		c() {
			th = element("th");
			create_component(inlinecheckbox.$$.fragment);
			attr(th, "scope", "col");
			toggle_class(th, "bx--table-column-checkbox", true);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			mount_component(inlinecheckbox, th, null);
			current = true;
		},
		p(ctx, dirty) {
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*selectAll*/ 1073741824) inlinecheckbox_changes.checked = /*selectAll*/ ctx[30];
			if (dirty[0] & /*indeterminate*/ 536870912) inlinecheckbox_changes.indeterminate = /*indeterminate*/ ctx[29];

			if (!updating_ref && dirty[0] & /*refSelectAll*/ 16777216) {
				updating_ref = true;
				inlinecheckbox_changes.ref = /*refSelectAll*/ ctx[24];
				add_flush_callback(() => updating_ref = false);
			}

			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			destroy_component(inlinecheckbox);
		}
	};
}

// (344:10) {:else}
function create_else_block_2$1(ctx) {
	let tableheader;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[52](/*header*/ ctx[72]);
	}

	tableheader = new TableHeader$1({
			props: {
				id: /*header*/ ctx[72].key,
				style: /*formatHeaderWidth*/ ctx[36](/*header*/ ctx[72]),
				sortable: /*sortable*/ ctx[11] && /*header*/ ctx[72].sort !== false,
				sortDirection: /*sortKey*/ ctx[0] === /*header*/ ctx[72].key
				? /*sortDirection*/ ctx[1]
				: 'none',
				active: /*sortKey*/ ctx[0] === /*header*/ ctx[72].key,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	tableheader.$on("click", click_handler_1);

	return {
		c() {
			create_component(tableheader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableheader, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tableheader_changes = {};
			if (dirty[0] & /*headers*/ 64) tableheader_changes.id = /*header*/ ctx[72].key;
			if (dirty[0] & /*headers*/ 64) tableheader_changes.style = /*formatHeaderWidth*/ ctx[36](/*header*/ ctx[72]);
			if (dirty[0] & /*sortable, headers*/ 2112) tableheader_changes.sortable = /*sortable*/ ctx[11] && /*header*/ ctx[72].sort !== false;

			if (dirty[0] & /*sortKey, headers, sortDirection*/ 67) tableheader_changes.sortDirection = /*sortKey*/ ctx[0] === /*header*/ ctx[72].key
			? /*sortDirection*/ ctx[1]
			: 'none';

			if (dirty[0] & /*sortKey, headers*/ 65) tableheader_changes.active = /*sortKey*/ ctx[0] === /*header*/ ctx[72].key;

			if (dirty[0] & /*headers*/ 64 | dirty[2] & /*$$scope*/ 1) {
				tableheader_changes.$$scope = { dirty, ctx };
			}

			tableheader.$set(tableheader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableheader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableheader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableheader, detaching);
		}
	};
}

// (342:10) {#if header.empty}
function create_if_block_8$4(ctx) {
	let th;
	let th_style_value;

	return {
		c() {
			th = element("th");
			attr(th, "scope", "col");
			attr(th, "style", th_style_value = /*formatHeaderWidth*/ ctx[36](/*header*/ ctx[72]));
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers*/ 64 && th_style_value !== (th_style_value = /*formatHeaderWidth*/ ctx[36](/*header*/ ctx[72]))) {
				attr(th, "style", th_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (366:57) {header.value}
function fallback_block_2$5(ctx) {
	let t_value = /*header*/ ctx[72].value + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*headers*/ 64 && t_value !== (t_value = /*header*/ ctx[72].value + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (345:12) <TableHeader               id="{header.key}"               style="{formatHeaderWidth(header)}"               sortable="{sortable && header.sort !== false}"               sortDirection="{sortKey === header.key ? sortDirection : 'none'}"               active="{sortKey === header.key}"               on:click="{() => {                 dispatch('click', { header });                  if (header.sort === false) {                   dispatch('click:header', { header });                 } else {                   let currentSortDirection =                     sortKey === header.key ? sortDirection : 'none';                   sortDirection = sortDirectionMap[currentSortDirection];                   sortKey =                     sortDirection === 'none' ? null : thKeys[header.key];                   dispatch('click:header', { header, sortDirection });                 }               }}"             >
function create_default_slot_9(ctx) {
	let t;
	let current;
	const cell_header_slot_template = /*#slots*/ ctx[48]["cell-header"];
	const cell_header_slot = create_slot(cell_header_slot_template, ctx, /*$$scope*/ ctx[62], get_cell_header_slot_context);
	const cell_header_slot_or_fallback = cell_header_slot || fallback_block_2$5(ctx);

	return {
		c() {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_header_slot_or_fallback) {
				cell_header_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_header_slot) {
				if (cell_header_slot.p && (!current || dirty[0] & /*headers*/ 64 | dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						cell_header_slot,
						cell_header_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(cell_header_slot_template, /*$$scope*/ ctx[62], dirty, get_cell_header_slot_changes),
						get_cell_header_slot_context
					);
				}
			} else {
				if (cell_header_slot_or_fallback && cell_header_slot_or_fallback.p && (!current || dirty[0] & /*headers*/ 64)) {
					cell_header_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_header_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_header_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_header_slot_or_fallback) cell_header_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (341:8) {#each headers as header (header.key)}
function create_each_block_2$1(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_8$4, create_else_block_2$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*header*/ ctx[72].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (286:6) <TableRow>
function create_default_slot_8(ctx) {
	let t0;
	let t1;
	let t2;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[4] && create_if_block_11$2(ctx);
	let if_block1 = /*selectable*/ ctx[5] && !/*batchSelection*/ ctx[15] && create_if_block_10$3();
	let if_block2 = /*batchSelection*/ ctx[15] && !/*radio*/ ctx[14] && create_if_block_9$4(ctx);
	let each_value_2 = /*headers*/ ctx[6];
	const get_key = ctx => /*header*/ ctx[72].key;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_2$1(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_11$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[5] && !/*batchSelection*/ ctx[15]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_10$3();
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*batchSelection*/ ctx[15] && !/*radio*/ ctx[14]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*batchSelection, radio*/ 49152) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_9$4(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, sortable, sortKey, sortDirection*/ 2115 | dirty[1] & /*formatHeaderWidth, dispatch, sortDirectionMap, thKeys*/ 46 | dirty[2] & /*$$scope*/ 1) {
				each_value_2 = /*headers*/ ctx[6];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_2, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_2$1, each_1_anchor, get_each_context_2$1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (285:4) <TableHead>
function create_default_slot_7(ctx) {
	let tablerow;
	let current;

	tablerow = new TableRow$1({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablerow.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablerow, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablerow_changes = {};

			if (dirty[0] & /*headers, sortable, sortKey, sortDirection, selectAll, indeterminate, refSelectAll, selectedRowIds, selectableRowIds, batchSelection, radio, selectable, expanded, expandedRowIds, expandableRowIds, batchExpansion, expandable*/ 1634785407 | dirty[1] & /*thKeys*/ 2 | dirty[2] & /*$$scope*/ 1) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablerow, detaching);
		}
	};
}

// (404:10) {#if expandable}
function create_if_block_6$8(ctx) {
	let tablecell;
	let current;

	tablecell = new TableCell$1({
			props: {
				class: "bx--table-expand",
				headers: "expand",
				"data-previous-value": !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id) && /*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
				? 'collapsed'
				: undefined,
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecell_changes = {};

			if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows*/ 201859072 | dirty[1] & /*expandedRows*/ 1) tablecell_changes["data-previous-value"] = !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id) && /*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
			? 'collapsed'
			: undefined;

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, expandedRowIds, nonExpandableRowIds*/ 201859076 | dirty[1] & /*expandedRows*/ 1 | dirty[2] & /*$$scope*/ 1) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (413:14) {#if !nonExpandableRowIds.includes(row.id)}
function create_if_block_7$6(ctx) {
	let button;
	let chevronright;
	let button_aria_label_value;
	let current;
	let mounted;
	let dispose;

	chevronright = new ChevronRight$1({
			props: { class: "bx--table-expand__svg" }
		});

	function click_handler_2() {
		return /*click_handler_2*/ ctx[53](/*row*/ ctx[66]);
	}

	return {
		c() {
			button = element("button");
			create_component(chevronright.$$.fragment);
			attr(button, "type", "button");

			attr(button, "aria-label", button_aria_label_value = /*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
			? 'Collapse current row'
			: 'Expand current row');

			toggle_class(button, "bx--table-expand__button", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(chevronright, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", stop_propagation(click_handler_2));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880 | dirty[1] & /*expandedRows*/ 1 && button_aria_label_value !== (button_aria_label_value = /*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
			? 'Collapse current row'
			: 'Expand current row')) {
				attr(button, "aria-label", button_aria_label_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevronright.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(chevronright.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(chevronright);
			mounted = false;
			dispose();
		}
	};
}

// (405:12) <TableCell               class="bx--table-expand"               headers="expand"               data-previous-value="{!nonExpandableRowIds.includes(row.id) &&               expandedRows[row.id]                 ? 'collapsed'                 : undefined}"             >
function create_default_slot_6(ctx) {
	let show_if = !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id);
	let if_block_anchor;
	let current;
	let if_block = show_if && create_if_block_7$6(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows*/ 201859072) show_if = !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows*/ 201859072) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_7$6(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (438:10) {#if selectable}
function create_if_block_3$g(ctx) {
	let td;
	let show_if = !/*nonSelectableRowIds*/ ctx[16].includes(/*row*/ ctx[66].id);
	let current;
	let if_block = show_if && create_if_block_4$b(ctx);

	return {
		c() {
			td = element("td");
			if (if_block) if_block.c();
			toggle_class(td, "bx--table-column-checkbox", true);
			toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, td, anchor);
			if (if_block) if_block.m(td, null);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*nonSelectableRowIds, sorting, displayedSortedRows, displayedRows*/ 201916416) show_if = !/*nonSelectableRowIds*/ ctx[16].includes(/*row*/ ctx[66].id);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*nonSelectableRowIds, sorting, displayedSortedRows, displayedRows*/ 201916416) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$b(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(td, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty[0] & /*radio*/ 16384) {
				toggle_class(td, "bx--table-column-radio", /*radio*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (if_block) if_block.d();
		}
	};
}

// (443:14) {#if !nonSelectableRowIds.includes(row.id)}
function create_if_block_4$b(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_5$9, create_else_block_1$3];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*radio*/ ctx[14]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (453:16) {:else}
function create_else_block_1$3(ctx) {
	let inlinecheckbox;
	let current;

	function change_handler_2() {
		return /*change_handler_2*/ ctx[55](/*row*/ ctx[66]);
	}

	inlinecheckbox = new InlineCheckbox$1({
			props: {
				name: "select-row-" + /*row*/ ctx[66].id,
				checked: /*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id)
			}
		});

	inlinecheckbox.$on("change", change_handler_2);

	return {
		c() {
			create_component(inlinecheckbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(inlinecheckbox, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const inlinecheckbox_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880) inlinecheckbox_changes.name = "select-row-" + /*row*/ ctx[66].id;
			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows*/ 201850888) inlinecheckbox_changes.checked = /*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id);
			inlinecheckbox.$set(inlinecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(inlinecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(inlinecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(inlinecheckbox, detaching);
		}
	};
}

// (444:16) {#if radio}
function create_if_block_5$9(ctx) {
	let radiobutton;
	let current;

	function change_handler_1() {
		return /*change_handler_1*/ ctx[54](/*row*/ ctx[66]);
	}

	radiobutton = new RadioButton$1({
			props: {
				name: "select-row-" + /*row*/ ctx[66].id,
				checked: /*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id)
			}
		});

	radiobutton.$on("change", change_handler_1);

	return {
		c() {
			create_component(radiobutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(radiobutton, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const radiobutton_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880) radiobutton_changes.name = "select-row-" + /*row*/ ctx[66].id;
			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows*/ 201850888) radiobutton_changes.checked = /*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id);
			radiobutton.$set(radiobutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(radiobutton, detaching);
		}
	};
}

// (486:12) {:else}
function create_else_block$i(ctx) {
	let tablecell;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[56](/*row*/ ctx[66], /*cell*/ ctx[69]);
	}

	tablecell = new TableCell$1({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	tablecell.$on("click", click_handler_3);

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecell_changes = {};

			if (dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336 | dirty[2] & /*$$scope*/ 1) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (474:12) {#if headers[j].empty}
function create_if_block_2$l(ctx) {
	let td;
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[48].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[62], get_cell_slot_context);
	const cell_slot_or_fallback = cell_slot || fallback_block$E(ctx);

	return {
		c() {
			td = element("td");
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
			toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[6][/*j*/ ctx[71]].columnMenu);
		},
		m(target, anchor) {
			insert(target, td, anchor);

			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(td, null);
			}

			append(td, t);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows, tableCellsByRowId*/ 470286336 | dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						cell_slot,
						cell_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(cell_slot_template, /*$$scope*/ ctx[62], dirty, get_cell_slot_changes),
						get_cell_slot_context
					);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && (!current || dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336)) {
					cell_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}

			if (dirty[0] & /*headers, tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286400) {
				toggle_class(td, "bx--table-column-menu", /*headers*/ ctx[6][/*j*/ ctx[71]].columnMenu);
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
		}
	};
}

// (499:17)                    
function fallback_block_1$c(ctx) {
	let t_value = (/*cell*/ ctx[69].display
	? /*cell*/ ctx[69].display(/*cell*/ ctx[69].value)
	: /*cell*/ ctx[69].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336 && t_value !== (t_value = (/*cell*/ ctx[69].display
			? /*cell*/ ctx[69].display(/*cell*/ ctx[69].value)
			: /*cell*/ ctx[69].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (487:14) <TableCell                 on:click="{() => {                   dispatch('click', { row, cell });                   dispatch('click:cell', cell);                 }}"               >
function create_default_slot_5(ctx) {
	let t;
	let current;
	const cell_slot_template = /*#slots*/ ctx[48].cell;
	const cell_slot = create_slot(cell_slot_template, ctx, /*$$scope*/ ctx[62], get_cell_slot_context_1);
	const cell_slot_or_fallback = cell_slot || fallback_block_1$c(ctx);

	return {
		c() {
			if (cell_slot_or_fallback) cell_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (cell_slot_or_fallback) {
				cell_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (cell_slot) {
				if (cell_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows, tableCellsByRowId*/ 470286336 | dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						cell_slot,
						cell_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(cell_slot_template, /*$$scope*/ ctx[62], dirty, get_cell_slot_changes_1),
						get_cell_slot_context_1
					);
				}
			} else {
				if (cell_slot_or_fallback && cell_slot_or_fallback.p && (!current || dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336)) {
					cell_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cell_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cell_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cell_slot_or_fallback) cell_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (482:17)                    
function fallback_block$E(ctx) {
	let t_value = (/*cell*/ ctx[69].display
	? /*cell*/ ctx[69].display(/*cell*/ ctx[69].value)
	: /*cell*/ ctx[69].value) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286336 && t_value !== (t_value = (/*cell*/ ctx[69].display
			? /*cell*/ ctx[69].display(/*cell*/ ctx[69].value)
			: /*cell*/ ctx[69].value) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (473:10) {#each tableCellsByRowId[row.id] as cell, j (cell.key)}
function create_each_block_1$3(key_1, ctx) {
	let first;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2$l, create_else_block$i];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*headers*/ ctx[6][/*j*/ ctx[71]].empty) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (374:8) <TableRow           data-row="{row.id}"           data-parent-row="{expandable ? true : undefined}"           class="{selectedRowIds.includes(row.id)             ? 'bx--data-table--selected'             : ''} {expandedRows[row.id] ? 'bx--expandable-row' : ''} {expandable             ? 'bx--parent-row'             : ''} {expandable && parentRowId === row.id             ? 'bx--expandable-row--hover'             : ''}"           on:click="{({ target }) => {             // forgo "click", "click:row" events if target             // resembles an overflow menu, a checkbox, or radio button             if (               [...target.classList].some((name) =>                 /^bx--(overflow-menu|checkbox|radio-button)/.test(name)               )             ) {               return;             }             dispatch('click', { row });             dispatch('click:row', row);           }}"           on:mouseenter="{() => {             dispatch('mouseenter:row', row);           }}"           on:mouseleave="{() => {             dispatch('mouseleave:row', row);           }}"         >
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let if_block0 = /*expandable*/ ctx[4] && create_if_block_6$8(ctx);
	let if_block1 = /*selectable*/ ctx[5] && create_if_block_3$g(ctx);
	let each_value_1 = /*tableCellsByRowId*/ ctx[28][/*row*/ ctx[66].id];
	const get_key = ctx => /*cell*/ ctx[69].key;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$3(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$3(key, child_ctx));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*expandable*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$8(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectable*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*selectable*/ 32) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$g(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*headers, tableCellsByRowId, sorting, displayedSortedRows, displayedRows*/ 470286400 | dirty[1] & /*dispatch*/ 8 | dirty[2] & /*$$scope*/ 1) {
				each_value_1 = /*tableCellsByRowId*/ ctx[28][/*row*/ ctx[66].id];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1$3, each_1_anchor, get_each_context_1$3);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (507:8) {#if expandable}
function create_if_block$1g(ctx) {
	let tr;
	let show_if = /*expandedRows*/ ctx[31][/*row*/ ctx[66].id] && !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id);
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = show_if && create_if_block_1$v(ctx);

	function mouseenter_handler_1() {
		return /*mouseenter_handler_1*/ ctx[60](/*row*/ ctx[66]);
	}

	function mouseleave_handler_1() {
		return /*mouseleave_handler_1*/ ctx[61](/*row*/ ctx[66]);
	}

	return {
		c() {
			tr = element("tr");
			if (if_block) if_block.c();
			t = space();
			attr(tr, "data-child-row", "");
			toggle_class(tr, "bx--expandable-row", true);
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			if (if_block) if_block.m(tr, null);
			append(tr, t);
			current = true;

			if (!mounted) {
				dispose = [
					listen(tr, "mouseenter", mouseenter_handler_1),
					listen(tr, "mouseleave", mouseleave_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, nonExpandableRowIds*/ 201859072 | dirty[1] & /*expandedRows*/ 1) show_if = /*expandedRows*/ ctx[31][/*row*/ ctx[66].id] && !/*nonExpandableRowIds*/ ctx[13].includes(/*row*/ ctx[66].id);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, nonExpandableRowIds*/ 201859072 | dirty[1] & /*expandedRows*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$v(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(tr, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (520:12) {#if expandedRows[row.id] && !nonExpandableRowIds.includes(row.id)}
function create_if_block_1$v(ctx) {
	let tablecell;
	let current;

	tablecell = new TableCell$1({
			props: {
				colspan: /*selectable*/ ctx[5]
				? /*headers*/ ctx[6].length + 2
				: /*headers*/ ctx[6].length + 1,
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecell_changes = {};

			if (dirty[0] & /*selectable, headers*/ 96) tablecell_changes.colspan = /*selectable*/ ctx[5]
			? /*headers*/ ctx[6].length + 2
			: /*headers*/ ctx[6].length + 1;

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880 | dirty[2] & /*$$scope*/ 1) {
				tablecell_changes.$$scope = { dirty, ctx };
			}

			tablecell.$set(tablecell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecell, detaching);
		}
	};
}

// (521:14) <TableCell                 colspan="{selectable ? headers.length + 2 : headers.length + 1}"               >
function create_default_slot_3$1(ctx) {
	let div;
	let current;
	const expanded_row_slot_template = /*#slots*/ ctx[48]["expanded-row"];
	const expanded_row_slot = create_slot(expanded_row_slot_template, ctx, /*$$scope*/ ctx[62], get_expanded_row_slot_context);

	return {
		c() {
			div = element("div");
			if (expanded_row_slot) expanded_row_slot.c();
			toggle_class(div, "bx--child-row-inner-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (expanded_row_slot) {
				expanded_row_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (expanded_row_slot) {
				if (expanded_row_slot.p && (!current || dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880 | dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						expanded_row_slot,
						expanded_row_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(expanded_row_slot_template, /*$$scope*/ ctx[62], dirty, get_expanded_row_slot_changes),
						get_expanded_row_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(expanded_row_slot, local);
			current = true;
		},
		o(local) {
			transition_out(expanded_row_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (expanded_row_slot) expanded_row_slot.d(detaching);
		}
	};
}

// (373:6) {#each sorting ? displayedSortedRows : displayedRows as row, i (row.id)}
function create_each_block$g(key_1, ctx) {
	let first;
	let tablerow;
	let t;
	let if_block_anchor;
	let current;

	function click_handler_4(...args) {
		return /*click_handler_4*/ ctx[57](/*row*/ ctx[66], ...args);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[58](/*row*/ ctx[66]);
	}

	function mouseleave_handler() {
		return /*mouseleave_handler*/ ctx[59](/*row*/ ctx[66]);
	}

	tablerow = new TableRow$1({
			props: {
				"data-row": /*row*/ ctx[66].id,
				"data-parent-row": /*expandable*/ ctx[4] ? true : undefined,
				class: "" + ((/*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id)
				? 'bx--data-table--selected'
				: '') + " " + (/*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
				? 'bx--expandable-row'
				: '') + " " + (/*expandable*/ ctx[4] ? 'bx--parent-row' : '') + " " + (/*expandable*/ ctx[4] && /*parentRowId*/ ctx[23] === /*row*/ ctx[66].id
				? 'bx--expandable-row--hover'
				: '')),
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	tablerow.$on("click", click_handler_4);
	tablerow.$on("mouseenter", mouseenter_handler);
	tablerow.$on("mouseleave", mouseleave_handler);
	let if_block = /*expandable*/ ctx[4] && create_if_block$1g(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(tablerow.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(tablerow, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablerow_changes = {};
			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows*/ 201850880) tablerow_changes["data-row"] = /*row*/ ctx[66].id;
			if (dirty[0] & /*expandable*/ 16) tablerow_changes["data-parent-row"] = /*expandable*/ ctx[4] ? true : undefined;

			if (dirty[0] & /*selectedRowIds, sorting, displayedSortedRows, displayedRows, expandable, parentRowId*/ 210239512 | dirty[1] & /*expandedRows*/ 1) tablerow_changes.class = "" + ((/*selectedRowIds*/ ctx[3].includes(/*row*/ ctx[66].id)
			? 'bx--data-table--selected'
			: '') + " " + (/*expandedRows*/ ctx[31][/*row*/ ctx[66].id]
			? 'bx--expandable-row'
			: '') + " " + (/*expandable*/ ctx[4] ? 'bx--parent-row' : '') + " " + (/*expandable*/ ctx[4] && /*parentRowId*/ ctx[23] === /*row*/ ctx[66].id
			? 'bx--expandable-row--hover'
			: ''));

			if (dirty[0] & /*tableCellsByRowId, sorting, displayedSortedRows, displayedRows, headers, radio, selectedRowIds, nonSelectableRowIds, selectable, nonExpandableRowIds, expandedRowIds, expandable*/ 470376572 | dirty[1] & /*expandedRows*/ 1 | dirty[2] & /*$$scope*/ 1) {
				tablerow_changes.$$scope = { dirty, ctx };
			}

			tablerow.$set(tablerow_changes);

			if (/*expandable*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*expandable*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1g(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(tablerow.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(tablerow.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(tablerow, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (372:4) <TableBody>
function create_default_slot_2$4(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*sorting*/ ctx[19]
	? /*displayedSortedRows*/ ctx[26]
	: /*displayedRows*/ ctx[27];

	const get_key = ctx => /*row*/ ctx[66].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$g(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$g(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*nonExpandableRowIds, sorting, displayedSortedRows, displayedRows, parentRowId, selectable, headers, expandable, selectedRowIds, tableCellsByRowId, radio, nonSelectableRowIds, expandedRowIds*/ 478765180 | dirty[1] & /*expandedRows, dispatch*/ 9 | dirty[2] & /*$$scope*/ 1) {
				each_value = /*sorting*/ ctx[19]
				? /*displayedSortedRows*/ ctx[26]
				: /*displayedRows*/ ctx[27];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$g, each_1_anchor, get_each_context$g);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (277:2) <Table     zebra="{zebra}"     size="{size}"     stickyHeader="{stickyHeader}"     sortable="{sortable}"     useStaticWidth="{useStaticWidth}"     tableStyle="{hasCustomHeaderWidth && 'table-layout: fixed'}"   >
function create_default_slot_1$6(ctx) {
	let tablehead;
	let t;
	let tablebody;
	let current;

	tablehead = new TableHead$1({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	tablebody = new TableBody$1({
			props: {
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablehead.$$.fragment);
			t = space();
			create_component(tablebody.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablehead, target, anchor);
			insert(target, t, anchor);
			mount_component(tablebody, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablehead_changes = {};

			if (dirty[0] & /*headers, sortable, sortKey, sortDirection, selectAll, indeterminate, refSelectAll, selectedRowIds, selectableRowIds, batchSelection, radio, selectable, expanded, expandedRowIds, expandableRowIds, batchExpansion, expandable*/ 1634785407 | dirty[1] & /*thKeys*/ 2 | dirty[2] & /*$$scope*/ 1) {
				tablehead_changes.$$scope = { dirty, ctx };
			}

			tablehead.$set(tablehead_changes);
			const tablebody_changes = {};

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, nonExpandableRowIds, parentRowId, selectable, headers, expandable, selectedRowIds, tableCellsByRowId, radio, nonSelectableRowIds, expandedRowIds*/ 478765180 | dirty[1] & /*expandedRows*/ 1 | dirty[2] & /*$$scope*/ 1) {
				tablebody_changes.$$scope = { dirty, ctx };
			}

			tablebody.$set(tablebody_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablehead.$$.fragment, local);
			transition_in(tablebody.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablehead.$$.fragment, local);
			transition_out(tablebody.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablehead, detaching);
			if (detaching) detach(t);
			destroy_component(tablebody, detaching);
		}
	};
}

// (261:0) <TableContainer useStaticWidth="{useStaticWidth}" {...$$restProps}>
function create_default_slot$h(ctx) {
	let t0;
	let t1;
	let table;
	let current;
	let if_block = (/*title*/ ctx[8] || /*$$slots*/ ctx[38].title || /*description*/ ctx[9] || /*$$slots*/ ctx[38].description) && create_if_block_13(ctx);
	const default_slot_template = /*#slots*/ ctx[48].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[62], null);

	table = new Table$1({
			props: {
				zebra: /*zebra*/ ctx[10],
				size: /*size*/ ctx[7],
				stickyHeader: /*stickyHeader*/ ctx[17],
				sortable: /*sortable*/ ctx[11],
				useStaticWidth: /*useStaticWidth*/ ctx[18],
				tableStyle: /*hasCustomHeaderWidth*/ ctx[25] && 'table-layout: fixed',
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t1, anchor);
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*title*/ ctx[8] || /*$$slots*/ ctx[38].title || /*description*/ ctx[9] || /*$$slots*/ ctx[38].description) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*title, description*/ 768 | dirty[1] & /*$$slots*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_13(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[2] & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[62],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[62])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[62], dirty, null),
						null
					);
				}
			}

			const table_changes = {};
			if (dirty[0] & /*zebra*/ 1024) table_changes.zebra = /*zebra*/ ctx[10];
			if (dirty[0] & /*size*/ 128) table_changes.size = /*size*/ ctx[7];
			if (dirty[0] & /*stickyHeader*/ 131072) table_changes.stickyHeader = /*stickyHeader*/ ctx[17];
			if (dirty[0] & /*sortable*/ 2048) table_changes.sortable = /*sortable*/ ctx[11];
			if (dirty[0] & /*useStaticWidth*/ 262144) table_changes.useStaticWidth = /*useStaticWidth*/ ctx[18];
			if (dirty[0] & /*hasCustomHeaderWidth*/ 33554432) table_changes.tableStyle = /*hasCustomHeaderWidth*/ ctx[25] && 'table-layout: fixed';

			if (dirty[0] & /*sorting, displayedSortedRows, displayedRows, nonExpandableRowIds, parentRowId, selectable, headers, expandable, selectedRowIds, tableCellsByRowId, radio, nonSelectableRowIds, expandedRowIds, sortable, sortKey, sortDirection, selectAll, indeterminate, refSelectAll, selectableRowIds, batchSelection, expanded, expandableRowIds, batchExpansion*/ 2113534079 | dirty[1] & /*expandedRows, thKeys*/ 3 | dirty[2] & /*$$scope*/ 1) {
				table_changes.$$scope = { dirty, ctx };
			}

			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t1);
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$2l(ctx) {
	let tablecontainer;
	let current;

	const tablecontainer_spread_levels = [
		{
			useStaticWidth: /*useStaticWidth*/ ctx[18]
		},
		/*$$restProps*/ ctx[37]
	];

	let tablecontainer_props = {
		$$slots: { default: [create_default_slot$h] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tablecontainer_spread_levels.length; i += 1) {
		tablecontainer_props = assign(tablecontainer_props, tablecontainer_spread_levels[i]);
	}

	tablecontainer = new TableContainer$1({ props: tablecontainer_props });

	return {
		c() {
			create_component(tablecontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontainer, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecontainer_changes = (dirty[0] & /*useStaticWidth*/ 262144 | dirty[1] & /*$$restProps*/ 64)
			? get_spread_update(tablecontainer_spread_levels, [
					dirty[0] & /*useStaticWidth*/ 262144 && {
						useStaticWidth: /*useStaticWidth*/ ctx[18]
					},
					dirty[1] & /*$$restProps*/ 64 && get_spread_object(/*$$restProps*/ ctx[37])
				])
			: {};

			if (dirty[0] & /*zebra, size, stickyHeader, sortable, useStaticWidth, hasCustomHeaderWidth, sorting, displayedSortedRows, displayedRows, nonExpandableRowIds, parentRowId, selectable, headers, expandable, selectedRowIds, tableCellsByRowId, radio, nonSelectableRowIds, expandedRowIds, sortKey, sortDirection, selectAll, indeterminate, refSelectAll, selectableRowIds, batchSelection, expanded, expandableRowIds, batchExpansion, description, title*/ 2147483647 | dirty[1] & /*expandedRows, thKeys, $$slots*/ 131 | dirty[2] & /*$$scope*/ 1) {
				tablecontainer_changes.$$scope = { dirty, ctx };
			}

			tablecontainer.$set(tablecontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontainer, detaching);
		}
	};
}

function instance$2m($$self, $$props, $$invalidate) {
	let thKeys;
	let expandedRows;
	let rowIds;
	let expandableRowIds;
	let selectableRowIds;
	let selectAll;
	let indeterminate;
	let headerKeys;
	let tableCellsByRowId;
	let sortedRows;
	let ascending;
	let sorting;
	let sortingHeader;
	let displayedRows;
	let displayedSortedRows;
	let hasCustomHeaderWidth;

	const omit_props_names = [
		"headers","rows","size","title","description","zebra","sortable","sortKey","sortDirection","expandable","batchExpansion","expandedRowIds","nonExpandableRowIds","radio","selectable","batchSelection","selectedRowIds","nonSelectableRowIds","stickyHeader","useStaticWidth","pageSize","page"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $tableRows;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { headers = [] } = $$props;
	let { rows = [] } = $$props;
	let { size = undefined } = $$props;
	let { title = "" } = $$props;
	let { description = "" } = $$props;
	let { zebra = false } = $$props;
	let { sortable = false } = $$props;
	let { sortKey = null } = $$props;
	let { sortDirection = "none" } = $$props;
	let { expandable = false } = $$props;
	let { batchExpansion = false } = $$props;
	let { expandedRowIds = [] } = $$props;
	let { nonExpandableRowIds = [] } = $$props;
	let { radio = false } = $$props;
	let { selectable = false } = $$props;
	let { batchSelection = false } = $$props;
	let { selectedRowIds = [] } = $$props;
	let { nonSelectableRowIds = [] } = $$props;
	let { stickyHeader = false } = $$props;
	let { useStaticWidth = false } = $$props;
	let { pageSize = 0 } = $$props;
	let { page = 0 } = $$props;

	const sortDirectionMap = {
		none: "ascending",
		ascending: "descending",
		descending: "none"
	};

	const dispatch = createEventDispatcher();
	const batchSelectedIds = writable(false);
	const tableRows = writable(rows);
	component_subscribe($$self, tableRows, value => $$invalidate(47, $tableRows = value));

	const resolvePath = (object, path) => {
		if (path in object) return object[path];
		return path.split(/[\.\[\]\'\"]/).filter(p => p).reduce((o, p) => o && typeof o === "object" ? o[p] : o, object);
	};

	setContext("DataTable", {
		batchSelectedIds,
		tableRows,
		resetSelectedRowIds: () => {
			$$invalidate(30, selectAll = false);
			$$invalidate(3, selectedRowIds = []);
			if (refSelectAll) $$invalidate(24, refSelectAll.checked = false, refSelectAll);
		}
	});

	let expanded = false;
	let parentRowId = null;
	let refSelectAll = null;

	const getDisplayedRows = (rows, page, pageSize) => page && pageSize
	? rows.slice((page - 1) * pageSize, page * pageSize)
	: rows;

	/** @type {(header: DataTableHeader) => undefined | string} */
	const formatHeaderWidth = header => {
		const styles = [
			header.width && `width: ${header.width}`,
			header.minWidth && `min-width: ${header.minWidth}`
		].filter(Boolean);

		if (styles.length === 0) return undefined;
		return styles.join(";");
	};

	const click_handler = () => {
		$$invalidate(22, expanded = !expanded);
		$$invalidate(2, expandedRowIds = expanded ? expandableRowIds : []);
		dispatch('click:header--expand', { expanded });
	};

	function inlinecheckbox_ref_binding(value) {
		refSelectAll = value;
		$$invalidate(24, refSelectAll);
	}

	const change_handler = e => {
		dispatch('click:header--select', {
			indeterminate,
			selected: !indeterminate && e.target.checked
		});

		if (indeterminate) {
			e.target.checked = false;
			$$invalidate(30, selectAll = false);
			$$invalidate(3, selectedRowIds = []);
			return;
		}

		if (e.target.checked) {
			$$invalidate(3, selectedRowIds = selectableRowIds);
		} else {
			$$invalidate(3, selectedRowIds = []);
		}
	};

	const click_handler_1 = header => {
		dispatch('click', { header });

		if (header.sort === false) {
			dispatch('click:header', { header });
		} else {
			let currentSortDirection = sortKey === header.key ? sortDirection : 'none';
			$$invalidate(1, sortDirection = sortDirectionMap[currentSortDirection]);
			$$invalidate(0, sortKey = sortDirection === 'none' ? null : thKeys[header.key]);
			dispatch('click:header', { header, sortDirection });
		}
	};

	const click_handler_2 = row => {
		const rowExpanded = !!expandedRows[row.id];

		$$invalidate(2, expandedRowIds = rowExpanded
		? expandedRowIds.filter(id => id !== row.id)
		: [...expandedRowIds, row.id]);

		dispatch('click:row--expand', { row, expanded: !rowExpanded });
	};

	const change_handler_1 = row => {
		$$invalidate(3, selectedRowIds = [row.id]);
		dispatch('click:row--select', { row, selected: true });
	};

	const change_handler_2 = row => {
		if (selectedRowIds.includes(row.id)) {
			$$invalidate(3, selectedRowIds = selectedRowIds.filter(id => id !== row.id));
			dispatch('click:row--select', { row, selected: false });
		} else {
			$$invalidate(3, selectedRowIds = [...selectedRowIds, row.id]);
			dispatch('click:row--select', { row, selected: true });
		}
	};

	const click_handler_3 = (row, cell) => {
		dispatch('click', { row, cell });
		dispatch('click:cell', cell);
	};

	const click_handler_4 = (row, { target }) => {
		// forgo "click", "click:row" events if target
		// resembles an overflow menu, a checkbox, or radio button
		if ([...target.classList].some(name => (/^bx--(overflow-menu|checkbox|radio-button)/).test(name))) {
			return;
		}

		dispatch('click', { row });
		dispatch('click:row', row);
	};

	const mouseenter_handler = row => {
		dispatch('mouseenter:row', row);
	};

	const mouseleave_handler = row => {
		dispatch('mouseleave:row', row);
	};

	const mouseenter_handler_1 = row => {
		if (nonExpandableRowIds.includes(row.id)) return;
		$$invalidate(23, parentRowId = row.id);
	};

	const mouseleave_handler_1 = row => {
		if (nonExpandableRowIds.includes(row.id)) return;
		$$invalidate(23, parentRowId = null);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(37, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('headers' in $$new_props) $$invalidate(6, headers = $$new_props.headers);
		if ('rows' in $$new_props) $$invalidate(39, rows = $$new_props.rows);
		if ('size' in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(8, title = $$new_props.title);
		if ('description' in $$new_props) $$invalidate(9, description = $$new_props.description);
		if ('zebra' in $$new_props) $$invalidate(10, zebra = $$new_props.zebra);
		if ('sortable' in $$new_props) $$invalidate(11, sortable = $$new_props.sortable);
		if ('sortKey' in $$new_props) $$invalidate(0, sortKey = $$new_props.sortKey);
		if ('sortDirection' in $$new_props) $$invalidate(1, sortDirection = $$new_props.sortDirection);
		if ('expandable' in $$new_props) $$invalidate(4, expandable = $$new_props.expandable);
		if ('batchExpansion' in $$new_props) $$invalidate(12, batchExpansion = $$new_props.batchExpansion);
		if ('expandedRowIds' in $$new_props) $$invalidate(2, expandedRowIds = $$new_props.expandedRowIds);
		if ('nonExpandableRowIds' in $$new_props) $$invalidate(13, nonExpandableRowIds = $$new_props.nonExpandableRowIds);
		if ('radio' in $$new_props) $$invalidate(14, radio = $$new_props.radio);
		if ('selectable' in $$new_props) $$invalidate(5, selectable = $$new_props.selectable);
		if ('batchSelection' in $$new_props) $$invalidate(15, batchSelection = $$new_props.batchSelection);
		if ('selectedRowIds' in $$new_props) $$invalidate(3, selectedRowIds = $$new_props.selectedRowIds);
		if ('nonSelectableRowIds' in $$new_props) $$invalidate(16, nonSelectableRowIds = $$new_props.nonSelectableRowIds);
		if ('stickyHeader' in $$new_props) $$invalidate(17, stickyHeader = $$new_props.stickyHeader);
		if ('useStaticWidth' in $$new_props) $$invalidate(18, useStaticWidth = $$new_props.useStaticWidth);
		if ('pageSize' in $$new_props) $$invalidate(40, pageSize = $$new_props.pageSize);
		if ('page' in $$new_props) $$invalidate(41, page = $$new_props.page);
		if ('$$scope' in $$new_props) $$invalidate(62, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*headers*/ 64) {
			$$invalidate(32, thKeys = headers.reduce((a, c) => ({ ...a, [c.key]: c.key }), {}));
		}

		if ($$self.$$.dirty[0] & /*expandedRowIds*/ 4) {
			$$invalidate(31, expandedRows = expandedRowIds.reduce((a, id) => ({ ...a, [id]: true }), {}));
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds*/ 8) {
			batchSelectedIds.set(selectedRowIds);
		}

		if ($$self.$$.dirty[0] & /*headers*/ 64) {
			$$invalidate(45, headerKeys = headers.map(({ key }) => key));
		}

		if ($$self.$$.dirty[0] & /*headers*/ 64 | $$self.$$.dirty[1] & /*rows, headerKeys*/ 16640) {
			$$invalidate(28, tableCellsByRowId = rows.reduce(
				(rows, row) => {
					rows[row.id] = headerKeys.map((key, index) => ({
						key,
						value: resolvePath(row, key),
						display: headers[index].display
					}));

					return rows;
				},
				{}
			));
		}

		if ($$self.$$.dirty[1] & /*rows*/ 256) {
			set_store_value(tableRows, $tableRows = rows, $tableRows);
		}

		if ($$self.$$.dirty[1] & /*$tableRows*/ 65536) {
			$$invalidate(46, rowIds = $tableRows.map(row => row.id));
		}

		if ($$self.$$.dirty[0] & /*nonExpandableRowIds*/ 8192 | $$self.$$.dirty[1] & /*rowIds*/ 32768) {
			$$invalidate(20, expandableRowIds = rowIds.filter(id => !nonExpandableRowIds.includes(id)));
		}

		if ($$self.$$.dirty[0] & /*nonSelectableRowIds*/ 65536 | $$self.$$.dirty[1] & /*rowIds*/ 32768) {
			$$invalidate(21, selectableRowIds = rowIds.filter(id => !nonSelectableRowIds.includes(id)));
		}

		if ($$self.$$.dirty[0] & /*selectableRowIds, selectedRowIds*/ 2097160) {
			$$invalidate(30, selectAll = selectableRowIds.length > 0 && selectedRowIds.length === selectableRowIds.length);
		}

		if ($$self.$$.dirty[0] & /*selectedRowIds, selectableRowIds*/ 2097160) {
			$$invalidate(29, indeterminate = selectedRowIds.length > 0 && selectedRowIds.length < selectableRowIds.length);
		}

		if ($$self.$$.dirty[0] & /*batchExpansion, expandedRowIds, expandableRowIds*/ 1052676) {
			if (batchExpansion) {
				$$invalidate(4, expandable = true);
				$$invalidate(22, expanded = expandedRowIds.length === expandableRowIds.length);
			}
		}

		if ($$self.$$.dirty[0] & /*radio, batchSelection*/ 49152) {
			if (radio || batchSelection) $$invalidate(5, selectable = true);
		}

		if ($$self.$$.dirty[1] & /*$tableRows*/ 65536) {
			$$invalidate(42, sortedRows = [...$tableRows]);
		}

		if ($$self.$$.dirty[0] & /*sortDirection*/ 2) {
			$$invalidate(43, ascending = sortDirection === "ascending");
		}

		if ($$self.$$.dirty[0] & /*sortable, sortKey*/ 2049) {
			$$invalidate(19, sorting = sortable && sortKey != null);
		}

		if ($$self.$$.dirty[0] & /*headers, sortKey*/ 65) {
			$$invalidate(44, sortingHeader = headers.find(header => header.key === sortKey));
		}

		if ($$self.$$.dirty[0] & /*sorting, sortDirection, sortKey*/ 524291 | $$self.$$.dirty[1] & /*$tableRows, ascending, sortingHeader*/ 77824) {
			if (sorting) {
				if (sortDirection === "none") {
					$$invalidate(42, sortedRows = $tableRows);
				} else {
					$$invalidate(42, sortedRows = [...$tableRows].sort((a, b) => {
						const itemA = ascending
						? resolvePath(a, sortKey)
						: resolvePath(b, sortKey);

						const itemB = ascending
						? resolvePath(b, sortKey)
						: resolvePath(a, sortKey);

						if (sortingHeader?.sort) return sortingHeader.sort(itemA, itemB);
						if (typeof itemA === "number" && typeof itemB === "number") return itemA - itemB;
						if ([itemA, itemB].every(item => !item && item !== 0)) return 0;
						if (!itemA && itemA !== 0) return ascending ? 1 : -1;
						if (!itemB && itemB !== 0) return ascending ? -1 : 1;
						return itemA.toString().localeCompare(itemB.toString(), "en", { numeric: true });
					}));
				}
			}
		}

		if ($$self.$$.dirty[1] & /*$tableRows, page, pageSize*/ 67072) {
			$$invalidate(27, displayedRows = getDisplayedRows($tableRows, page, pageSize));
		}

		if ($$self.$$.dirty[1] & /*sortedRows, page, pageSize*/ 3584) {
			$$invalidate(26, displayedSortedRows = getDisplayedRows(sortedRows, page, pageSize));
		}

		if ($$self.$$.dirty[0] & /*headers*/ 64) {
			$$invalidate(25, hasCustomHeaderWidth = headers.some(header => header.width || header.minWidth));
		}
	};

	return [
		sortKey,
		sortDirection,
		expandedRowIds,
		selectedRowIds,
		expandable,
		selectable,
		headers,
		size,
		title,
		description,
		zebra,
		sortable,
		batchExpansion,
		nonExpandableRowIds,
		radio,
		batchSelection,
		nonSelectableRowIds,
		stickyHeader,
		useStaticWidth,
		sorting,
		expandableRowIds,
		selectableRowIds,
		expanded,
		parentRowId,
		refSelectAll,
		hasCustomHeaderWidth,
		displayedSortedRows,
		displayedRows,
		tableCellsByRowId,
		indeterminate,
		selectAll,
		expandedRows,
		thKeys,
		sortDirectionMap,
		dispatch,
		tableRows,
		formatHeaderWidth,
		$$restProps,
		$$slots,
		rows,
		pageSize,
		page,
		sortedRows,
		ascending,
		sortingHeader,
		headerKeys,
		rowIds,
		$tableRows,
		slots,
		click_handler,
		inlinecheckbox_ref_binding,
		change_handler,
		click_handler_1,
		click_handler_2,
		change_handler_1,
		change_handler_2,
		click_handler_3,
		click_handler_4,
		mouseenter_handler,
		mouseleave_handler,
		mouseenter_handler_1,
		mouseleave_handler_1,
		$$scope
	];
}

class DataTable extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2m,
			create_fragment$2l,
			safe_not_equal,
			{
				headers: 6,
				rows: 39,
				size: 7,
				title: 8,
				description: 9,
				zebra: 10,
				sortable: 11,
				sortKey: 0,
				sortDirection: 1,
				expandable: 4,
				batchExpansion: 12,
				expandedRowIds: 2,
				nonExpandableRowIds: 13,
				radio: 14,
				selectable: 5,
				batchSelection: 15,
				selectedRowIds: 3,
				nonSelectableRowIds: 16,
				stickyHeader: 17,
				useStaticWidth: 18,
				pageSize: 40,
				page: 41
			},
			null,
			[-1, -1, -1]
		);
	}
}

var DataTable$1 = DataTable;

/* src/DataTable/DataTableSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$f(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

// (50:2) {#if showHeader}
function create_if_block_2$k(ctx) {
	let div2;
	let div0;
	let t;
	let div1;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			toggle_class(div0, "bx--data-table-header__title", true);
			toggle_class(div1, "bx--data-table-header__description", true);
			toggle_class(div2, "bx--data-table-header", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
		},
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

// (56:2) {#if showToolbar}
function create_if_block_1$u(ctx) {
	let section;
	let div;
	let span;

	return {
		c() {
			section = element("section");
			div = element("div");
			span = element("span");
			toggle_class(span, "bx--skeleton", true);
			toggle_class(span, "bx--btn", true);
			toggle_class(span, "bx--btn--sm", true);
			toggle_class(div, "bx--toolbar-content", true);
			attr(section, "aria-label", "data table toolbar");
			toggle_class(section, "bx--table-toolbar", true);
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div);
			append(div, span);
		},
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

// (83:10) {:else}
function create_else_block$h(ctx) {
	let th;
	let t_value = (/*values*/ ctx[6][/*col*/ ctx[17]] || "") + "";
	let t;

	return {
		c() {
			th = element("th");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, t);
		},
		p(ctx, dirty) {
			if (dirty & /*values, cols*/ 96 && t_value !== (t_value = (/*values*/ ctx[6][/*col*/ ctx[17]] || "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (81:10) {#if typeof values[col] === "object" && values[col].empty === true}
function create_if_block$1f(ctx) {
	let th;

	return {
		c() {
			th = element("th");
		},
		m(target, anchor) {
			insert(target, th, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(th);
		}
	};
}

// (80:8) {#each cols as col (col)}
function create_each_block_2(key_1, ctx) {
	let first;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (typeof /*values*/ ctx[6][/*col*/ ctx[17]] === "object" && /*values*/ ctx[6][/*col*/ ctx[17]].empty === true) return create_if_block$1f;
		return create_else_block$h;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(first);
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (92:10) {#each cols as col (col)}
function create_each_block_1$2(key_1, ctx) {
	let td;

	return {
		key: key_1,
		first: null,
		c() {
			td = element("td");
			td.innerHTML = `<span></span>`;
			this.first = td;
		},
		m(target, anchor) {
			insert(target, td, anchor);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(td);
		}
	};
}

// (90:6) {#each Array.from({ length: rows }, (_, i) => i) as row (row)}
function create_each_block$f(key_1, ctx) {
	let tr;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t;
	let each_value_1 = /*cols*/ ctx[5];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$2(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$2(key));
	}

	return {
		key: key_1,
		first: null,
		c() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.first = tr;
		},
		m(target, anchor) {
			insert(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append(tr, t);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*cols*/ 32) {
				each_value_1 = /*cols*/ ctx[5];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, tr, destroy_block, create_each_block_1$2, t, get_each_context_1$2);
			}
		},
		d(detaching) {
			if (detaching) detach(tr);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function create_fragment$2k(ctx) {
	let div;
	let t0;
	let t1;
	let table;
	let thead;
	let tr;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t2;
	let tbody;
	let each_blocks = [];
	let each1_lookup = new Map();
	let mounted;
	let dispose;
	let if_block0 = /*showHeader*/ ctx[3] && create_if_block_2$k();
	let if_block1 = /*showToolbar*/ ctx[4] && create_if_block_1$u();
	let each_value_2 = /*cols*/ ctx[5];
	const get_key = ctx => /*col*/ ctx[17];

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_2(key, child_ctx));
	}

	let each_value = Array.from({ length: /*rows*/ ctx[0] }, func$5);
	const get_key_1 = ctx => /*row*/ ctx[14];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$f(ctx, each_value, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block$f(key, child_ctx));
	}

	let div_levels = [/*$$restProps*/ ctx[7]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			table = element("table");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(table, "bx--skeleton", true);
			toggle_class(table, "bx--data-table", true);
			toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === 'compact');
			toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === 'short');
			toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === 'tall');
			toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			append(div, table);
			append(table, thead);
			append(thead, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append(table, t2);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			if (!mounted) {
				dispose = [
					listen(table, "click", /*click_handler*/ ctx[10]),
					listen(table, "mouseover", /*mouseover_handler*/ ctx[11]),
					listen(table, "mouseenter", /*mouseenter_handler*/ ctx[12]),
					listen(table, "mouseleave", /*mouseleave_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showHeader*/ ctx[3]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_2$k();
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*showToolbar*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$u();
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*values, cols*/ 96) {
				each_value_2 = /*cols*/ ctx[5];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_2, each0_lookup, tr, destroy_block, create_each_block_2, null, get_each_context_2);
			}

			if (dirty & /*cols, rows*/ 33) {
				each_value = Array.from({ length: /*rows*/ ctx[0] }, func$5);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, tbody, destroy_block, create_each_block$f, null, get_each_context$f);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--compact", /*size*/ ctx[1] === 'compact');
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--short", /*size*/ ctx[1] === 'short');
			}

			if (dirty & /*size*/ 2) {
				toggle_class(table, "bx--data-table--tall", /*size*/ ctx[1] === 'tall');
			}

			if (dirty & /*zebra*/ 4) {
				toggle_class(table, "bx--data-table--zebra", /*zebra*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]]));
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--data-table-container", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$5 = (_, i) => i;

function instance$2l($$self, $$props, $$invalidate) {
	let values;
	let cols;
	const omit_props_names = ["columns","rows","size","zebra","showHeader","headers","showToolbar"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { columns = 5 } = $$props;
	let { rows = 5 } = $$props;
	let { size = undefined } = $$props;
	let { zebra = false } = $$props;
	let { showHeader = true } = $$props;
	let { headers = [] } = $$props;
	let { showToolbar = true } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('columns' in $$new_props) $$invalidate(8, columns = $$new_props.columns);
		if ('rows' in $$new_props) $$invalidate(0, rows = $$new_props.rows);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('zebra' in $$new_props) $$invalidate(2, zebra = $$new_props.zebra);
		if ('showHeader' in $$new_props) $$invalidate(3, showHeader = $$new_props.showHeader);
		if ('headers' in $$new_props) $$invalidate(9, headers = $$new_props.headers);
		if ('showToolbar' in $$new_props) $$invalidate(4, showToolbar = $$new_props.showToolbar);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*headers*/ 512) {
			$$invalidate(6, values = headers.map(header => header.value !== undefined ? header.value : header));
		}

		if ($$self.$$.dirty & /*headers, columns*/ 768) {
			$$invalidate(5, cols = Array.from(
				{
					length: headers.length > 0 ? headers.length : columns
				},
				(_, i) => i
			));
		}
	};

	return [
		rows,
		size,
		zebra,
		showHeader,
		showToolbar,
		cols,
		values,
		$$restProps,
		columns,
		headers,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DataTableSkeleton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2l, create_fragment$2k, safe_not_equal, {
			columns: 8,
			rows: 0,
			size: 1,
			zebra: 2,
			showHeader: 3,
			headers: 9,
			showToolbar: 4
		});
	}
}

var DataTableSkeleton$1 = DataTableSkeleton;

/* src/DataTable/Toolbar.svelte generated by Svelte v3.49.0 */

function create_fragment$2j(ctx) {
	let section;
	let section_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let section_levels = [
		{ "aria-label": "data table toolbar" },
		/*$$restProps*/ ctx[2],
		{
			style: section_style_value = "z-index: 1; " + /*$$restProps*/ ctx[2].style
		}
	];

	let section_data = {};

	for (let i = 0; i < section_levels.length; i += 1) {
		section_data = assign(section_data, section_levels[i]);
	}

	return {
		c() {
			section = element("section");
			if (default_slot) default_slot.c();
			set_attributes(section, section_data);
			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === 'sm');
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === 'default');
		},
		m(target, anchor) {
			insert(target, section, anchor);

			if (default_slot) {
				default_slot.m(section, null);
			}

			/*section_binding*/ ctx[5](section);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(section, section_data = get_spread_update(section_levels, [
				{ "aria-label": "data table toolbar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*$$restProps*/ 4 && section_style_value !== (section_style_value = "z-index: 1; " + /*$$restProps*/ ctx[2].style)) && { style: section_style_value }
			]));

			toggle_class(section, "bx--table-toolbar", true);
			toggle_class(section, "bx--table-toolbar--small", /*size*/ ctx[0] === 'sm');
			toggle_class(section, "bx--table-toolbar--normal", /*size*/ ctx[0] === 'default');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			if (default_slot) default_slot.d(detaching);
			/*section_binding*/ ctx[5](null);
		}
	};
}

function instance$2k($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = "default" } = $$props;
	let ref = null;
	const overflowVisible = writable(false);

	setContext("Toolbar", {
		overflowVisible,
		setOverflowVisible: visible => {
			overflowVisible.set(visible);
			if (ref) $$invalidate(1, ref.style.overflow = visible ? "visible" : "inherit", ref);
		}
	});

	function section_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [size, ref, $$restProps, $$scope, slots, section_binding];
}

class Toolbar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2k, create_fragment$2j, safe_not_equal, { size: 0 });
	}
}

var Toolbar$1 = Toolbar;

/* src/DataTable/ToolbarContent.svelte generated by Svelte v3.49.0 */

function create_fragment$2i(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--toolbar-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$2j($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class ToolbarContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2j, create_fragment$2i, safe_not_equal, {});
	}
}

var ToolbarContent$1 = ToolbarContent;

/* src/icons/IconSearch.svelte generated by Svelte v3.49.0 */

function create_if_block$1e(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2h(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$1e(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M29,27.5859l-7.5521-7.5521a11.0177,11.0177,0,1,0-1.4141,1.4141L27.5859,29ZM4,13a9,9,0,1,1,9,9A9.01,9.01,0,0,1,4,13Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1e(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2i($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class IconSearch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2i, create_fragment$2h, safe_not_equal, { size: 0, title: 1 });
	}
}

var IconSearch$1 = IconSearch;

/* src/Search/SearchSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$2g(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t = space();
			div0 = element("div");
			toggle_class(span, "bx--label", true);
			toggle_class(div0, "bx--search-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[0] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[0] === 'xl');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[0] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[0] === 'xl');
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2h($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = "xl" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
	};

	return [
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SearchSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2h, create_fragment$2g, safe_not_equal, { size: 0 });
	}
}

var SearchSkeleton$1 = SearchSkeleton;

/* src/Search/Search.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$e = dirty => ({});
const get_labelText_slot_context$e = ctx => ({});

// (90:0) {:else}
function create_else_block$g(ctx) {
	let div1;
	let div0;
	let switch_instance0;
	let t0;
	let label;
	let label_id_value;
	let t1;
	let input;
	let input_autofocus_value;
	let t2;
	let button;
	let switch_instance1;
	let div1_aria_labelledby_value;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[14];

	function switch_props(ctx) {
		return {
			props: { class: "bx--search-magnifier-icon" }
		};
	}

	if (switch_value) {
		switch_instance0 = new switch_value(switch_props());
	}

	const labelText_slot_template = /*#slots*/ ctx[20].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[19], get_labelText_slot_context$e);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$D(ctx);

	let input_levels = [
		{ type: "text" },
		{ role: "searchbox" },
		{
			autofocus: input_autofocus_value = /*autofocus*/ ctx[11] === true ? true : undefined
		},
		{ autocomplete: /*autocomplete*/ ctx[10] },
		{ disabled: /*disabled*/ ctx[7] },
		{ id: /*id*/ ctx[15] },
		{ placeholder: /*placeholder*/ ctx[9] },
		/*$$restProps*/ ctx[18]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	var switch_value_1 = Close$1;

	function switch_props_1(ctx) {
		return {
			props: { size: /*size*/ ctx[3] === 'xl' ? 20 : 16 }
		};
	}

	if (switch_value_1) {
		switch_instance1 = new switch_value_1(switch_props_1(ctx));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (switch_instance0) create_component(switch_instance0.$$.fragment);
			t0 = space();
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			input = element("input");
			t2 = space();
			button = element("button");
			if (switch_instance1) create_component(switch_instance1.$$.fragment);
			toggle_class(div0, "bx--search-magnifier", true);
			attr(label, "id", label_id_value = "" + (/*id*/ ctx[15] + "-search"));
			attr(label, "for", /*id*/ ctx[15]);
			toggle_class(label, "bx--label", true);
			set_attributes(input, input_data);
			toggle_class(input, "bx--search-input", true);
			attr(button, "type", "button");
			attr(button, "aria-label", /*closeButtonLabelText*/ ctx[12]);
			button.disabled = /*disabled*/ ctx[7];
			toggle_class(button, "bx--search-close", true);
			toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
			attr(div1, "role", "search");
			attr(div1, "aria-labelledby", div1_aria_labelledby_value = "" + (/*id*/ ctx[15] + "-search"));
			attr(div1, "class", /*searchClass*/ ctx[4]);
			toggle_class(div1, "bx--search", true);
			toggle_class(div1, "bx--search--light", /*light*/ ctx[6]);
			toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[7]);
			toggle_class(div1, "bx--search--sm", /*size*/ ctx[3] === 'sm');
			toggle_class(div1, "bx--search--lg", /*size*/ ctx[3] === 'lg');
			toggle_class(div1, "bx--search--xl", /*size*/ ctx[3] === 'xl');
			toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[8]);
			toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (switch_instance0) {
				mount_component(switch_instance0, div0, null);
			}

			/*div0_binding*/ ctx[33](div0);
			append(div1, t0);
			append(div1, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div1, t1);
			append(div1, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[35](input);
			set_input_value(input, /*value*/ ctx[2]);
			append(div1, t2);
			append(div1, button);

			if (switch_instance1) {
				mount_component(switch_instance1, button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler_2*/ ctx[34]),
					listen(input, "input", /*input_input_handler*/ ctx[36]),
					listen(input, "change", /*change_handler*/ ctx[22]),
					listen(input, "input", /*input_handler*/ ctx[23]),
					listen(input, "focus", /*focus_handler*/ ctx[24]),
					listen(input, "focus", /*focus_handler_1*/ ctx[37]),
					listen(input, "blur", /*blur_handler*/ ctx[25]),
					listen(input, "blur", /*blur_handler_1*/ ctx[38]),
					listen(input, "keydown", /*keydown_handler*/ ctx[26]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[39]),
					listen(input, "keyup", /*keyup_handler*/ ctx[27]),
					listen(input, "paste", /*paste_handler*/ ctx[28]),
					listen(button, "click", /*click_handler_1*/ ctx[21]),
					listen(button, "click", /*click_handler_3*/ ctx[40])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[14])) {
				if (switch_instance0) {
					group_outros();
					const old_component = switch_instance0;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance0 = new switch_value(switch_props());
					create_component(switch_instance0.$$.fragment);
					transition_in(switch_instance0.$$.fragment, 1);
					mount_component(switch_instance0, div0, null);
				} else {
					switch_instance0 = null;
				}
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[19], dirty, get_labelText_slot_changes$e),
						get_labelText_slot_context$e
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 8192)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 32768 && label_id_value !== (label_id_value = "" + (/*id*/ ctx[15] + "-search"))) {
				attr(label, "id", label_id_value);
			}

			if (!current || dirty[0] & /*id*/ 32768) {
				attr(label, "for", /*id*/ ctx[15]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "text" },
				{ role: "searchbox" },
				(!current || dirty[0] & /*autofocus*/ 2048 && input_autofocus_value !== (input_autofocus_value = /*autofocus*/ ctx[11] === true ? true : undefined)) && { autofocus: input_autofocus_value },
				(!current || dirty[0] & /*autocomplete*/ 1024) && { autocomplete: /*autocomplete*/ ctx[10] },
				(!current || dirty[0] & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
				(!current || dirty[0] & /*id*/ 32768) && { id: /*id*/ ctx[15] },
				(!current || dirty[0] & /*placeholder*/ 512) && { placeholder: /*placeholder*/ ctx[9] },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			if (dirty[0] & /*value*/ 4 && input.value !== /*value*/ ctx[2]) {
				set_input_value(input, /*value*/ ctx[2]);
			}

			toggle_class(input, "bx--search-input", true);
			const switch_instance1_changes = {};
			if (dirty[0] & /*size*/ 8) switch_instance1_changes.size = /*size*/ ctx[3] === 'xl' ? 20 : 16;

			if (switch_value_1 !== (switch_value_1 = Close$1)) {
				if (switch_instance1) {
					group_outros();
					const old_component = switch_instance1;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value_1) {
					switch_instance1 = new switch_value_1(switch_props_1(ctx));
					create_component(switch_instance1.$$.fragment);
					transition_in(switch_instance1.$$.fragment, 1);
					mount_component(switch_instance1, button, null);
				} else {
					switch_instance1 = null;
				}
			} else if (switch_value_1) {
				switch_instance1.$set(switch_instance1_changes);
			}

			if (!current || dirty[0] & /*closeButtonLabelText*/ 4096) {
				attr(button, "aria-label", /*closeButtonLabelText*/ ctx[12]);
			}

			if (!current || dirty[0] & /*disabled*/ 128) {
				button.disabled = /*disabled*/ ctx[7];
			}

			if (dirty[0] & /*value*/ 4) {
				toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
			}

			if (!current || dirty[0] & /*id*/ 32768 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = "" + (/*id*/ ctx[15] + "-search"))) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (!current || dirty[0] & /*searchClass*/ 16) {
				attr(div1, "class", /*searchClass*/ ctx[4]);
			}

			if (dirty[0] & /*searchClass*/ 16) {
				toggle_class(div1, "bx--search", true);
			}

			if (dirty[0] & /*searchClass, light*/ 80) {
				toggle_class(div1, "bx--search--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*searchClass, disabled*/ 144) {
				toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[7]);
			}

			if (dirty[0] & /*searchClass, size*/ 24) {
				toggle_class(div1, "bx--search--sm", /*size*/ ctx[3] === 'sm');
			}

			if (dirty[0] & /*searchClass, size*/ 24) {
				toggle_class(div1, "bx--search--lg", /*size*/ ctx[3] === 'lg');
			}

			if (dirty[0] & /*searchClass, size*/ 24) {
				toggle_class(div1, "bx--search--xl", /*size*/ ctx[3] === 'xl');
			}

			if (dirty[0] & /*searchClass, expandable*/ 272) {
				toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[8]);
			}

			if (dirty[0] & /*searchClass, expanded*/ 17) {
				toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance0) transition_in(switch_instance0.$$.fragment, local);
			transition_in(labelText_slot_or_fallback, local);
			if (switch_instance1) transition_in(switch_instance1.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance0) transition_out(switch_instance0.$$.fragment, local);
			transition_out(labelText_slot_or_fallback, local);
			if (switch_instance1) transition_out(switch_instance1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (switch_instance0) destroy_component(switch_instance0);
			/*div0_binding*/ ctx[33](null);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			/*input_binding*/ ctx[35](null);
			if (switch_instance1) destroy_component(switch_instance1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (81:0) {#if skeleton}
function create_if_block$1d(ctx) {
	let searchskeleton;
	let current;
	const searchskeleton_spread_levels = [{ size: /*size*/ ctx[3] }, /*$$restProps*/ ctx[18]];
	let searchskeleton_props = {};

	for (let i = 0; i < searchskeleton_spread_levels.length; i += 1) {
		searchskeleton_props = assign(searchskeleton_props, searchskeleton_spread_levels[i]);
	}

	searchskeleton = new SearchSkeleton$1({ props: searchskeleton_props });
	searchskeleton.$on("click", /*click_handler*/ ctx[29]);
	searchskeleton.$on("mouseover", /*mouseover_handler*/ ctx[30]);
	searchskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[31]);
	searchskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[32]);

	return {
		c() {
			create_component(searchskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(searchskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const searchskeleton_changes = (dirty[0] & /*size, $$restProps*/ 262152)
			? get_spread_update(searchskeleton_spread_levels, [
					dirty[0] & /*size*/ 8 && { size: /*size*/ ctx[3] },
					dirty[0] & /*$$restProps*/ 262144 && get_spread_object(/*$$restProps*/ ctx[18])
				])
			: {};

			searchskeleton.$set(searchskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(searchskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(searchskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(searchskeleton, detaching);
		}
	};
}

// (114:29)          
function fallback_block$D(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 8192) set_data(t, /*labelText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$2f(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1d, create_else_block$g];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2g($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"value","size","searchClass","skeleton","light","disabled","expandable","expanded","placeholder","autocomplete","autofocus","closeButtonLabelText","labelText","icon","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { size = "xl" } = $$props;
	let { searchClass = "" } = $$props;
	let { skeleton = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { expandable = false } = $$props;
	let { expanded = false } = $$props;
	let { placeholder = "Search..." } = $$props;
	let { autocomplete = "off" } = $$props;
	let { autofocus = false } = $$props;
	let { closeButtonLabelText = "Clear search input" } = $$props;
	let { labelText = "" } = $$props;
	let { icon = IconSearch$1 } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let searchRef = null;

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			searchRef = $$value;
			$$invalidate(16, searchRef);
		});
	}

	const click_handler_2 = () => {
		if (expandable) $$invalidate(0, expanded = true);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(2, value);
	}

	const focus_handler_1 = () => {
		if (expandable) $$invalidate(0, expanded = true);
	};

	const blur_handler_1 = () => {
		if (expanded && value.trim().length === 0) {
			$$invalidate(0, expanded = false);
		}
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Escape') {
			$$invalidate(2, value = '');
			dispatch('clear');
		}
	};

	const click_handler_3 = () => {
		$$invalidate(2, value = '');
		ref.focus();
		dispatch('clear');
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(2, value = $$new_props.value);
		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ('searchClass' in $$new_props) $$invalidate(4, searchClass = $$new_props.searchClass);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('expandable' in $$new_props) $$invalidate(8, expandable = $$new_props.expandable);
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('placeholder' in $$new_props) $$invalidate(9, placeholder = $$new_props.placeholder);
		if ('autocomplete' in $$new_props) $$invalidate(10, autocomplete = $$new_props.autocomplete);
		if ('autofocus' in $$new_props) $$invalidate(11, autofocus = $$new_props.autofocus);
		if ('closeButtonLabelText' in $$new_props) $$invalidate(12, closeButtonLabelText = $$new_props.closeButtonLabelText);
		if ('labelText' in $$new_props) $$invalidate(13, labelText = $$new_props.labelText);
		if ('icon' in $$new_props) $$invalidate(14, icon = $$new_props.icon);
		if ('id' in $$new_props) $$invalidate(15, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*expanded, ref*/ 3) {
			if (expanded && ref) ref.focus();
		}

		if ($$self.$$.dirty[0] & /*expanded*/ 1) {
			dispatch(expanded ? "expand" : "collapse");
		}
	};

	return [
		expanded,
		ref,
		value,
		size,
		searchClass,
		skeleton,
		light,
		disabled,
		expandable,
		placeholder,
		autocomplete,
		autofocus,
		closeButtonLabelText,
		labelText,
		icon,
		id,
		searchRef,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler_1,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		keydown_handler,
		keyup_handler,
		paste_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		click_handler_2,
		input_binding,
		input_input_handler,
		focus_handler_1,
		blur_handler_1,
		keydown_handler_1,
		click_handler_3
	];
}

class Search extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2g,
			create_fragment$2f,
			safe_not_equal,
			{
				value: 2,
				size: 3,
				searchClass: 4,
				skeleton: 5,
				light: 6,
				disabled: 7,
				expandable: 8,
				expanded: 0,
				placeholder: 9,
				autocomplete: 10,
				autofocus: 11,
				closeButtonLabelText: 12,
				labelText: 13,
				icon: 14,
				id: 15,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var Search$1 = Search;

/* src/DataTable/ToolbarSearch.svelte generated by Svelte v3.49.0 */

function create_fragment$2e(ctx) {
	let search;
	let updating_ref;
	let updating_value;
	let current;

	const search_spread_levels = [
		{ tabindex: /*tabindex*/ ctx[5] },
		{ disabled: /*disabled*/ ctx[4] },
		/*$$restProps*/ ctx[9],
		{
			searchClass: "" + (/*classes*/ ctx[6] + " " + /*$$restProps*/ ctx[9].class)
		}
	];

	function search_ref_binding(value) {
		/*search_ref_binding*/ ctx[14](value);
	}

	function search_value_binding(value) {
		/*search_value_binding*/ ctx[15](value);
	}

	let search_props = {};

	for (let i = 0; i < search_spread_levels.length; i += 1) {
		search_props = assign(search_props, search_spread_levels[i]);
	}

	if (/*ref*/ ctx[2] !== void 0) {
		search_props.ref = /*ref*/ ctx[2];
	}

	if (/*value*/ ctx[0] !== void 0) {
		search_props.value = /*value*/ ctx[0];
	}

	search = new Search$1({ props: search_props });
	binding_callbacks.push(() => bind(search, 'ref', search_ref_binding));
	binding_callbacks.push(() => bind(search, 'value', search_value_binding));
	search.$on("clear", /*clear_handler*/ ctx[16]);
	search.$on("clear", /*expandSearch*/ ctx[8]);
	search.$on("change", /*change_handler*/ ctx[17]);
	search.$on("input", /*input_handler*/ ctx[18]);
	search.$on("focus", /*focus_handler*/ ctx[19]);
	search.$on("focus", /*expandSearch*/ ctx[8]);
	search.$on("blur", /*blur_handler*/ ctx[20]);
	search.$on("blur", /*blur_handler_1*/ ctx[21]);

	return {
		c() {
			create_component(search.$$.fragment);
		},
		m(target, anchor) {
			mount_component(search, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const search_changes = (dirty & /*tabindex, disabled, $$restProps, classes*/ 624)
			? get_spread_update(search_spread_levels, [
					dirty & /*tabindex*/ 32 && { tabindex: /*tabindex*/ ctx[5] },
					dirty & /*disabled*/ 16 && { disabled: /*disabled*/ ctx[4] },
					dirty & /*$$restProps*/ 512 && get_spread_object(/*$$restProps*/ ctx[9]),
					dirty & /*classes, $$restProps*/ 576 && {
						searchClass: "" + (/*classes*/ ctx[6] + " " + /*$$restProps*/ ctx[9].class)
					}
				])
			: {};

			if (!updating_ref && dirty & /*ref*/ 4) {
				updating_ref = true;
				search_changes.ref = /*ref*/ ctx[2];
				add_flush_callback(() => updating_ref = false);
			}

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				search_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			search.$set(search_changes);
		},
		i(local) {
			if (current) return;
			transition_in(search.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(search.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(search, detaching);
		}
	};
}

function instance$2f($$self, $$props, $$invalidate) {
	let originalRows;
	let classes;

	const omit_props_names = [
		"value","expanded","persistent","disabled","shouldFilterRows","filteredRowIds","tabindex","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $tableRows;
	let { value = "" } = $$props;
	let { expanded = false } = $$props;
	let { persistent = false } = $$props;
	let { disabled = false } = $$props;
	let { shouldFilterRows = false } = $$props;
	let { filteredRowIds = [] } = $$props;
	let { tabindex = "0" } = $$props;
	let { ref = null } = $$props;
	const { tableRows } = getContext("DataTable") ?? {};
	component_subscribe($$self, tableRows, value => $$invalidate(13, $tableRows = value));

	async function expandSearch() {
		await tick();
		if (disabled || persistent || expanded) return;
		$$invalidate(1, expanded = true);
		await tick();
		ref.focus();
	}

	function search_ref_binding(value) {
		ref = value;
		$$invalidate(2, ref);
	}

	function search_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const blur_handler_1 = () => {
		$$invalidate(1, expanded = !persistent && !!value.length);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('expanded' in $$new_props) $$invalidate(1, expanded = $$new_props.expanded);
		if ('persistent' in $$new_props) $$invalidate(3, persistent = $$new_props.persistent);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('shouldFilterRows' in $$new_props) $$invalidate(11, shouldFilterRows = $$new_props.shouldFilterRows);
		if ('filteredRowIds' in $$new_props) $$invalidate(10, filteredRowIds = $$new_props.filteredRowIds);
		if ('tabindex' in $$new_props) $$invalidate(5, tabindex = $$new_props.tabindex);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$tableRows*/ 8192) {
			$$invalidate(12, originalRows = tableRows ? [...$tableRows] : []);
		}

		if ($$self.$$.dirty & /*shouldFilterRows, originalRows, value*/ 6145) {
			if (shouldFilterRows) {
				let rows = originalRows;

				if (value.trim().length > 0) {
					if (shouldFilterRows === true) {
						rows = rows.filter(row => {
							return Object.entries(row).filter(([key]) => key !== "id").some(([key, _value]) => {
								if (typeof _value === "string" || typeof _value === "number") {
									return (_value + "")?.toLowerCase().includes(value.trim().toLowerCase());
								}
							});
						});
					} else if (typeof shouldFilterRows === "function") {
						rows = rows.filter(row => shouldFilterRows(row, value) ?? false);
					}
				}

				tableRows.set(rows);
				$$invalidate(10, filteredRowIds = rows.map(row => row.id));
			}
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			$$invalidate(1, expanded = !!value.length);
		}

		if ($$self.$$.dirty & /*expanded, persistent, disabled*/ 26) {
			$$invalidate(6, classes = [
				expanded && "bx--toolbar-search-container-active",
				persistent
				? "bx--toolbar-search-container-persistent"
				: "bx--toolbar-search-container-expandable",
				disabled && "bx--toolbar-search-container-disabled"
			].filter(Boolean).join(" "));
		}
	};

	return [
		value,
		expanded,
		ref,
		persistent,
		disabled,
		tabindex,
		classes,
		tableRows,
		expandSearch,
		$$restProps,
		filteredRowIds,
		shouldFilterRows,
		originalRows,
		$tableRows,
		search_ref_binding,
		search_value_binding,
		clear_handler,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		blur_handler_1
	];
}

class ToolbarSearch extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2f, create_fragment$2e, safe_not_equal, {
			value: 0,
			expanded: 1,
			persistent: 3,
			disabled: 4,
			shouldFilterRows: 11,
			filteredRowIds: 10,
			tabindex: 5,
			ref: 2
		});
	}
}

var ToolbarSearch$1 = ToolbarSearch;

/* src/DataTable/ToolbarBatchActions.svelte generated by Svelte v3.49.0 */
const get_cancel_slot_changes = dirty => ({});
const get_cancel_slot_context = ctx => ({});

// (77:0) {#if !overflowVisible}
function create_if_block$1c(ctx) {
	let div2;
	let div0;
	let p;
	let span;
	let t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "";
	let t0;
	let t1;
	let div1;
	let t2;
	let button;
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	button = new Button$1({
			props: {
				class: "bx--batch-summary__cancel",
				tabindex: /*showActions*/ ctx[3] ? '0' : '-1',
				$$slots: { default: [create_default_slot$g] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*cancel*/ ctx[4]);
	let div2_levels = [/*$$restProps*/ ctx[5]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t2 = space();
			create_component(button.$$.fragment);
			toggle_class(p, "bx--batch-summary__para", true);
			toggle_class(div0, "bx--batch-summary", true);
			toggle_class(div1, "bx--action-list", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			append(p, span);
			append(span, t0);
			append(div2, t1);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div1, t2);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*formatTotalSelected, batchSelectedIds*/ 3) && t0_value !== (t0_value = /*formatTotalSelected*/ ctx[0](/*batchSelectedIds*/ ctx[1].length) + "")) set_data(t0, t0_value);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			const button_changes = {};
			if (dirty & /*showActions*/ 8) button_changes.tabindex = /*showActions*/ ctx[3] ? '0' : '-1';

			if (dirty & /*$$scope*/ 512) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]]));
			toggle_class(div2, "bx--batch-actions", true);
			toggle_class(div2, "bx--batch-actions--active", /*showActions*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (default_slot) default_slot.d(detaching);
			destroy_component(button);
		}
	};
}

// (95:28) Cancel
function fallback_block$C(ctx) {
	let t;

	return {
		c() {
			t = text("Cancel");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (90:6) <Button         class="bx--batch-summary__cancel"         tabindex="{showActions ? '0' : '-1'}"         on:click="{cancel}"       >
function create_default_slot$g(ctx) {
	let current;
	const cancel_slot_template = /*#slots*/ ctx[8].cancel;
	const cancel_slot = create_slot(cancel_slot_template, ctx, /*$$scope*/ ctx[9], get_cancel_slot_context);
	const cancel_slot_or_fallback = cancel_slot || fallback_block$C();

	return {
		c() {
			if (cancel_slot_or_fallback) cancel_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (cancel_slot_or_fallback) {
				cancel_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (cancel_slot) {
				if (cancel_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						cancel_slot,
						cancel_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(cancel_slot_template, /*$$scope*/ ctx[9], dirty, get_cancel_slot_changes),
						get_cancel_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(cancel_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(cancel_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (cancel_slot_or_fallback) cancel_slot_or_fallback.d(detaching);
		}
	};
}

function create_fragment$2d(ctx) {
	let if_block_anchor;
	let current;
	let if_block = !/*overflowVisible*/ ctx[2] && create_if_block$1c(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*overflowVisible*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*overflowVisible*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1c(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2e($$self, $$props, $$invalidate) {
	let showActions;
	const omit_props_names = ["formatTotalSelected","active"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { formatTotalSelected = totalSelected => `${totalSelected} item${totalSelected === 1 ? "" : "s"} selected` } = $$props;
	let { active = undefined } = $$props;
	let batchSelectedIds = [];
	let prevActive;
	const dispatch = createEventDispatcher();
	const ctx = getContext("DataTable");

	function cancel() {
		const shouldContinue = dispatch("cancel", null, { cancelable: true });

		if (shouldContinue) {
			ctx.resetSelectedRowIds();
		}
	}

	const unsubscribe = ctx.batchSelectedIds.subscribe(value => {
		$$invalidate(1, batchSelectedIds = value);
	});

	let overflowVisible = false;
	const ctxToolbar = getContext("Toolbar");

	const unsubscribeOverflow = ctxToolbar.overflowVisible.subscribe(value => {
		$$invalidate(2, overflowVisible = value);
	});

	onMount(() => {
		return () => {
			unsubscribe();
			unsubscribeOverflow();
		};
	});

	afterUpdate(() => {
		if (active === false && showActions) {
			$$invalidate(6, active = true);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('formatTotalSelected' in $$new_props) $$invalidate(0, formatTotalSelected = $$new_props.formatTotalSelected);
		if ('active' in $$new_props) $$invalidate(6, active = $$new_props.active);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*batchSelectedIds, active*/ 66) {
			$$invalidate(3, showActions = batchSelectedIds.length > 0 || active);
		}

		if ($$self.$$.dirty & /*prevActive, active*/ 192) {
			{
				if (prevActive !== active && active === false) {
					$$invalidate(3, showActions = false);
				}

				$$invalidate(7, prevActive = active);
			}
		}
	};

	return [
		formatTotalSelected,
		batchSelectedIds,
		overflowVisible,
		showActions,
		cancel,
		$$restProps,
		active,
		prevActive,
		slots,
		$$scope
	];
}

class ToolbarBatchActions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2e, create_fragment$2d, safe_not_equal, { formatTotalSelected: 0, active: 6 });
	}
}

var ToolbarBatchActions$1 = ToolbarBatchActions;

/* src/icons/Settings.svelte generated by Svelte v3.49.0 */

function create_if_block$1b(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2c(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$1b(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M27,16.76c0-.25,0-.5,0-.76s0-.51,0-.77l1.92-1.68A2,2,0,0,0,29.3,11L26.94,7a2,2,0,0,0-1.73-1,2,2,0,0,0-.64.1l-2.43.82a11.35,11.35,0,0,0-1.31-.75l-.51-2.52a2,2,0,0,0-2-1.61H13.64a2,2,0,0,0-2,1.61l-.51,2.52a11.48,11.48,0,0,0-1.32.75L7.43,6.06A2,2,0,0,0,6.79,6,2,2,0,0,0,5.06,7L2.7,11a2,2,0,0,0,.41,2.51L5,15.24c0,.25,0,.5,0,.76s0,.51,0,.77L3.11,18.45A2,2,0,0,0,2.7,21L5.06,25a2,2,0,0,0,1.73,1,2,2,0,0,0,.64-.1l2.43-.82a11.35,11.35,0,0,0,1.31.75l.51,2.52a2,2,0,0,0,2,1.61h4.72a2,2,0,0,0,2-1.61l.51-2.52a11.48,11.48,0,0,0,1.32-.75l2.42.82a2,2,0,0,0,.64.1,2,2,0,0,0,1.73-1L29.3,21a2,2,0,0,0-.41-2.51ZM25.21,24l-3.43-1.16a8.86,8.86,0,0,1-2.71,1.57L18.36,28H13.64l-.71-3.55a9.36,9.36,0,0,1-2.7-1.57L6.79,24,4.43,20l2.72-2.4a8.9,8.9,0,0,1,0-3.13L4.43,12,6.79,8l3.43,1.16a8.86,8.86,0,0,1,2.71-1.57L13.64,4h4.72l.71,3.55a9.36,9.36,0,0,1,2.7,1.57L25.21,8,27.57,12l-2.72,2.4a8.9,8.9,0,0,1,0,3.13L27.57,20Z");
			attr(path1, "d", "M16,22a6,6,0,1,1,6-6A5.94,5.94,0,0,1,16,22Zm0-10a3.91,3.91,0,0,0-4,4,3.91,3.91,0,0,0,4,4,3.91,3.91,0,0,0,4-4A3.91,3.91,0,0,0,16,12Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1b(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2d($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Settings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2d, create_fragment$2c, safe_not_equal, { size: 0, title: 1 });
	}
}

var Settings$1 = Settings;

/* src/icons/OverflowMenuVertical.svelte generated by Svelte v3.49.0 */

function create_if_block$1a(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2b(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let if_block = /*title*/ ctx[1] && create_if_block$1a(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			attr(circle0, "cx", "16");
			attr(circle0, "cy", "8");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "16");
			attr(circle2, "cy", "24");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1a(ctx);
					if_block.c();
					if_block.m(svg, circle0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2c($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class OverflowMenuVertical extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2c, create_fragment$2b, safe_not_equal, { size: 0, title: 1 });
	}
}

var OverflowMenuVertical$1 = OverflowMenuVertical;

/* src/icons/OverflowMenuHorizontal.svelte generated by Svelte v3.49.0 */

function create_if_block$19(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$2a(ctx) {
	let svg;
	let circle0;
	let circle1;
	let circle2;
	let if_block = /*title*/ ctx[1] && create_if_block$19(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			attr(circle0, "cx", "8");
			attr(circle0, "cy", "16");
			attr(circle0, "r", "2");
			attr(circle1, "cx", "16");
			attr(circle1, "cy", "16");
			attr(circle1, "r", "2");
			attr(circle2, "cx", "24");
			attr(circle2, "cy", "16");
			attr(circle2, "r", "2");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, circle0);
			append(svg, circle1);
			append(svg, circle2);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$19(ctx);
					if_block.c();
					if_block.m(svg, circle0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$2b($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class OverflowMenuHorizontal extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2b, create_fragment$2a, safe_not_equal, { size: 0, title: 1 });
	}
}

var OverflowMenuHorizontal$1 = OverflowMenuHorizontal;

/* src/OverflowMenu/OverflowMenu.svelte generated by Svelte v3.49.0 */
const get_menu_slot_changes = dirty => ({});
const get_menu_slot_context = ctx => ({});

// (233:20)      
function fallback_block$B(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				"aria-label": /*iconDescription*/ ctx[10],
				title: /*iconDescription*/ ctx[10],
				class: "bx--overflow-menu__icon " + /*iconClass*/ ctx[9]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes["aria-label"] = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconDescription*/ 1024) switch_instance_changes.title = /*iconDescription*/ ctx[10];
			if (dirty[0] & /*iconClass*/ 512) switch_instance_changes.class = "bx--overflow-menu__icon " + /*iconClass*/ ctx[9];

			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (241:2) {#if open}
function create_if_block$18(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[23].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			attr(ul, "role", "menu");
			attr(ul, "tabindex", "-1");
			attr(ul, "aria-label", /*ariaLabel*/ ctx[13]);
			attr(ul, "data-floating-menu-direction", /*direction*/ ctx[5]);
			attr(ul, "class", /*menuOptionsClass*/ ctx[8]);
			toggle_class(ul, "bx--overflow-menu-options", true);
			toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[7]);
			toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[6]);
			toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[4] === 'xl');
			toggle_class(ul, "bx--breadcrumb-menu-options", !!/*ctxBreadcrumbItem*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[30](ul);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[22],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*ariaLabel*/ 8192) {
				attr(ul, "aria-label", /*ariaLabel*/ ctx[13]);
			}

			if (!current || dirty[0] & /*direction*/ 32) {
				attr(ul, "data-floating-menu-direction", /*direction*/ ctx[5]);
			}

			if (!current || dirty[0] & /*menuOptionsClass*/ 256) {
				attr(ul, "class", /*menuOptionsClass*/ ctx[8]);
			}

			if (dirty[0] & /*menuOptionsClass*/ 256) {
				toggle_class(ul, "bx--overflow-menu-options", true);
			}

			if (dirty[0] & /*menuOptionsClass, flipped*/ 384) {
				toggle_class(ul, "bx--overflow-menu--flip", /*flipped*/ ctx[7]);
			}

			if (dirty[0] & /*menuOptionsClass, open*/ 257) {
				toggle_class(ul, "bx--overflow-menu-options--open", /*open*/ ctx[0]);
			}

			if (dirty[0] & /*menuOptionsClass, light*/ 320) {
				toggle_class(ul, "bx--overflow-menu-options--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*menuOptionsClass, size*/ 272) {
				toggle_class(ul, "bx--overflow-menu-options--sm", /*size*/ ctx[4] === 'sm');
			}

			if (dirty[0] & /*menuOptionsClass, size*/ 272) {
				toggle_class(ul, "bx--overflow-menu-options--xl", /*size*/ ctx[4] === 'xl');
			}

			if (dirty[0] & /*menuOptionsClass, ctxBreadcrumbItem*/ 16640) {
				toggle_class(ul, "bx--breadcrumb-menu-options", !!/*ctxBreadcrumbItem*/ ctx[14]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[30](null);
		}
	};
}

function create_fragment$29(ctx) {
	let html_tag;
	let html_anchor;
	let t0;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;
	const menu_slot_template = /*#slots*/ ctx[23].menu;
	const menu_slot = create_slot(menu_slot_template, ctx, /*$$scope*/ ctx[22], get_menu_slot_context);
	const menu_slot_or_fallback = menu_slot || fallback_block$B(ctx);
	let if_block = /*open*/ ctx[0] && create_if_block$18(ctx);

	let button_levels = [
		{ type: "button" },
		{ "aria-haspopup": "" },
		{ "aria-expanded": /*open*/ ctx[0] },
		{ "aria-label": /*ariaLabel*/ ctx[13] },
		{ id: /*id*/ ctx[11] },
		/*$$restProps*/ ctx[18]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			html_tag = new HtmlTag(false);
			html_anchor = empty();
			t0 = space();
			button = element("button");
			if (menu_slot_or_fallback) menu_slot_or_fallback.c();
			t1 = space();
			if (if_block) if_block.c();
			html_tag.a = html_anchor;
			set_attributes(button, button_data);
			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[6]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[4] === 'xl');
		},
		m(target, anchor) {
			html_tag.m(/*styles*/ ctx[12], document.head);
			append(document.head, html_anchor);
			insert(target, t0, anchor);
			insert(target, button, anchor);

			if (menu_slot_or_fallback) {
				menu_slot_or_fallback.m(button, null);
			}

			append(button, t1);
			if (if_block) if_block.m(button, null);
			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[31](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[29]),
					listen(button, "click", /*click_handler*/ ctx[24]),
					listen(button, "click", /*click_handler_2*/ ctx[32]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[25]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[26]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[27]),
					listen(button, "keydown", /*keydown_handler*/ ctx[28]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[33]),
					listen(button, "focusout", /*focusout_handler*/ ctx[34])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*styles*/ 4096) html_tag.p(/*styles*/ ctx[12]);

			if (menu_slot) {
				if (menu_slot.p && (!current || dirty[0] & /*$$scope*/ 4194304)) {
					update_slot_base(
						menu_slot,
						menu_slot_template,
						ctx,
						/*$$scope*/ ctx[22],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
						: get_slot_changes(menu_slot_template, /*$$scope*/ ctx[22], dirty, get_menu_slot_changes),
						get_menu_slot_context
					);
				}
			} else {
				if (menu_slot_or_fallback && menu_slot_or_fallback.p && (!current || dirty[0] & /*icon, iconDescription, iconClass*/ 1538)) {
					menu_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$18(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				{ "aria-haspopup": "" },
				(!current || dirty[0] & /*open*/ 1) && { "aria-expanded": /*open*/ ctx[0] },
				(!current || dirty[0] & /*ariaLabel*/ 8192) && { "aria-label": /*ariaLabel*/ ctx[13] },
				(!current || dirty[0] & /*id*/ 2048) && { id: /*id*/ ctx[11] },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			toggle_class(button, "bx--overflow-menu", true);
			toggle_class(button, "bx--overflow-menu--open", /*open*/ ctx[0]);
			toggle_class(button, "bx--overflow-menu--light", /*light*/ ctx[6]);
			toggle_class(button, "bx--overflow-menu--sm", /*size*/ ctx[4] === 'sm');
			toggle_class(button, "bx--overflow-menu--xl", /*size*/ ctx[4] === 'xl');
		},
		i(local) {
			if (current) return;
			transition_in(menu_slot_or_fallback, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(menu_slot_or_fallback, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			detach(html_anchor);
			if (detaching) html_tag.d();
			if (detaching) detach(t0);
			if (detaching) detach(button);
			if (menu_slot_or_fallback) menu_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
			/*button_binding*/ ctx[31](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2a($$self, $$props, $$invalidate) {
	let ariaLabel;
	let styles;

	const omit_props_names = [
		"size","direction","open","light","flipped","menuOptionsClass","icon","iconClass","iconDescription","id","buttonRef","menuRef"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $currentIndex;
	let $items;
	let $currentId;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { direction = "bottom" } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { flipped = false } = $$props;
	let { menuOptionsClass = undefined } = $$props;
	let { icon = OverflowMenuVertical$1 } = $$props;
	let { iconClass = undefined } = $$props;
	let { iconDescription = "Open and close list of options" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { buttonRef = null } = $$props;
	let { menuRef = null } = $$props;
	const ctxBreadcrumbItem = getContext("BreadcrumbItem");
	const dispatch = createEventDispatcher();
	const items = writable([]);
	component_subscribe($$self, items, value => $$invalidate(21, $items = value));
	const currentId = writable(undefined);
	component_subscribe($$self, currentId, value => $$invalidate(36, $currentId = value));
	const focusedId = writable(undefined);
	const currentIndex = writable(-1);
	component_subscribe($$self, currentIndex, value => $$invalidate(20, $currentIndex = value));
	let buttonWidth = undefined;
	let onMountAfterUpdate = true;

	setContext("OverflowMenu", {
		focusedId,
		add: ({ id, text, primaryFocus, disabled }) => {
			items.update(_ => {
				if (primaryFocus) {
					currentIndex.set(_.length);
				}

				return [
					..._,
					{
						id,
						text,
						primaryFocus,
						disabled,
						index: _.length
					}
				];
			});
		},
		update: id => {
			currentId.set(id);
		},
		change: direction => {
			let index = $currentIndex + direction;

			if (index < 0) {
				index = $items.length - 1;
			} else if (index >= $items.length) {
				index = 0;
			}

			let disabled = $items[index].disabled;

			while (disabled) {
				index = index + direction;

				if (index < 0) {
					index = $items.length - 1;
				} else if (index >= $items.length) {
					index = 0;
				}

				disabled = $items[index].disabled;
			}

			currentIndex.set(index);
		}
	});

	afterUpdate(() => {
		if ($currentId) {
			const { index, text } = $items.filter(_ => _.id === $currentId)[0];
			dispatch("close", { index, text });
			$$invalidate(0, open = false);
		}

		if (open) {
			const { width, height } = buttonRef.getBoundingClientRect();
			$$invalidate(19, buttonWidth = width);

			if (!onMountAfterUpdate && $currentIndex < 0) {
				menuRef.focus();
			}

			if (flipped) {
				$$invalidate(3, menuRef.style.left = "auto", menuRef);
				$$invalidate(3, menuRef.style.right = 0, menuRef);
			}

			if (direction === "top") {
				$$invalidate(3, menuRef.style.top = "auto", menuRef);
				$$invalidate(3, menuRef.style.bottom = height + "px", menuRef);
			} else if (direction === "bottom") {
				$$invalidate(3, menuRef.style.top = height + "px", menuRef);
			}

			if (ctxBreadcrumbItem) {
				$$invalidate(3, menuRef.style.top = height + 10 + "px", menuRef);
				$$invalidate(3, menuRef.style.left = -11 + "px", menuRef);
			}
		}

		if (!open) {
			items.set([]);
			currentId.set(undefined);
			currentIndex.set(0);
		}

		onMountAfterUpdate = false;
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (buttonRef && buttonRef.contains(target)) return;

		if (menuRef && !menuRef.contains(target)) {
			$$invalidate(0, open = false);
		}
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menuRef = $$value;
			$$invalidate(3, menuRef);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(2, buttonRef);
		});
	}

	const click_handler_2 = ({ target }) => {
		if (!(menuRef && menuRef.contains(target))) {
			$$invalidate(0, open = !open);
		}
	};

	const keydown_handler_1 = e => {
		if (open) {
			if (['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp'].includes(e.key)) {
				e.preventDefault();
			} else if (e.key === 'Escape') {
				e.stopPropagation();
				$$invalidate(0, open = false);
				buttonRef.focus();
			}
		}
	};

	const focusout_handler = e => {
		if (open) {
			if (!buttonRef.contains(e.relatedTarget)) {
				$$invalidate(0, open = false);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(39, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(4, size = $$new_props.size);
		if ('direction' in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('flipped' in $$new_props) $$invalidate(7, flipped = $$new_props.flipped);
		if ('menuOptionsClass' in $$new_props) $$invalidate(8, menuOptionsClass = $$new_props.menuOptionsClass);
		if ('icon' in $$new_props) $$invalidate(1, icon = $$new_props.icon);
		if ('iconClass' in $$new_props) $$invalidate(9, iconClass = $$new_props.iconClass);
		if ('iconDescription' in $$new_props) $$invalidate(10, iconDescription = $$new_props.iconDescription);
		if ('id' in $$new_props) $$invalidate(11, id = $$new_props.id);
		if ('buttonRef' in $$new_props) $$invalidate(2, buttonRef = $$new_props.buttonRef);
		if ('menuRef' in $$new_props) $$invalidate(3, menuRef = $$new_props.menuRef);
		if ('$$scope' in $$new_props) $$invalidate(22, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(13, ariaLabel = $$props["aria-label"] || "menu");

		if ($$self.$$.dirty[0] & /*$items, $currentIndex*/ 3145728) {
			if ($items[$currentIndex]) {
				focusedId.set($items[$currentIndex].id);
			}
		}

		if ($$self.$$.dirty[0] & /*id, buttonWidth*/ 526336) {
			$$invalidate(12, styles = `<style>
    #${id} .bx--overflow-menu-options.bx--overflow-menu-options:after {
      width: ${buttonWidth ? buttonWidth + "px" : "2rem"};
    }
  <\/style>`);
		}
	};

	if (ctxBreadcrumbItem) {
		$$invalidate(1, icon = OverflowMenuHorizontal$1);
	}

	$$props = exclude_internal_props($$props);

	return [
		open,
		icon,
		buttonRef,
		menuRef,
		size,
		direction,
		light,
		flipped,
		menuOptionsClass,
		iconClass,
		iconDescription,
		id,
		styles,
		ariaLabel,
		ctxBreadcrumbItem,
		items,
		currentId,
		currentIndex,
		$$restProps,
		buttonWidth,
		$currentIndex,
		$items,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		ul_binding,
		button_binding,
		click_handler_2,
		keydown_handler_1,
		focusout_handler
	];
}

class OverflowMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2a,
			create_fragment$29,
			safe_not_equal,
			{
				size: 4,
				direction: 5,
				open: 0,
				light: 6,
				flipped: 7,
				menuOptionsClass: 8,
				icon: 1,
				iconClass: 9,
				iconDescription: 10,
				id: 11,
				buttonRef: 2,
				menuRef: 3
			},
			null,
			[-1, -1]
		);
	}
}

var OverflowMenu$1 = OverflowMenu;

/* src/DataTable/ToolbarMenu.svelte generated by Svelte v3.49.0 */

function create_default_slot$f(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$28(ctx) {
	let overflowmenu;
	let updating_menuRef;
	let current;

	const overflowmenu_spread_levels = [
		{ icon: Settings$1 },
		/*$$restProps*/ ctx[1],
		{
			class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
		},
		{ flipped: true }
	];

	function overflowmenu_menuRef_binding(value) {
		/*overflowmenu_menuRef_binding*/ ctx[3](value);
	}

	let overflowmenu_props = {
		$$slots: { default: [create_default_slot$f] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenu_spread_levels.length; i += 1) {
		overflowmenu_props = assign(overflowmenu_props, overflowmenu_spread_levels[i]);
	}

	if (/*menuRef*/ ctx[0] !== void 0) {
		overflowmenu_props.menuRef = /*menuRef*/ ctx[0];
	}

	overflowmenu = new OverflowMenu$1({ props: overflowmenu_props });
	binding_callbacks.push(() => bind(overflowmenu, 'menuRef', overflowmenu_menuRef_binding));

	return {
		c() {
			create_component(overflowmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenu, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenu_changes = (dirty & /*Settings, $$restProps*/ 2)
			? get_spread_update(overflowmenu_spread_levels, [
					dirty & /*Settings*/ 0 && { icon: Settings$1 },
					dirty & /*$$restProps*/ 2 && get_spread_object(/*$$restProps*/ ctx[1]),
					dirty & /*$$restProps*/ 2 && {
						class: "bx--toolbar-action bx--overflow-menu " + /*$$restProps*/ ctx[1].class
					},
					overflowmenu_spread_levels[3]
				])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenu_changes.$$scope = { dirty, ctx };
			}

			if (!updating_menuRef && dirty & /*menuRef*/ 1) {
				updating_menuRef = true;
				overflowmenu_changes.menuRef = /*menuRef*/ ctx[0];
				add_flush_callback(() => updating_menuRef = false);
			}

			overflowmenu.$set(overflowmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenu, detaching);
		}
	};
}

function instance$29($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const ctx = getContext("Toolbar");
	let menuRef = null;

	function overflowmenu_menuRef_binding(value) {
		menuRef = value;
		$$invalidate(0, menuRef);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*menuRef*/ 1) {
			if (menuRef) $$invalidate(0, menuRef.style.top = "100%", menuRef);
		}

		if ($$self.$$.dirty & /*menuRef*/ 1) {
			ctx.setOverflowVisible(menuRef != null);
		}
	};

	return [menuRef, $$restProps, slots, overflowmenu_menuRef_binding, $$scope];
}

class ToolbarMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$29, create_fragment$28, safe_not_equal, {});
	}
}

var ToolbarMenu$1 = ToolbarMenu;

/* src/OverflowMenu/OverflowMenuItem.svelte generated by Svelte v3.49.0 */

function create_else_block$f(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block_1$b(ctx);
	let button_levels = [/*buttonProps*/ ctx[7]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[24](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_1*/ ctx[19]),
					listen(button, "click", /*click_handler_3*/ ctx[25]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[20]),
					listen(button, "keydown", /*keydown_handler_3*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[24](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (64:2) {#if href}
function create_if_block$17(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);
	const default_slot_or_fallback = default_slot || fallback_block$A(ctx);
	let a_levels = [/*buttonProps*/ ctx[7]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[21](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[17]),
					listen(a, "click", /*click_handler_2*/ ctx[22]),
					listen(a, "keydown", /*keydown_handler*/ ctx[18]),
					listen(a, "keydown", /*keydown_handler_2*/ ctx[23])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [dirty & /*buttonProps*/ 128 && /*buttonProps*/ ctx[7]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (105:12)          
function fallback_block_1$b(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (82:12)          
function fallback_block$A(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--overflow-menu-options__option-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 2) set_data(t, /*text*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$27(ctx) {
	let li;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$17, create_else_block$f];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let li_levels = [{ role: "none" }, { id: /*id*/ ctx[6] }, /*$$restProps*/ ctx[11]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			if_blocks[current_block_type_index].m(li, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(li, null);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ role: "none" },
				(!current || dirty & /*id*/ 64) && { id: /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(li, "bx--overflow-menu-options__option", true);
			toggle_class(li, "bx--overflow-menu--divider", /*hasDivider*/ ctx[4]);
			toggle_class(li, "bx--overflow-menu-options__option--danger", /*danger*/ ctx[5]);
			toggle_class(li, "bx--overflow-menu-options__option--disabled", /*disabled*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$28($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"text","href","primaryFocus","disabled","hasDivider","danger","requireTitle","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $focusedId;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { text = "Provide text" } = $$props;
	let { href = "" } = $$props;
	let { primaryFocus = false } = $$props;
	let { disabled = false } = $$props;
	let { hasDivider = false } = $$props;
	let { danger = false } = $$props;
	let { requireTitle = true } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const { focusedId, add, update, change } = getContext("OverflowMenu");
	component_subscribe($$self, focusedId, value => $$invalidate(14, $focusedId = value));
	add({ id, text, primaryFocus, disabled });

	afterUpdate(() => {
		if (ref && primaryFocus) {
			ref.focus();
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_2 = () => {
		update(id);
	};

	const keydown_handler_2 = ({ key }) => {
		if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_3 = () => {
		update(id);
	};

	const keydown_handler_3 = ({ key }) => {
		if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('primaryFocus' in $$new_props) $$invalidate(12, primaryFocus = $$new_props.primaryFocus);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('hasDivider' in $$new_props) $$invalidate(4, hasDivider = $$new_props.hasDivider);
		if ('danger' in $$new_props) $$invalidate(5, danger = $$new_props.danger);
		if ('requireTitle' in $$new_props) $$invalidate(13, requireTitle = $$new_props.requireTitle);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$focusedId, id*/ 16448) {
			$$invalidate(12, primaryFocus = $focusedId === id);
		}

		if ($$self.$$.dirty & /*href, disabled, requireTitle, text*/ 8206) {
			$$invalidate(7, buttonProps = {
				role: "menuitem",
				tabindex: "-1",
				class: "bx--overflow-menu-options__btn",
				disabled: href ? undefined : disabled,
				href: href ? href : undefined,
				title: requireTitle
				? $$slots.default ? undefined : text
				: undefined
			});
		}
	};

	return [
		ref,
		text,
		href,
		disabled,
		hasDivider,
		danger,
		id,
		buttonProps,
		focusedId,
		update,
		change,
		$$restProps,
		primaryFocus,
		requireTitle,
		$focusedId,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1,
		a_binding,
		click_handler_2,
		keydown_handler_2,
		button_binding,
		click_handler_3,
		keydown_handler_3
	];
}

class OverflowMenuItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$28, create_fragment$27, safe_not_equal, {
			text: 1,
			href: 2,
			primaryFocus: 12,
			disabled: 3,
			hasDivider: 4,
			danger: 5,
			requireTitle: 13,
			id: 6,
			ref: 0
		});
	}
}

var OverflowMenuItem$1 = OverflowMenuItem;

/* src/DataTable/ToolbarMenuItem.svelte generated by Svelte v3.49.0 */

function create_default_slot$e(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$26(ctx) {
	let overflowmenuitem;
	let current;
	const overflowmenuitem_spread_levels = [/*$$restProps*/ ctx[0]];

	let overflowmenuitem_props = {
		$$slots: { default: [create_default_slot$e] },
		$$scope: { ctx }
	};

	for (let i = 0; i < overflowmenuitem_spread_levels.length; i += 1) {
		overflowmenuitem_props = assign(overflowmenuitem_props, overflowmenuitem_spread_levels[i]);
	}

	overflowmenuitem = new OverflowMenuItem$1({ props: overflowmenuitem_props });
	overflowmenuitem.$on("click", /*click_handler*/ ctx[2]);
	overflowmenuitem.$on("keydown", /*keydown_handler*/ ctx[3]);

	return {
		c() {
			create_component(overflowmenuitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overflowmenuitem, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const overflowmenuitem_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(overflowmenuitem_spread_levels, [get_spread_object(/*$$restProps*/ ctx[0])])
			: {};

			if (dirty & /*$$scope*/ 16) {
				overflowmenuitem_changes.$$scope = { dirty, ctx };
			}

			overflowmenuitem.$set(overflowmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overflowmenuitem, detaching);
		}
	};
}

function instance$27($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [$$restProps, slots, click_handler, keydown_handler, $$scope];
}

class ToolbarMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$27, create_fragment$26, safe_not_equal, {});
	}
}

var ToolbarMenuItem$1 = ToolbarMenuItem;

let l10n;

function updateClasses(instance) {
  const {
    calendarContainer,
    days,
    daysContainer,
    weekdayContainer,
    selectedDates,
  } = instance;

  calendarContainer.classList.add("bx--date-picker__calendar");
  calendarContainer
    .querySelector(".flatpickr-month")
    .classList.add("bx--date-picker__month");

  weekdayContainer.classList.add("bx--date-picker__weekdays");
  weekdayContainer.querySelectorAll(".flatpickr-weekday").forEach((node) => {
    node.classList.add("bx--date-picker__weekday");
  });

  daysContainer.classList.add("bx--date-picker__days");
  days.querySelectorAll(".flatpickr-day").forEach((node) => {
    node.classList.add("bx--date-picker__day");
    if (node.classList.contains("today") && selectedDates.length > 0) {
      node.classList.add("no-border");
    } else if (node.classList.contains("today") && selectedDates.length === 0) {
      node.classList.remove("no-border");
    }
  });
}

function updateMonthNode(instance) {
  const monthText = instance.l10n.months.longhand[instance.currentMonth];
  const staticMonthNode = instance.monthNav.querySelector(".cur-month");

  if (staticMonthNode) {
    staticMonthNode.textContent = monthText;
  } else {
    const monthSelectNode = instance.monthsDropdownContainer;
    const span = document.createElement("span");
    span.setAttribute("class", "cur-month");
    span.textContent = monthText;
    monthSelectNode.parentNode.replaceChild(span, monthSelectNode);
  }
}

async function createCalendar({ options, base, input, dispatch }) {
  let locale = options.locale;

  if (options.locale === "en" && l10n && l10n.en) {
    l10n.en.weekdays.shorthand.forEach((_, index) => {
      const shorthand = _.slice(0, 2);
      l10n.en.weekdays.shorthand[index] =
        shorthand === "Th" ? "Th" : shorthand.charAt(0);
    });

    locale = l10n.en;
  }

  let rangePlugin;

  if (options.mode === "range") {
    const importee = await Promise.resolve().then(function () { return rangePlugin$1; });
    rangePlugin = importee.default;
  }

  return new flatpickr(base, {
    allowInput: true,
    disableMobile: true,
    clickOpens: true,
    locale,
    plugins: [
      options.mode === "range" && new rangePlugin({ position: "left", input }),
    ].filter(Boolean),
    nextArrow:
      '<svg width="16px" height="16px" viewBox="0 0 16 16"><polygon points="11,8 6,13 5.3,12.3 9.6,8 5.3,3.7 6,3 "/><rect width="16" height="16" style="fill: none" /></svg>',
    prevArrow:
      '<svg width="16px" height="16px" viewBox="0 0 16 16"><polygon points="5,8 10,3 10.7,3.7 6.4,8 10.7,12.3 10,13 "/><rect width="16" height="16" style="fill: none" /></svg>',
    onChange: () => {
      dispatch("change");
    },
    onClose: () => {
      dispatch("close");
    },
    onMonthChange: (s, d, instance) => {
      updateMonthNode(instance);
    },
    onOpen: (s, d, instance) => {
      dispatch("open");
      updateClasses(instance);
      updateMonthNode(instance);
    },
    ...options,
  });
}

/* src/DatePicker/DatePicker.svelte generated by Svelte v3.49.0 */

function create_fragment$25(ctx) {
	let div1;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[30].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[29], null);
	let div1_levels = [/*$$restProps*/ ctx[15]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "id", /*id*/ ctx[3]);
			toggle_class(div0, "bx--date-picker", true);
			toggle_class(div0, "bx--date-picker--short", /*short*/ ctx[1]);
			toggle_class(div0, "bx--date-picker--light", /*light*/ ctx[2]);
			toggle_class(div0, "bx--date-picker--simple", /*datePickerType*/ ctx[0] === 'simple');
			toggle_class(div0, "bx--date-picker--single", /*datePickerType*/ ctx[0] === 'single');
			toggle_class(div0, "bx--date-picker--range", /*datePickerType*/ ctx[0] === 'range');
			toggle_class(div0, "bx--date-picker--nolabel", /*datePickerType*/ ctx[0] === 'range' && /*$labelTextEmpty*/ ctx[6]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div0_binding*/ ctx[36](div0);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[35]),
					listen(div0, "keydown", /*keydown_handler*/ ctx[37]),
					listen(div1, "click", /*click_handler*/ ctx[31]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[32]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[33]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[34])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 536870912)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[29],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[29], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*id*/ 8) {
				attr(div0, "id", /*id*/ ctx[3]);
			}

			if (dirty[0] & /*short*/ 2) {
				toggle_class(div0, "bx--date-picker--short", /*short*/ ctx[1]);
			}

			if (dirty[0] & /*light*/ 4) {
				toggle_class(div0, "bx--date-picker--light", /*light*/ ctx[2]);
			}

			if (dirty[0] & /*datePickerType*/ 1) {
				toggle_class(div0, "bx--date-picker--simple", /*datePickerType*/ ctx[0] === 'simple');
			}

			if (dirty[0] & /*datePickerType*/ 1) {
				toggle_class(div0, "bx--date-picker--single", /*datePickerType*/ ctx[0] === 'single');
			}

			if (dirty[0] & /*datePickerType*/ 1) {
				toggle_class(div0, "bx--date-picker--range", /*datePickerType*/ ctx[0] === 'range');
			}

			if (dirty[0] & /*datePickerType, $labelTextEmpty*/ 65) {
				toggle_class(div0, "bx--date-picker--nolabel", /*datePickerType*/ ctx[0] === 'range' && /*$labelTextEmpty*/ ctx[6]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div0_binding*/ ctx[36](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$26($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"datePickerType","value","valueFrom","valueTo","dateFormat","maxDate","minDate","locale","short","light","id","flatpickrProps"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $hasCalendar;
	let $inputValueTo;
	let $inputValueFrom;
	let $inputValue;
	let $range;
	let $mode;
	let $inputIds;
	let $labelTextEmpty;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { datePickerType = "simple" } = $$props;
	let { value = "" } = $$props;
	let { valueFrom = "" } = $$props;
	let { valueTo = "" } = $$props;
	let { dateFormat = "m/d/Y" } = $$props;
	let { maxDate = null } = $$props;
	let { minDate = null } = $$props;
	let { locale = "en" } = $$props;
	let { short = false } = $$props;
	let { light = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { flatpickrProps = { static: true } } = $$props;
	const dispatch = createEventDispatcher();
	const inputs = writable([]);
	const inputIds = derived(inputs, _ => _.map(({ id }) => id));
	component_subscribe($$self, inputIds, value => $$invalidate(41, $inputIds = value));
	const labelTextEmpty = derived(inputs, _ => _.filter(({ labelText }) => !!labelText).length === 0);
	component_subscribe($$self, labelTextEmpty, value => $$invalidate(6, $labelTextEmpty = value));
	const inputValue = writable(value);
	component_subscribe($$self, inputValue, value => $$invalidate(28, $inputValue = value));
	const inputValueFrom = writable(valueFrom);
	component_subscribe($$self, inputValueFrom, value => $$invalidate(27, $inputValueFrom = value));
	const inputValueTo = writable(valueTo);
	component_subscribe($$self, inputValueTo, value => $$invalidate(26, $inputValueTo = value));
	const mode = writable(datePickerType);
	component_subscribe($$self, mode, value => $$invalidate(40, $mode = value));
	const range = derived(mode, _ => _ === "range");
	component_subscribe($$self, range, value => $$invalidate(39, $range = value));
	const hasCalendar = derived(mode, _ => _ === "single" || _ === "range");
	component_subscribe($$self, hasCalendar, value => $$invalidate(25, $hasCalendar = value));
	let calendar = null;
	let datePickerRef = null;
	let inputRef = null;
	let inputRefTo = null;

	setContext("DatePicker", {
		range,
		inputValue,
		inputValueFrom,
		inputValueTo,
		inputIds,
		hasCalendar,
		add: data => {
			inputs.update(_ => [..._, data]);
		},
		declareRef: ({ id, ref }) => {
			if ($inputIds.indexOf(id) === 0) {
				$$invalidate(24, inputRef = ref);
			} else {
				inputRefTo = ref;
			}
		},
		updateValue: ({ type, value }) => {
			if (!calendar && type === "input" || type === "change") {
				inputValue.set(value);
			}

			if (!calendar && type === "change") {
				dispatch("change", value);
			}
		},
		blurInput: relatedTarget => {
			if (calendar && !calendar.calendarContainer.contains(relatedTarget)) {
				calendar.close();
			}
		},
		openCalendar: () => {
			calendar.open();
		},
		focusCalendar: () => {
			(calendar.selectedDateElem || calendar.todayDateElem || calendar.calendarContainer.querySelector(".flatpickr-day[tabindex]") || calendar.calendarContainer).focus();
		}
	});

	async function initCalendar(options) {
		if (calendar) {
			calendar.set("minDate", minDate);
			calendar.set("maxDate", maxDate);
			calendar.set("locale", locale);
			calendar.set("dateFormat", dateFormat);

			Object.entries(flatpickrProps).forEach(([option, value]) => {
				calendar.set(options, value);
			});

			return;
		}

		$$invalidate(4, calendar = await createCalendar({
			options: {
				...options,
				appendTo: datePickerRef,
				defaultDate: $inputValue,
				mode: $mode
			},
			base: inputRef,
			input: inputRefTo,
			dispatch: event => {
				const detail = { selectedDates: calendar.selectedDates };

				if ($range) {
					const from = inputRef.value;
					const to = inputRefTo.value;

					detail.dateStr = {
						from: inputRef.value,
						to: inputRefTo.value
					};

					$$invalidate(17, valueFrom = from);
					$$invalidate(18, valueTo = to);
				} else {
					detail.dateStr = inputRef.value;
				}

				return dispatch(event, detail);
			}
		}));
	}

	onMount(() => {
		return () => {
			if (calendar) {
				calendar.destroy();
				$$invalidate(4, calendar = null);
			}
		};
	});

	afterUpdate(() => {
		if (calendar) {
			if ($range) {
				calendar.setDate([$inputValueFrom, $inputValueTo]);

				// workaround to remove the default range plugin separator "to"
				$$invalidate(24, inputRef.value = $inputValueFrom, inputRef);
			} else {
				calendar.setDate($inputValue);
			}
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (!calendar || !calendar.isOpen) return;
		if (datePickerRef && datePickerRef.contains(target)) return;
		if (!calendar.calendarContainer.contains(target)) calendar.close();
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			datePickerRef = $$value;
			$$invalidate(5, datePickerRef);
		});
	}

	const keydown_handler = e => {
		if (calendar?.isOpen && e.key === 'Escape') {
			e.stopPropagation();
			calendar.close();
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('datePickerType' in $$new_props) $$invalidate(0, datePickerType = $$new_props.datePickerType);
		if ('value' in $$new_props) $$invalidate(16, value = $$new_props.value);
		if ('valueFrom' in $$new_props) $$invalidate(17, valueFrom = $$new_props.valueFrom);
		if ('valueTo' in $$new_props) $$invalidate(18, valueTo = $$new_props.valueTo);
		if ('dateFormat' in $$new_props) $$invalidate(19, dateFormat = $$new_props.dateFormat);
		if ('maxDate' in $$new_props) $$invalidate(20, maxDate = $$new_props.maxDate);
		if ('minDate' in $$new_props) $$invalidate(21, minDate = $$new_props.minDate);
		if ('locale' in $$new_props) $$invalidate(22, locale = $$new_props.locale);
		if ('short' in $$new_props) $$invalidate(1, short = $$new_props.short);
		if ('light' in $$new_props) $$invalidate(2, light = $$new_props.light);
		if ('id' in $$new_props) $$invalidate(3, id = $$new_props.id);
		if ('flatpickrProps' in $$new_props) $$invalidate(23, flatpickrProps = $$new_props.flatpickrProps);
		if ('$$scope' in $$new_props) $$invalidate(29, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$inputValue*/ 268435456) {
			$$invalidate(16, value = $inputValue);
		}

		if ($$self.$$.dirty[0] & /*value*/ 65536) {
			inputValue.set(value);
		}

		if ($$self.$$.dirty[0] & /*$inputValueFrom*/ 134217728) {
			$$invalidate(17, valueFrom = $inputValueFrom);
		}

		if ($$self.$$.dirty[0] & /*valueFrom*/ 131072) {
			inputValueFrom.set(valueFrom);
		}

		if ($$self.$$.dirty[0] & /*$inputValueTo*/ 67108864) {
			$$invalidate(18, valueTo = $inputValueTo);
		}

		if ($$self.$$.dirty[0] & /*valueTo*/ 262144) {
			inputValueTo.set(valueTo);
		}

		if ($$self.$$.dirty[0] & /*$hasCalendar, inputRef, dateFormat, locale, maxDate, minDate, flatpickrProps*/ 66584576) {
			if ($hasCalendar && inputRef) {
				initCalendar({
					dateFormat,
					locale,
					maxDate,
					minDate,
					// default to static: true so the
					// date picker works inside a modal
					static: true,
					...flatpickrProps
				});
			}
		}
	};

	return [
		datePickerType,
		short,
		light,
		id,
		calendar,
		datePickerRef,
		$labelTextEmpty,
		inputIds,
		labelTextEmpty,
		inputValue,
		inputValueFrom,
		inputValueTo,
		mode,
		range,
		hasCalendar,
		$$restProps,
		value,
		valueFrom,
		valueTo,
		dateFormat,
		maxDate,
		minDate,
		locale,
		flatpickrProps,
		inputRef,
		$hasCalendar,
		$inputValueTo,
		$inputValueFrom,
		$inputValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_1,
		div0_binding,
		keydown_handler
	];
}

class DatePicker extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$26,
			create_fragment$25,
			safe_not_equal,
			{
				datePickerType: 0,
				value: 16,
				valueFrom: 17,
				valueTo: 18,
				dateFormat: 19,
				maxDate: 20,
				minDate: 21,
				locale: 22,
				short: 1,
				light: 2,
				id: 3,
				flatpickrProps: 23
			},
			null,
			[-1, -1]
		);
	}
}

var DatePicker$1 = DatePicker;

/* src/icons/Calendar.svelte generated by Svelte v3.49.0 */

function create_if_block$16(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$24(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$16(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M26,4h-4V2h-2v2h-8V2h-2v2H6C4.9,4,4,4.9,4,6v20c0,1.1,0.9,2,2,2h20c1.1,0,2-0.9,2-2V6C28,4.9,27.1,4,26,4z M26,26H6V12h20\tV26z M26,10H6V6h4v2h2V6h8v2h2V6h4V10z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$16(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$25($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Calendar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$25, create_fragment$24, safe_not_equal, { size: 0, title: 1 });
	}
}

var Calendar$1 = Calendar;

/* src/DatePicker/DatePickerInput.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$d = dirty => ({});
const get_labelText_slot_context$d = ctx => ({});

// (85:2) {#if labelText || $$slots.labelText}
function create_if_block_7$5(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[35].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[34], get_labelText_slot_context$d);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$z(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[8]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[1] & /*$$scope*/ 8)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[34],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[34])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[34], dirty, get_labelText_slot_changes$d),
						get_labelText_slot_context$d
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 256) {
				attr(label, "for", /*id*/ ctx[8]);
			}

			if (dirty[0] & /*hideLabel*/ 1024) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (92:29)          
function fallback_block$z(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (141:4) {#if !$hasCalendar}
function create_if_block_4$a(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*invalid*/ ctx[11] && create_if_block_6$7();
	let if_block1 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_5$8();

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[11]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$7();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$8();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (142:6) {#if invalid}
function create_if_block_6$7(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: {
				class: "bx--date-picker__icon bx--date-picker__icon--invalid"
			}
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (147:6) {#if !invalid && warn}
function create_if_block_5$8(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--date-picker__icon bx--date-picker__icon--warn"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (153:4) {#if $hasCalendar}
function create_if_block_3$f(ctx) {
	let calendar;
	let current;

	calendar = new Calendar$1({
			props: {
				class: "bx--date-picker__icon",
				"aria-label": /*iconDescription*/ ctx[7]
			}
		});

	calendar.$on("click", /*openCalendar*/ ctx[27]);

	return {
		c() {
			create_component(calendar.$$.fragment);
		},
		m(target, anchor) {
			mount_component(calendar, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const calendar_changes = {};
			if (dirty[0] & /*iconDescription*/ 128) calendar_changes["aria-label"] = /*iconDescription*/ ctx[7];
			calendar.$set(calendar_changes);
		},
		i(local) {
			if (current) return;
			transition_in(calendar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(calendar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(calendar, detaching);
		}
	};
}

// (161:2) {#if invalid}
function create_if_block_2$j(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (164:2) {#if !invalid && warn}
function create_if_block_1$t(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (167:2) {#if helperText}
function create_if_block$15(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 64) set_data(t, /*helperText*/ ctx[6]);

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$23(ctx) {
	let div1;
	let t0;
	let div0;
	let input;
	let input_data_invalid_value;
	let input_value_value;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*labelText*/ ctx[9] || /*$$slots*/ ctx[32].labelText) && create_if_block_7$5(ctx);

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{ id: /*id*/ ctx[8] },
		{ name: /*name*/ ctx[15] },
		{ placeholder: /*placeholder*/ ctx[3] },
		{ type: /*type*/ ctx[2] },
		{ pattern: /*pattern*/ ctx[4] },
		{ disabled: /*disabled*/ ctx[5] },
		/*$$restProps*/ ctx[33],
		{
			value: input_value_value = /*$range*/ ctx[16]
			? /*$inputIds*/ ctx[17].indexOf(/*id*/ ctx[8]) === 0
				? /*$inputValueFrom*/ ctx[18]
				: /*$inputValueTo*/ ctx[19]
			: /*$inputValue*/ ctx[20]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block1 = !/*$hasCalendar*/ ctx[21] && create_if_block_4$a(ctx);
	let if_block2 = /*$hasCalendar*/ ctx[21] && create_if_block_3$f(ctx);
	let if_block3 = /*invalid*/ ctx[11] && create_if_block_2$j(ctx);
	let if_block4 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_1$t(ctx);
	let if_block5 = /*helperText*/ ctx[6] && create_if_block$15(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--date-picker__input", true);
			toggle_class(input, "bx--date-picker__input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--date-picker__input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(input, "bx--date-picker__input--xl", /*size*/ ctx[1] === 'xl');
			toggle_class(div0, "bx--date-picker-input__wrapper", true);
			toggle_class(div0, "bx--date-picker-input__wrapper--invalid", /*invalid*/ ctx[11]);
			toggle_class(div0, "bx--date-picker-input__wrapper--warn", /*warn*/ ctx[13]);
			toggle_class(div1, "bx--date-picker-container", true);
			toggle_class(div1, "bx--date-picker--nolabel", !/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, input);
			input.value = input_data.value;
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[41](input);
			append(div0, t1);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			append(div1, t4);
			if (if_block4) if_block4.m(div1, null);
			append(div1, t5);
			if (if_block5) if_block5.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_handler*/ ctx[36]),
					listen(input, "input", /*input_handler_1*/ ctx[42]),
					listen(input, "change", /*change_handler*/ ctx[43]),
					listen(input, "keydown", /*keydown_handler*/ ctx[37]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[44]),
					listen(input, "keyup", /*keyup_handler*/ ctx[38]),
					listen(input, "blur", /*blur_handler*/ ctx[39]),
					listen(input, "blur", /*blur_handler_1*/ ctx[45]),
					listen(input, "paste", /*paste_handler*/ ctx[40])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[9] || /*$$slots*/ ctx[32].labelText) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*labelText*/ 512 | dirty[1] & /*$$slots*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_7$5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*id*/ 256) && { id: /*id*/ ctx[8] },
				(!current || dirty[0] & /*name*/ 32768) && { name: /*name*/ ctx[15] },
				(!current || dirty[0] & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
				(!current || dirty[0] & /*type*/ 4) && { type: /*type*/ ctx[2] },
				(!current || dirty[0] & /*pattern*/ 16) && { pattern: /*pattern*/ ctx[4] },
				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				dirty[1] & /*$$restProps*/ 4 && /*$$restProps*/ ctx[33],
				(!current || dirty[0] & /*$range, $inputIds, id, $inputValueFrom, $inputValueTo, $inputValue*/ 2031872 && input_value_value !== (input_value_value = /*$range*/ ctx[16]
				? /*$inputIds*/ ctx[17].indexOf(/*id*/ ctx[8]) === 0
					? /*$inputValueFrom*/ ctx[18]
					: /*$inputValueTo*/ ctx[19]
				: /*$inputValue*/ ctx[20]) && input.value !== input_value_value) && { value: input_value_value }
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--date-picker__input", true);
			toggle_class(input, "bx--date-picker__input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--date-picker__input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(input, "bx--date-picker__input--xl", /*size*/ ctx[1] === 'xl');

			if (!/*$hasCalendar*/ ctx[21]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*$hasCalendar*/ 2097152) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$a(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*$hasCalendar*/ ctx[21]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*$hasCalendar*/ 2097152) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_3$f(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*invalid*/ 2048) {
				toggle_class(div0, "bx--date-picker-input__wrapper--invalid", /*invalid*/ ctx[11]);
			}

			if (dirty[0] & /*warn*/ 8192) {
				toggle_class(div0, "bx--date-picker-input__wrapper--warn", /*warn*/ ctx[13]);
			}

			if (/*invalid*/ ctx[11]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2$j(ctx);
					if_block3.c();
					if_block3.m(div1, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$t(ctx);
					if_block4.c();
					if_block4.m(div1, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*helperText*/ ctx[6]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block$15(ctx);
					if_block5.c();
					if_block5.m(div1, null);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (dirty[0] & /*labelText*/ 512) {
				toggle_class(div1, "bx--date-picker--nolabel", !/*labelText*/ ctx[9]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[41](null);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$24($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","type","placeholder","pattern","disabled","helperText","iconDescription","id","labelText","hideLabel","invalid","invalidText","warn","warnText","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $range;
	let $inputIds;
	let $inputValueFrom;
	let $inputValueTo;
	let $inputValue;
	let $hasCalendar;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { type = "text" } = $$props;
	let { placeholder = "" } = $$props;
	let { pattern = "\\d{1,2}\\/\\d{1,2}\\/\\d{4}" } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { iconDescription = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const { range, add, hasCalendar, declareRef, inputIds, updateValue, blurInput, openCalendar, focusCalendar, inputValue, inputValueFrom, inputValueTo } = getContext("DatePicker");
	component_subscribe($$self, range, value => $$invalidate(16, $range = value));
	component_subscribe($$self, hasCalendar, value => $$invalidate(21, $hasCalendar = value));
	component_subscribe($$self, inputIds, value => $$invalidate(17, $inputIds = value));
	component_subscribe($$self, inputValue, value => $$invalidate(20, $inputValue = value));
	component_subscribe($$self, inputValueFrom, value => $$invalidate(18, $inputValueFrom = value));
	component_subscribe($$self, inputValueTo, value => $$invalidate(19, $inputValueTo = value));
	add({ id, labelText });

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		updateValue({ type: 'input', value: target.value });
	};

	const change_handler = ({ target }) => {
		updateValue({ type: 'change', value: target.value });
	};

	const keydown_handler_1 = ({ key }) => {
		if (key === 'ArrowDown') {
			focusCalendar();
		}
	};

	const blur_handler_1 = ({ relatedTarget }) => {
		blurInput(relatedTarget);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(33, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(2, type = $$new_props.type);
		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
		if ('pattern' in $$new_props) $$invalidate(4, pattern = $$new_props.pattern);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('helperText' in $$new_props) $$invalidate(6, helperText = $$new_props.helperText);
		if ('iconDescription' in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('labelText' in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('name' in $$new_props) $$invalidate(15, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(34, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*ref, id*/ 257) {
			if (ref) declareRef({ id, ref });
		}
	};

	return [
		ref,
		size,
		type,
		placeholder,
		pattern,
		disabled,
		helperText,
		iconDescription,
		id,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		name,
		$range,
		$inputIds,
		$inputValueFrom,
		$inputValueTo,
		$inputValue,
		$hasCalendar,
		range,
		hasCalendar,
		inputIds,
		updateValue,
		blurInput,
		openCalendar,
		focusCalendar,
		inputValue,
		inputValueFrom,
		inputValueTo,
		$$slots,
		$$restProps,
		$$scope,
		slots,
		input_handler,
		keydown_handler,
		keyup_handler,
		blur_handler,
		paste_handler,
		input_binding,
		input_handler_1,
		change_handler,
		keydown_handler_1,
		blur_handler_1
	];
}

class DatePickerInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$24,
			create_fragment$23,
			safe_not_equal,
			{
				size: 1,
				type: 2,
				placeholder: 3,
				pattern: 4,
				disabled: 5,
				helperText: 6,
				iconDescription: 7,
				id: 8,
				labelText: 9,
				hideLabel: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				name: 15,
				ref: 0
			},
			null,
			[-1, -1]
		);
	}
}

var DatePickerInput$1 = DatePickerInput;

/* src/DatePicker/DatePickerSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$e(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (25:4) {#each Array.from({ length: range ? 2 : 1 }, (_, i) => i) as input, i (input)}
function create_each_block$e(key_1, ctx) {
	let div1;
	let label;
	let t0;
	let div0;
	let t1;

	return {
		key: key_1,
		first: null,
		c() {
			div1 = element("div");
			label = element("label");
			t0 = space();
			div0 = element("div");
			t1 = space();
			attr(label, "for", /*id*/ ctx[1]);
			toggle_class(label, "bx--label", true);
			toggle_class(div0, "bx--date-picker__input", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div1, "bx--date-picker-container", true);
			this.first = div1;
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(div1, t0);
			append(div1, div0);
			append(div1, t1);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*id*/ 2) {
				attr(label, "for", /*id*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function create_fragment$22(ctx) {
	let div1;
	let div0;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*range*/ ctx[0] ? 2 : 1 }, func$4);
	const get_key = ctx => /*input*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$e(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$e(key, child_ctx));
	}

	let div1_levels = [/*$$restProps*/ ctx[2]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(div0, "bx--date-picker", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--date-picker--range", true);
			toggle_class(div0, "bx--date-picker--short", !/*range*/ ctx[0]);
			toggle_class(div0, "bx--date-picker--simple", !/*range*/ ctx[0]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[3]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*id, range*/ 3) {
				each_value = Array.from({ length: /*range*/ ctx[0] ? 2 : 1 }, func$4);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, destroy_block, create_each_block$e, null, get_each_context$e);
			}

			if (dirty & /*range*/ 1) {
				toggle_class(div0, "bx--date-picker--short", !/*range*/ ctx[0]);
			}

			if (dirty & /*range*/ 1) {
				toggle_class(div0, "bx--date-picker--simple", !/*range*/ ctx[0]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$4 = (_, i) => i;

function instance$23($$self, $$props, $$invalidate) {
	const omit_props_names = ["range","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { range = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('range' in $$new_props) $$invalidate(0, range = $$new_props.range);
		if ('id' in $$new_props) $$invalidate(1, id = $$new_props.id);
	};

	return [
		range,
		id,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DatePickerSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$23, create_fragment$22, safe_not_equal, { range: 0, id: 1 });
	}
}

var DatePickerSkeleton$1 = DatePickerSkeleton;

/* src/Dropdown/Dropdown.svelte generated by Svelte v3.49.0 */

function get_each_context$d(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	child_ctx[39] = i;
	return child_ctx;
}

const get_default_slot_changes$8 = dirty => ({
	item: dirty[0] & /*items*/ 8,
	index: dirty[0] & /*items*/ 8
});

const get_default_slot_context$8 = ctx => ({
	item: /*item*/ ctx[37],
	index: /*i*/ ctx[39]
});

// (167:2) {#if titleText}
function create_if_block_5$7(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*titleText*/ ctx[10]);
			attr(label_1, "for", /*id*/ ctx[19]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 1024) set_data(t, /*titleText*/ ctx[10]);

			if (dirty[0] & /*id*/ 524288) {
				attr(label_1, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[9]);
			}

			if (dirty[0] & /*hideLabel*/ 131072) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (204:4) {#if invalid}
function create_if_block_4$9(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (207:4) {#if !invalid && warn}
function create_if_block_3$e(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (246:54) {:else}
function create_else_block$e(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 65536) set_data(t, /*label*/ ctx[16]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (246:8) {#if selectedItem}
function create_if_block_2$i(ctx) {
	let t_value = /*itemToString*/ ctx[4](/*selectedItem*/ ctx[21]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, selectedItem*/ 2097168 && t_value !== (t_value = /*itemToString*/ ctx[4](/*selectedItem*/ ctx[21]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (258:4) {#if open}
function create_if_block_1$s(ctx) {
	let listboxmenu;
	let current;

	listboxmenu = new ListBoxMenu$1({
			props: {
				"aria-labelledby": /*id*/ ctx[19],
				id: /*id*/ ctx[19],
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[0] & /*id*/ 524288) listboxmenu_changes["aria-labelledby"] = /*id*/ ctx[19];
			if (dirty[0] & /*id*/ 524288) listboxmenu_changes.id = /*id*/ ctx[19];

			if (dirty[0] & /*items, selectedId, highlightedIndex, ref, itemToString*/ 4194333 | dirty[1] & /*$$scope*/ 16) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (279:44)                
function fallback_block$y(ctx) {
	let t_value = /*itemToString*/ ctx[4](/*item*/ ctx[37]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, items*/ 24 && t_value !== (t_value = /*itemToString*/ ctx[4](/*item*/ ctx[37]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (261:10) <ListBoxMenuItem             id="{item.id}"             active="{selectedId === item.id}"             highlighted="{highlightedIndex === i || selectedId === item.id}"             disabled="{item.disabled}"             on:click="{(e) => {               if (item.disabled) {                 e.stopPropagation();                 return;               }               selectedId = item.id;               ref.focus();             }}"             on:mouseenter="{() => {               if (item.disabled) return;               highlightedIndex = i;             }}"           >
function create_default_slot_2$3(ctx) {
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[27].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[35], get_default_slot_context$8);
	const default_slot_or_fallback = default_slot || fallback_block$y(ctx);

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*items*/ 8 | dirty[1] & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[35],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[35])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[35], dirty, get_default_slot_changes$8),
						get_default_slot_context$8
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*itemToString, items*/ 24)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
		}
	};
}

// (260:8) {#each items as item, i (item.id)}
function create_each_block$d(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[32](/*item*/ ctx[37], ...args);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[33](/*item*/ ctx[37], /*i*/ ctx[39]);
	}

	listboxmenuitem = new ListBoxMenuItem$1({
			props: {
				id: /*item*/ ctx[37].id,
				active: /*selectedId*/ ctx[0] === /*item*/ ctx[37].id,
				highlighted: /*highlightedIndex*/ ctx[22] === /*i*/ ctx[39] || /*selectedId*/ ctx[0] === /*item*/ ctx[37].id,
				disabled: /*item*/ ctx[37].disabled,
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_2);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*items*/ 8) listboxmenuitem_changes.id = /*item*/ ctx[37].id;
			if (dirty[0] & /*selectedId, items*/ 9) listboxmenuitem_changes.active = /*selectedId*/ ctx[0] === /*item*/ ctx[37].id;
			if (dirty[0] & /*highlightedIndex, items, selectedId*/ 4194313) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[22] === /*i*/ ctx[39] || /*selectedId*/ ctx[0] === /*item*/ ctx[37].id;
			if (dirty[0] & /*items*/ 8) listboxmenuitem_changes.disabled = /*item*/ ctx[37].disabled;

			if (dirty[0] & /*itemToString, items*/ 24 | dirty[1] & /*$$scope*/ 16) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (259:6) <ListBoxMenu aria-labelledby="{id}" id="{id}">
function create_default_slot_1$5(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*items*/ ctx[3];
	const get_key = ctx => /*item*/ ctx[37].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$d(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$d(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*items, selectedId, highlightedIndex, ref, itemToString*/ 4194333 | dirty[1] & /*$$scope*/ 16) {
				each_value = /*items*/ ctx[3];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$d, each_1_anchor, get_each_context$d);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (177:2) <ListBox     role="{undefined}"     type="{type}"     size="{size}"     name="{name}"     aria-label="{$$props['aria-label']}"     class="bx--dropdown {direction === 'top' && 'bx--list-box--up'} {invalid &&       'bx--dropdown--invalid'} {!invalid &&       warn &&       'bx--dropdown--warning'} {open && 'bx--dropdown--open'}       {size === 'sm' && 'bx--dropdown--sm'}       {size === 'xl' && 'bx--dropdown--xl'}       {inline && 'bx--dropdown--inline'}       {disabled && 'bx--dropdown--disabled'}       {light && 'bx--dropdown--light'}"     on:click="{({ target }) => {       if (disabled) return;       open = ref.contains(target) ? !open : false;     }}"     disabled="{disabled}"     open="{open}"     invalid="{invalid}"     invalidText="{invalidText}"     light="{light}"     warn="{warn}"     warnText="{warnText}"   >
function create_default_slot$d(ctx) {
	let t0;
	let t1;
	let button;
	let span;
	let t2;
	let listboxmenuicon;
	let t3;
	let if_block3_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*invalid*/ ctx[11] && create_if_block_4$9();
	let if_block1 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_3$e();

	function select_block_type(ctx, dirty) {
		if (/*selectedItem*/ ctx[21]) return create_if_block_2$i;
		return create_else_block$e;
	}

	let current_block_type = select_block_type(ctx);
	let if_block2 = current_block_type(ctx);

	listboxmenuicon = new ListBoxMenuIcon$1({
			props: {
				translateWithId: /*translateWithId*/ ctx[18],
				open: /*open*/ ctx[1]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[29]);
	let if_block3 = /*open*/ ctx[1] && create_if_block_1$s(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			button = element("button");
			span = element("span");
			if_block2.c();
			t2 = space();
			create_component(listboxmenuicon.$$.fragment);
			t3 = space();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			toggle_class(span, "bx--list-box__label", true);
			attr(button, "type", "button");
			attr(button, "tabindex", "0");
			attr(button, "aria-expanded", /*open*/ ctx[1]);
			button.disabled = /*disabled*/ ctx[9];
			attr(button, "translatewithid", /*translateWithId*/ ctx[18]);
			attr(button, "id", /*id*/ ctx[19]);
			toggle_class(button, "bx--list-box__field", true);
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			insert(target, button, anchor);
			append(button, span);
			if_block2.m(span, null);
			append(button, t2);
			mount_component(listboxmenuicon, button, null);
			/*button_binding*/ ctx[30](button);
			insert(target, t3, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, if_block3_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "keydown", /*keydown_handler*/ ctx[31]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[11]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$9();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$e();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(span, null);
				}
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*translateWithId*/ 262144) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[18];
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			listboxmenuicon.$set(listboxmenuicon_changes);

			if (!current || dirty[0] & /*open*/ 2) {
				attr(button, "aria-expanded", /*open*/ ctx[1]);
			}

			if (!current || dirty[0] & /*disabled*/ 512) {
				button.disabled = /*disabled*/ ctx[9];
			}

			if (!current || dirty[0] & /*translateWithId*/ 262144) {
				attr(button, "translatewithid", /*translateWithId*/ ctx[18]);
			}

			if (!current || dirty[0] & /*id*/ 524288) {
				attr(button, "id", /*id*/ ctx[19]);
			}

			if (/*open*/ ctx[1]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*open*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1$s(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxmenuicon.$$.fragment, local);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxmenuicon.$$.fragment, local);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (detaching) detach(button);
			if_block2.d();
			destroy_component(listboxmenuicon);
			/*button_binding*/ ctx[30](null);
			if (detaching) detach(t3);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(if_block3_anchor);
			mounted = false;
			dispose();
		}
	};
}

// (287:2) {#if !inline && !invalid && !warn && helperText}
function create_if_block$14(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[15]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 32768) set_data(t, /*helperText*/ ctx[15]);

			if (dirty[0] & /*disabled*/ 512) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$21(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[10] && create_if_block_5$7(ctx);

	listbox = new ListBox$1({
			props: {
				role: undefined,
				type: /*type*/ ctx[5],
				size: /*size*/ ctx[7],
				name: /*name*/ ctx[20],
				"aria-label": /*$$props*/ ctx[26]['aria-label'],
				class: "bx--dropdown " + (/*direction*/ ctx[6] === 'top' && 'bx--list-box--up') + " " + (/*invalid*/ ctx[11] && 'bx--dropdown--invalid') + " " + (!/*invalid*/ ctx[11] && /*warn*/ ctx[13] && 'bx--dropdown--warning') + " " + (/*open*/ ctx[1] && 'bx--dropdown--open') + "\n      " + (/*size*/ ctx[7] === 'sm' && 'bx--dropdown--sm') + "\n      " + (/*size*/ ctx[7] === 'xl' && 'bx--dropdown--xl') + "\n      " + (/*inline*/ ctx[23] && 'bx--dropdown--inline') + "\n      " + (/*disabled*/ ctx[9] && 'bx--dropdown--disabled') + "\n      " + (/*light*/ ctx[8] && 'bx--dropdown--light'),
				disabled: /*disabled*/ ctx[9],
				open: /*open*/ ctx[1],
				invalid: /*invalid*/ ctx[11],
				invalidText: /*invalidText*/ ctx[12],
				light: /*light*/ ctx[8],
				warn: /*warn*/ ctx[13],
				warnText: /*warnText*/ ctx[14],
				$$slots: { default: [create_default_slot$d] },
				$$scope: { ctx }
			}
		});

	listbox.$on("click", /*click_handler_3*/ ctx[34]);
	let if_block1 = !/*inline*/ ctx[23] && !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15] && create_if_block$14(ctx);
	let div_levels = [/*$$restProps*/ ctx[25]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--dropdown__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--dropdown__wrapper--inline", /*inline*/ ctx[23]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[23]);
			toggle_class(div, "bx--dropdown__wrapper--inline--invalid", /*inline*/ ctx[23] && /*invalid*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[28]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5$7(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*type*/ 32) listbox_changes.type = /*type*/ ctx[5];
			if (dirty[0] & /*size*/ 128) listbox_changes.size = /*size*/ ctx[7];
			if (dirty[0] & /*name*/ 1048576) listbox_changes.name = /*name*/ ctx[20];
			if (dirty[0] & /*$$props*/ 67108864) listbox_changes["aria-label"] = /*$$props*/ ctx[26]['aria-label'];
			if (dirty[0] & /*direction, invalid, warn, open, size, inline, disabled, light*/ 8399810) listbox_changes.class = "bx--dropdown " + (/*direction*/ ctx[6] === 'top' && 'bx--list-box--up') + " " + (/*invalid*/ ctx[11] && 'bx--dropdown--invalid') + " " + (!/*invalid*/ ctx[11] && /*warn*/ ctx[13] && 'bx--dropdown--warning') + " " + (/*open*/ ctx[1] && 'bx--dropdown--open') + "\n      " + (/*size*/ ctx[7] === 'sm' && 'bx--dropdown--sm') + "\n      " + (/*size*/ ctx[7] === 'xl' && 'bx--dropdown--xl') + "\n      " + (/*inline*/ ctx[23] && 'bx--dropdown--inline') + "\n      " + (/*disabled*/ ctx[9] && 'bx--dropdown--disabled') + "\n      " + (/*light*/ ctx[8] && 'bx--dropdown--light');
			if (dirty[0] & /*disabled*/ 512) listbox_changes.disabled = /*disabled*/ ctx[9];
			if (dirty[0] & /*open*/ 2) listbox_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*invalid*/ 2048) listbox_changes.invalid = /*invalid*/ ctx[11];
			if (dirty[0] & /*invalidText*/ 4096) listbox_changes.invalidText = /*invalidText*/ ctx[12];
			if (dirty[0] & /*light*/ 256) listbox_changes.light = /*light*/ ctx[8];
			if (dirty[0] & /*warn*/ 8192) listbox_changes.warn = /*warn*/ ctx[13];
			if (dirty[0] & /*warnText*/ 16384) listbox_changes.warnText = /*warnText*/ ctx[14];

			if (dirty[0] & /*id, items, selectedId, highlightedIndex, ref, itemToString, open, disabled, translateWithId, selectedItem, label, invalid, warn*/ 7154207 | dirty[1] & /*$$scope*/ 16) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*inline*/ ctx[23] && !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$14(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]]));
			toggle_class(div, "bx--dropdown__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--dropdown__wrapper--inline", /*inline*/ ctx[23]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[23]);
			toggle_class(div, "bx--dropdown__wrapper--inline--invalid", /*inline*/ ctx[23] && /*invalid*/ ctx[11]);
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$22($$self, $$props, $$invalidate) {
	let inline;
	let selectedItem;

	const omit_props_names = [
		"items","itemToString","selectedId","type","direction","size","open","light","disabled","titleText","invalid","invalidText","warn","warnText","helperText","label","hideLabel","translateWithId","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;
	let { selectedId } = $$props;
	let { type = "default" } = $$props;
	let { direction = "bottom" } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { titleText = "" } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = undefined } = $$props;
	let { hideLabel = false } = $$props;
	let { translateWithId = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let highlightedIndex = -1;

	function change(dir) {
		let index = highlightedIndex + dir;

		if (index < 0) {
			index = items.length - 1;
		} else if (index >= items.length) {
			index = 0;
		}

		let disabled = items[index].disabled;

		while (disabled) {
			index = index + dir;

			if (index < 0) {
				index = items.length - 1;
			} else if (index >= items.length) {
				index = 0;
			}

			disabled = items[index].disabled;
		}

		$$invalidate(22, highlightedIndex = index);
	}

	const click_handler = ({ target }) => {
		if (open && ref && !ref.contains(target)) {
			$$invalidate(1, open = false);
		}
	};

	const click_handler_1 = e => {
		e.stopPropagation();
		if (disabled) return;
		$$invalidate(1, open = !open);
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const keydown_handler = e => {
		const { key } = e;

		if (['Enter', 'ArrowDown', 'ArrowUp'].includes(key)) {
			e.preventDefault();
		}

		if (key === 'Enter') {
			$$invalidate(1, open = !open);

			if (highlightedIndex > -1 && items[highlightedIndex].id !== selectedId) {
				$$invalidate(0, selectedId = items[highlightedIndex].id);
				$$invalidate(1, open = false);
			}
		} else if (key === 'Tab') {
			$$invalidate(1, open = false);
			ref.blur();
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		}
	};

	const click_handler_2 = (item, e) => {
		if (item.disabled) {
			e.stopPropagation();
			return;
		}

		$$invalidate(0, selectedId = item.id);
		ref.focus();
	};

	const mouseenter_handler = (item, i) => {
		if (item.disabled) return;
		$$invalidate(22, highlightedIndex = i);
	};

	const click_handler_3 = ({ target }) => {
		if (disabled) return;
		$$invalidate(1, open = ref.contains(target) ? !open : false);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(26, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('items' in $$new_props) $$invalidate(3, items = $$new_props.items);
		if ('itemToString' in $$new_props) $$invalidate(4, itemToString = $$new_props.itemToString);
		if ('selectedId' in $$new_props) $$invalidate(0, selectedId = $$new_props.selectedId);
		if ('type' in $$new_props) $$invalidate(5, type = $$new_props.type);
		if ('direction' in $$new_props) $$invalidate(6, direction = $$new_props.direction);
		if ('size' in $$new_props) $$invalidate(7, size = $$new_props.size);
		if ('open' in $$new_props) $$invalidate(1, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(8, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(9, disabled = $$new_props.disabled);
		if ('titleText' in $$new_props) $$invalidate(10, titleText = $$new_props.titleText);
		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(15, helperText = $$new_props.helperText);
		if ('label' in $$new_props) $$invalidate(16, label = $$new_props.label);
		if ('hideLabel' in $$new_props) $$invalidate(17, hideLabel = $$new_props.hideLabel);
		if ('translateWithId' in $$new_props) $$invalidate(18, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(19, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(20, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(35, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*items, selectedId*/ 9) {
			$$invalidate(21, selectedItem = items.find(item => item.id === selectedId));
		}

		if ($$self.$$.dirty[0] & /*selectedId, selectedItem*/ 2097153) {
			if (selectedId !== undefined) {
				dispatch("select", { selectedId, selectedItem });
			}
		}

		if ($$self.$$.dirty[0] & /*type*/ 32) {
			$$invalidate(23, inline = type === "inline");
		}

		if ($$self.$$.dirty[0] & /*open*/ 2) {
			if (!open) {
				$$invalidate(22, highlightedIndex = -1);
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		selectedId,
		open,
		ref,
		items,
		itemToString,
		type,
		direction,
		size,
		light,
		disabled,
		titleText,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		translateWithId,
		id,
		name,
		selectedItem,
		highlightedIndex,
		inline,
		change,
		$$restProps,
		$$props,
		slots,
		click_handler,
		click_handler_1,
		button_binding,
		keydown_handler,
		click_handler_2,
		mouseenter_handler,
		click_handler_3,
		$$scope
	];
}

class Dropdown extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$22,
			create_fragment$21,
			safe_not_equal,
			{
				items: 3,
				itemToString: 4,
				selectedId: 0,
				type: 5,
				direction: 6,
				size: 7,
				open: 1,
				light: 8,
				disabled: 9,
				titleText: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				helperText: 15,
				label: 16,
				hideLabel: 17,
				translateWithId: 18,
				id: 19,
				name: 20,
				ref: 2
			},
			null,
			[-1, -1]
		);
	}
}

var Dropdown$1 = Dropdown;

/* src/Dropdown/DropdownSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$20(ctx) {
	let div1;
	let div0;
	let span;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span = element("span");
			toggle_class(span, "bx--list-box__label", true);
			attr(div0, "role", "button");
			toggle_class(div0, "bx--list-box__field", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--dropdown-v2", true);
			toggle_class(div1, "bx--list-box", true);
			toggle_class(div1, "bx--form-item", true);
			toggle_class(div1, "bx--list-box--inline", /*inline*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--skeleton", true);
			toggle_class(div1, "bx--dropdown-v2", true);
			toggle_class(div1, "bx--list-box", true);
			toggle_class(div1, "bx--form-item", true);
			toggle_class(div1, "bx--list-box--inline", /*inline*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$21($$self, $$props, $$invalidate) {
	const omit_props_names = ["inline"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { inline = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('inline' in $$new_props) $$invalidate(0, inline = $$new_props.inline);
	};

	return [
		inline,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class DropdownSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$21, create_fragment$20, safe_not_equal, { inline: 0 });
	}
}

var DropdownSkeleton$1 = DropdownSkeleton;

/* src/icons/CheckmarkFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$13(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1$(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$13(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2ZM14,21.5908l-5-5L10.5906,15,14,18.4092,21.41,11l1.5957,1.5859Z");
			attr(path1, "fill", "none");
			attr(path1, "d", "M14 21.591L9 16.591 10.591 15 14 18.409 21.41 11 23.005 12.585 14 21.591z");
			attr(path1, "data-icon-path", "inner-path");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$13(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$20($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CheckmarkFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$20, create_fragment$1$, safe_not_equal, { size: 0, title: 1 });
	}
}

var CheckmarkFilled$1 = CheckmarkFilled;

/* src/Loading/Loading.svelte generated by Svelte v3.49.0 */

function create_else_block$d(ctx) {
	let div;
	let label;
	let t0;
	let t1;
	let svg;
	let title;
	let t2;
	let circle;
	let div_aria_live_value;
	let if_block = /*small*/ ctx[0] && create_if_block_2$h(ctx);

	let div_levels = [
		{ "aria-atomic": "true" },
		{ "aria-labelledby": /*id*/ ctx[4] },
		{
			"aria-live": div_aria_live_value = /*active*/ ctx[1] ? 'assertive' : 'off'
		},
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			label = element("label");
			t0 = text(/*description*/ ctx[3]);
			t1 = space();
			svg = svg_element("svg");
			title = svg_element("title");
			t2 = text(/*description*/ ctx[3]);
			if (if_block) if_block.c();
			circle = svg_element("circle");
			attr(label, "id", /*id*/ ctx[4]);
			toggle_class(label, "bx--visually-hidden", true);
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__stroke", true);
			attr(svg, "viewBox", "0 0 100 100");
			toggle_class(svg, "bx--loading__svg", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--loading", true);
			toggle_class(div, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div, "bx--loading--stop", !/*active*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(label, t0);
			append(div, t1);
			append(div, svg);
			append(svg, title);
			append(title, t2);
			if (if_block) if_block.m(svg, null);
			append(svg, circle);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 8) set_data(t0, /*description*/ ctx[3]);

			if (dirty & /*id*/ 16) {
				attr(label, "id", /*id*/ ctx[4]);
			}

			if (dirty & /*description*/ 8) set_data(t2, /*description*/ ctx[3]);

			if (/*small*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2$h(ctx);
					if_block.c();
					if_block.m(svg, circle);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ "aria-atomic": "true" },
				dirty & /*id*/ 16 && { "aria-labelledby": /*id*/ ctx[4] },
				dirty & /*active*/ 2 && div_aria_live_value !== (div_aria_live_value = /*active*/ ctx[1] ? 'assertive' : 'off') && { "aria-live": div_aria_live_value },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--loading", true);
			toggle_class(div, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div, "bx--loading--stop", !/*active*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

// (20:0) {#if withOverlay}
function create_if_block$12(ctx) {
	let div1;
	let div0;
	let label;
	let t0;
	let t1;
	let svg;
	let title;
	let t2;
	let circle;
	let div0_aria_live_value;
	let if_block = /*small*/ ctx[0] && create_if_block_1$r(ctx);
	let div1_levels = [/*$$restProps*/ ctx[6]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			label = element("label");
			t0 = text(/*description*/ ctx[3]);
			t1 = space();
			svg = svg_element("svg");
			title = svg_element("title");
			t2 = text(/*description*/ ctx[3]);
			if (if_block) if_block.c();
			circle = svg_element("circle");
			attr(label, "id", /*id*/ ctx[4]);
			toggle_class(label, "bx--visually-hidden", true);
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__stroke", true);
			attr(svg, "viewBox", "0 0 100 100");
			toggle_class(svg, "bx--loading__svg", true);
			attr(div0, "aria-atomic", "true");
			attr(div0, "aria-labelledby", /*id*/ ctx[4]);
			attr(div0, "aria-live", div0_aria_live_value = /*active*/ ctx[1] ? 'assertive' : 'off');
			toggle_class(div0, "bx--loading", true);
			toggle_class(div0, "bx--loading--small", /*small*/ ctx[0]);
			toggle_class(div0, "bx--loading--stop", !/*active*/ ctx[1]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--loading-overlay", true);
			toggle_class(div1, "bx--loading-overlay--stop", !/*active*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label);
			append(label, t0);
			append(div0, t1);
			append(div0, svg);
			append(svg, title);
			append(title, t2);
			if (if_block) if_block.m(svg, null);
			append(svg, circle);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 8) set_data(t0, /*description*/ ctx[3]);

			if (dirty & /*id*/ 16) {
				attr(label, "id", /*id*/ ctx[4]);
			}

			if (dirty & /*description*/ 8) set_data(t2, /*description*/ ctx[3]);

			if (/*small*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$r(ctx);
					if_block.c();
					if_block.m(svg, circle);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}

			if (dirty & /*id*/ 16) {
				attr(div0, "aria-labelledby", /*id*/ ctx[4]);
			}

			if (dirty & /*active*/ 2 && div0_aria_live_value !== (div0_aria_live_value = /*active*/ ctx[1] ? 'assertive' : 'off')) {
				attr(div0, "aria-live", div0_aria_live_value);
			}

			if (dirty & /*small*/ 1) {
				toggle_class(div0, "bx--loading--small", /*small*/ ctx[0]);
			}

			if (dirty & /*active*/ 2) {
				toggle_class(div0, "bx--loading--stop", !/*active*/ ctx[1]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]]));
			toggle_class(div1, "bx--loading-overlay", true);
			toggle_class(div1, "bx--loading-overlay--stop", !/*active*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
		}
	};
}

// (67:6) {#if small}
function create_if_block_2$h(ctx) {
	let circle;

	return {
		c() {
			circle = svg_element("circle");
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__background", true);
		},
		m(target, anchor) {
			insert(target, circle, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(circle);
		}
	};
}

// (38:8) {#if small}
function create_if_block_1$r(ctx) {
	let circle;

	return {
		c() {
			circle = svg_element("circle");
			attr(circle, "cx", "50%");
			attr(circle, "cy", "50%");
			attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			toggle_class(circle, "bx--loading__background", true);
		},
		m(target, anchor) {
			insert(target, circle, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*spinnerRadius*/ 32) {
				attr(circle, "r", /*spinnerRadius*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(circle);
		}
	};
}

function create_fragment$1_(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*withOverlay*/ ctx[2]) return create_if_block$12;
		return create_else_block$d;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1$($$self, $$props, $$invalidate) {
	let spinnerRadius;
	const omit_props_names = ["small","active","withOverlay","description","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { small = false } = $$props;
	let { active = true } = $$props;
	let { withOverlay = true } = $$props;
	let { description = "Active loading indicator" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('small' in $$new_props) $$invalidate(0, small = $$new_props.small);
		if ('active' in $$new_props) $$invalidate(1, active = $$new_props.active);
		if ('withOverlay' in $$new_props) $$invalidate(2, withOverlay = $$new_props.withOverlay);
		if ('description' in $$new_props) $$invalidate(3, description = $$new_props.description);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*small*/ 1) {
			$$invalidate(5, spinnerRadius = small ? "42" : "44");
		}
	};

	return [small, active, withOverlay, description, id, spinnerRadius, $$restProps];
}

class Loading extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1$, create_fragment$1_, safe_not_equal, {
			small: 0,
			active: 1,
			withOverlay: 2,
			description: 3,
			id: 4
		});
	}
}

var Loading$1 = Loading;

/* src/FileUploader/Filename.svelte generated by Svelte v3.49.0 */

function create_if_block_3$d(ctx) {
	let loading;
	let current;

	const loading_spread_levels = [
		{ description: /*iconDescription*/ ctx[1] },
		/*$$restProps*/ ctx[3],
		{ small: true },
		{ withOverlay: false }
	];

	let loading_props = {};

	for (let i = 0; i < loading_spread_levels.length; i += 1) {
		loading_props = assign(loading_props, loading_spread_levels[i]);
	}

	loading = new Loading$1({ props: loading_props });

	return {
		c() {
			create_component(loading.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loading, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const loading_changes = (dirty & /*iconDescription, $$restProps*/ 10)
			? get_spread_update(loading_spread_levels, [
					dirty & /*iconDescription*/ 2 && { description: /*iconDescription*/ ctx[1] },
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3]),
					loading_spread_levels[2],
					loading_spread_levels[3]
				])
			: {};

			loading.$set(loading_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loading.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loading.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loading, detaching);
		}
	};
}

// (29:0) {#if status === "edit"}
function create_if_block_1$q(ctx) {
	let t;
	let button;
	let close;
	let current;
	let mounted;
	let dispose;
	let if_block = /*invalid*/ ctx[2] && create_if_block_2$g();
	close = new Close$1({});

	let button_levels = [
		{ "aria-label": /*iconDescription*/ ctx[1] },
		{ type: "button" },
		{ tabindex: "0" },
		/*$$restProps*/ ctx[3]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			button = element("button");
			create_component(close.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--file-close", true);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, button, anchor);
			mount_component(close, button, null);
			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[4]),
					listen(button, "keydown", /*keydown_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[2]) {
				if (if_block) {
					if (dirty & /*invalid*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$g();
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty & /*iconDescription*/ 2) && { "aria-label": /*iconDescription*/ ctx[1] },
				{ type: "button" },
				{ tabindex: "0" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(button, "bx--file-close", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(button);
			destroy_component(close);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (30:2) {#if invalid}
function create_if_block_2$g(ctx) {
	let warningfilled;
	let current;
	warningfilled = new WarningFilled$1({ props: { class: "bx--file-invalid" } });

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (46:0) {#if status === "complete"}
function create_if_block$11(ctx) {
	let checkmarkfilled;
	let current;

	const checkmarkfilled_spread_levels = [
		{ "aria-label": /*iconDescription*/ ctx[1] },
		{ title: /*iconDescription*/ ctx[1] },
		{ class: "bx--file-complete" },
		/*$$restProps*/ ctx[3]
	];

	let checkmarkfilled_props = {};

	for (let i = 0; i < checkmarkfilled_spread_levels.length; i += 1) {
		checkmarkfilled_props = assign(checkmarkfilled_props, checkmarkfilled_spread_levels[i]);
	}

	checkmarkfilled = new CheckmarkFilled$1({ props: checkmarkfilled_props });

	return {
		c() {
			create_component(checkmarkfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkfilled, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkmarkfilled_changes = (dirty & /*iconDescription, $$restProps*/ 10)
			? get_spread_update(checkmarkfilled_spread_levels, [
					dirty & /*iconDescription*/ 2 && { "aria-label": /*iconDescription*/ ctx[1] },
					dirty & /*iconDescription*/ 2 && { title: /*iconDescription*/ ctx[1] },
					checkmarkfilled_spread_levels[2],
					dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3])
				])
			: {};

			checkmarkfilled.$set(checkmarkfilled_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkfilled, detaching);
		}
	};
}

function create_fragment$1Z(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*status*/ ctx[0] === "uploading" && create_if_block_3$d(ctx);
	let if_block1 = /*status*/ ctx[0] === "edit" && create_if_block_1$q(ctx);
	let if_block2 = /*status*/ ctx[0] === "complete" && create_if_block$11(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*status*/ ctx[0] === "uploading") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$d(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*status*/ ctx[0] === "edit") {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$q(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*status*/ ctx[0] === "complete") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*status*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$11(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

function instance$1_($$self, $$props, $$invalidate) {
	const omit_props_names = ["status","iconDescription","invalid"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('status' in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ('iconDescription' in $$new_props) $$invalidate(1, iconDescription = $$new_props.iconDescription);
		if ('invalid' in $$new_props) $$invalidate(2, invalid = $$new_props.invalid);
	};

	return [status, iconDescription, invalid, $$restProps, click_handler, keydown_handler];
}

class Filename extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1_, create_fragment$1Z, safe_not_equal, {
			status: 0,
			iconDescription: 1,
			invalid: 2
		});
	}
}

var Filename$1 = Filename;

/* src/FileUploader/FileUploaderButton.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$c = dirty => ({});
const get_labelText_slot_context$c = ctx => ({});

// (83:27)        
function fallback_block$x(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 4) set_data(t, /*labelText*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1Y(ctx) {
	let label;
	let span;
	let label_tabindex_value;
	let t;
	let input;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[15].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[14], get_labelText_slot_context$c);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$x(ctx);

	let input_levels = [
		{ type: "file" },
		{ tabindex: "-1" },
		{ accept: /*accept*/ ctx[3] },
		{ disabled: /*disabled*/ ctx[5] },
		{ id: /*id*/ ctx[10] },
		{ multiple: /*multiple*/ ctx[4] },
		{ name: /*name*/ ctx[11] },
		/*$$restProps*/ ctx[13]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			label = element("label");
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t = space();
			input = element("input");
			attr(span, "role", /*role*/ ctx[8]);
			attr(label, "aria-disabled", /*disabled*/ ctx[5]);
			attr(label, "for", /*id*/ ctx[10]);
			attr(label, "tabindex", label_tabindex_value = /*disabled*/ ctx[5] ? '-1' : /*tabindex*/ ctx[9]);
			toggle_class(label, "bx--btn", true);
			toggle_class(label, "bx--btn--sm", true);
			toggle_class(label, "bx--btn--disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "bx--btn--primary", /*kind*/ ctx[7] === 'primary');
			toggle_class(label, "bx--btn--secondary", /*kind*/ ctx[7] === 'secondary');
			toggle_class(label, "bx--btn--tertiary", /*kind*/ ctx[7] === 'tertiary');
			toggle_class(label, "bx--btn--ghost", /*kind*/ ctx[7] === 'ghost');
			toggle_class(label, "bx--btn--danger", /*kind*/ ctx[7] === 'danger');
			set_attributes(input, input_data);
			toggle_class(input, "bx--visually-hidden", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, span);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			insert(target, t, anchor);
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[19](input);
			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "keydown", /*keydown_handler*/ ctx[17]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[18]),
					listen(input, "change", stop_propagation(/*change_handler*/ ctx[20])),
					listen(input, "click", /*click_handler*/ ctx[16]),
					listen(input, "click", click_handler_1$1)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[14], dirty, get_labelText_slot_changes$c),
						get_labelText_slot_context$c
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 4)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*role*/ 256) {
				attr(span, "role", /*role*/ ctx[8]);
			}

			if (!current || dirty & /*disabled*/ 32) {
				attr(label, "aria-disabled", /*disabled*/ ctx[5]);
			}

			if (!current || dirty & /*id*/ 1024) {
				attr(label, "for", /*id*/ ctx[10]);
			}

			if (!current || dirty & /*disabled, tabindex*/ 544 && label_tabindex_value !== (label_tabindex_value = /*disabled*/ ctx[5] ? '-1' : /*tabindex*/ ctx[9])) {
				attr(label, "tabindex", label_tabindex_value);
			}

			if (dirty & /*disabled*/ 32) {
				toggle_class(label, "bx--btn--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty & /*kind*/ 128) {
				toggle_class(label, "bx--btn--primary", /*kind*/ ctx[7] === 'primary');
			}

			if (dirty & /*kind*/ 128) {
				toggle_class(label, "bx--btn--secondary", /*kind*/ ctx[7] === 'secondary');
			}

			if (dirty & /*kind*/ 128) {
				toggle_class(label, "bx--btn--tertiary", /*kind*/ ctx[7] === 'tertiary');
			}

			if (dirty & /*kind*/ 128) {
				toggle_class(label, "bx--btn--ghost", /*kind*/ ctx[7] === 'ghost');
			}

			if (dirty & /*kind*/ 128) {
				toggle_class(label, "bx--btn--danger", /*kind*/ ctx[7] === 'danger');
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "file" },
				{ tabindex: "-1" },
				(!current || dirty & /*accept*/ 8) && { accept: /*accept*/ ctx[3] },
				(!current || dirty & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				(!current || dirty & /*id*/ 1024) && { id: /*id*/ ctx[10] },
				(!current || dirty & /*multiple*/ 16) && { multiple: /*multiple*/ ctx[4] },
				(!current || dirty & /*name*/ 2048) && { name: /*name*/ ctx[11] },
				dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
			]));

			toggle_class(input, "bx--visually-hidden", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(input);
			/*input_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler_1$1 = ({ target }) => {
	target.value = null;
};

function instance$1Z($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"accept","files","multiple","disabled","disableLabelChanges","kind","labelText","role","tabindex","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { accept = [] } = $$props;
	let { files = [] } = $$props;
	let { multiple = false } = $$props;
	let { disabled = false } = $$props;
	let { disableLabelChanges = false } = $$props;
	let { kind = "primary" } = $$props;
	let { labelText = "Add file" } = $$props;
	let { role = "button" } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let initialLabelText = labelText;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === ' ' || key === 'Enter') {
			ref.click();
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			(($$invalidate(1, ref), $$invalidate(0, files)), $$invalidate(21, initialLabelText));
		});
	}

	const change_handler = ({ target }) => {
		$$invalidate(0, files = [...target.files]);

		if (files && !disableLabelChanges) {
			$$invalidate(2, labelText = files.length > 1
			? `${files.length} files`
			: files[0].name);
		}

		dispatch('change', files);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('accept' in $$new_props) $$invalidate(3, accept = $$new_props.accept);
		if ('files' in $$new_props) $$invalidate(0, files = $$new_props.files);
		if ('multiple' in $$new_props) $$invalidate(4, multiple = $$new_props.multiple);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('disableLabelChanges' in $$new_props) $$invalidate(6, disableLabelChanges = $$new_props.disableLabelChanges);
		if ('kind' in $$new_props) $$invalidate(7, kind = $$new_props.kind);
		if ('labelText' in $$new_props) $$invalidate(2, labelText = $$new_props.labelText);
		if ('role' in $$new_props) $$invalidate(8, role = $$new_props.role);
		if ('tabindex' in $$new_props) $$invalidate(9, tabindex = $$new_props.tabindex);
		if ('id' in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(11, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ref, files*/ 3) {
			if (ref && files.length === 0) {
				$$invalidate(2, labelText = initialLabelText);
				$$invalidate(1, ref.value = null, ref);
			}
		}
	};

	return [
		files,
		ref,
		labelText,
		accept,
		multiple,
		disabled,
		disableLabelChanges,
		kind,
		role,
		tabindex,
		id,
		name,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		keydown_handler_1,
		input_binding,
		change_handler
	];
}

class FileUploaderButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1Z, create_fragment$1Y, safe_not_equal, {
			accept: 3,
			files: 0,
			multiple: 4,
			disabled: 5,
			disableLabelChanges: 6,
			kind: 7,
			labelText: 2,
			role: 8,
			tabindex: 9,
			id: 10,
			name: 11,
			ref: 1
		});
	}
}

var FileUploaderButton$1 = FileUploaderButton;

/* src/FileUploader/FileUploader.svelte generated by Svelte v3.49.0 */

function get_each_context$c(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i].name;
	child_ctx[27] = i;
	return child_ctx;
}

// (131:4) {#each files as { name }
function create_each_block$c(ctx) {
	let span1;
	let p;
	let t0_value = /*name*/ ctx[10] + "";
	let t0;
	let t1;
	let span0;
	let filename;
	let t2;
	let current;

	function keydown_handler_1(...args) {
		return /*keydown_handler_1*/ ctx[20](/*i*/ ctx[27], ...args);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[22](/*i*/ ctx[27]);
	}

	filename = new Filename$1({
			props: {
				iconDescription: /*iconDescription*/ ctx[9],
				status: /*status*/ ctx[1]
			}
		});

	filename.$on("keydown", /*keydown_handler*/ ctx[19]);
	filename.$on("keydown", keydown_handler_1);
	filename.$on("click", /*click_handler_1*/ ctx[21]);
	filename.$on("click", click_handler_2);

	return {
		c() {
			span1 = element("span");
			p = element("p");
			t0 = text(t0_value);
			t1 = space();
			span0 = element("span");
			create_component(filename.$$.fragment);
			t2 = space();
			toggle_class(p, "bx--file-filename", true);
			toggle_class(span0, "bx--file__state-container", true);
			toggle_class(span1, "bx--file__selected-file", true);
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, p);
			append(p, t0);
			append(span1, t1);
			append(span1, span0);
			mount_component(filename, span0, null);
			append(span1, t2);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*files*/ 1) && t0_value !== (t0_value = /*name*/ ctx[10] + "")) set_data(t0, t0_value);
			const filename_changes = {};
			if (dirty & /*iconDescription*/ 512) filename_changes.iconDescription = /*iconDescription*/ ctx[9];
			if (dirty & /*status*/ 2) filename_changes.status = /*status*/ ctx[1];
			filename.$set(filename_changes);
		},
		i(local) {
			if (current) return;
			transition_in(filename.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filename.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			destroy_component(filename);
		}
	};
}

function create_fragment$1X(ctx) {
	let div1;
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let fileuploaderbutton;
	let t4;
	let div0;
	let current;
	let mounted;
	let dispose;

	fileuploaderbutton = new FileUploaderButton$1({
			props: {
				disabled: /*disabled*/ ctx[2],
				disableLabelChanges: true,
				labelText: /*buttonLabel*/ ctx[8],
				accept: /*accept*/ ctx[3],
				name: /*name*/ ctx[10],
				multiple: /*multiple*/ ctx[4],
				kind: /*kind*/ ctx[7]
			}
		});

	fileuploaderbutton.$on("change", /*change_handler*/ ctx[17]);
	fileuploaderbutton.$on("change", /*change_handler_1*/ ctx[18]);
	let each_value = /*files*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let div1_levels = [/*$$restProps*/ ctx[11]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			p0 = element("p");
			t0 = text(/*labelTitle*/ ctx[6]);
			t1 = space();
			p1 = element("p");
			t2 = text(/*labelDescription*/ ctx[5]);
			t3 = space();
			create_component(fileuploaderbutton.$$.fragment);
			t4 = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(p0, "bx--file--label", true);
			toggle_class(p0, "bx--label-description--disabled", /*disabled*/ ctx[2]);
			toggle_class(p1, "bx--label-description", true);
			toggle_class(p1, "bx--label-description--disabled", /*disabled*/ ctx[2]);
			toggle_class(div0, "bx--file-container", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p0);
			append(p0, t0);
			append(div1, t1);
			append(div1, p1);
			append(p1, t2);
			append(div1, t3);
			mount_component(fileuploaderbutton, div1, null);
			append(div1, t4);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[13]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*labelTitle*/ 64) set_data(t0, /*labelTitle*/ ctx[6]);

			if (dirty & /*disabled*/ 4) {
				toggle_class(p0, "bx--label-description--disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*labelDescription*/ 32) set_data(t2, /*labelDescription*/ ctx[5]);

			if (dirty & /*disabled*/ 4) {
				toggle_class(p1, "bx--label-description--disabled", /*disabled*/ ctx[2]);
			}

			const fileuploaderbutton_changes = {};
			if (dirty & /*disabled*/ 4) fileuploaderbutton_changes.disabled = /*disabled*/ ctx[2];
			if (dirty & /*buttonLabel*/ 256) fileuploaderbutton_changes.labelText = /*buttonLabel*/ ctx[8];
			if (dirty & /*accept*/ 8) fileuploaderbutton_changes.accept = /*accept*/ ctx[3];
			if (dirty & /*name*/ 1024) fileuploaderbutton_changes.name = /*name*/ ctx[10];
			if (dirty & /*multiple*/ 16) fileuploaderbutton_changes.multiple = /*multiple*/ ctx[4];
			if (dirty & /*kind*/ 128) fileuploaderbutton_changes.kind = /*kind*/ ctx[7];
			fileuploaderbutton.$set(fileuploaderbutton_changes);

			if (dirty & /*iconDescription, status, files*/ 515) {
				each_value = /*files*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$c(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$c(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(fileuploaderbutton.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(fileuploaderbutton.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(fileuploaderbutton);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1Y($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"status","disabled","accept","files","multiple","clearFiles","labelDescription","labelTitle","kind","buttonLabel","iconDescription","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { disabled = false } = $$props;
	let { accept = [] } = $$props;
	let { files = [] } = $$props;
	let { multiple = false } = $$props;

	const clearFiles = () => {
		$$invalidate(0, files = []);
	};

	let { labelDescription = "" } = $$props;
	let { labelTitle = "" } = $$props;
	let { kind = "primary" } = $$props;
	let { buttonLabel = "" } = $$props;
	let { iconDescription = "Provide icon description" } = $$props;
	let { name = "" } = $$props;
	const dispatch = createEventDispatcher();
	let prevFiles = [];

	/** @type {(file: File) => string} */
	const getFileId = file => file.lastModified + file.name;

	afterUpdate(() => {
		const fileIds = files.map(getFileId);
		const prevFileIds = prevFiles.map(getFileId);
		const addedIds = fileIds.filter(_ => !prevFileIds.includes(_));
		const removedIds = prevFileIds.filter(_ => !fileIds.includes(_));

		if (addedIds.length > 0) {
			dispatch("add", addedIds.map(id => files.find(file => id === getFileId(file))));
		}

		if (removedIds.length > 0) {
			dispatch("remove", removedIds.map(id => prevFiles.find(file => id === getFileId(file))));
		}

		prevFiles = [...files];
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler_1 = e => {
		$$invalidate(0, files = e.detail);
	};

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler_1 = (i, { key }) => {
		if (key === ' ' || key === 'Enter') {
			$$invalidate(0, files = files.filter((_, index) => index !== i));
		}
	};

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_2 = i => {
		$$invalidate(0, files = files.filter((_, index) => index !== i));
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('status' in $$new_props) $$invalidate(1, status = $$new_props.status);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('accept' in $$new_props) $$invalidate(3, accept = $$new_props.accept);
		if ('files' in $$new_props) $$invalidate(0, files = $$new_props.files);
		if ('multiple' in $$new_props) $$invalidate(4, multiple = $$new_props.multiple);
		if ('labelDescription' in $$new_props) $$invalidate(5, labelDescription = $$new_props.labelDescription);
		if ('labelTitle' in $$new_props) $$invalidate(6, labelTitle = $$new_props.labelTitle);
		if ('kind' in $$new_props) $$invalidate(7, kind = $$new_props.kind);
		if ('buttonLabel' in $$new_props) $$invalidate(8, buttonLabel = $$new_props.buttonLabel);
		if ('iconDescription' in $$new_props) $$invalidate(9, iconDescription = $$new_props.iconDescription);
		if ('name' in $$new_props) $$invalidate(10, name = $$new_props.name);
	};

	return [
		files,
		status,
		disabled,
		accept,
		multiple,
		labelDescription,
		labelTitle,
		kind,
		buttonLabel,
		iconDescription,
		name,
		$$restProps,
		clearFiles,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		change_handler_1,
		keydown_handler,
		keydown_handler_1,
		click_handler_1,
		click_handler_2
	];
}

class FileUploader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1Y, create_fragment$1X, safe_not_equal, {
			status: 1,
			disabled: 2,
			accept: 3,
			files: 0,
			multiple: 4,
			clearFiles: 12,
			labelDescription: 5,
			labelTitle: 6,
			kind: 7,
			buttonLabel: 8,
			iconDescription: 9,
			name: 10
		});
	}

	get clearFiles() {
		return this.$$.ctx[12];
	}
}

var FileUploader$1 = FileUploader;

/* src/FileUploader/FileUploaderItem.svelte generated by Svelte v3.49.0 */

function create_if_block$10(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let if_block = /*errorBody*/ ctx[5] && create_if_block_1$p(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(/*errorSubject*/ ctx[4]);
			t1 = space();
			if (if_block) if_block.c();
			toggle_class(div0, "bx--form-requirement__title", true);
			toggle_class(div1, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p(ctx, dirty) {
			if (dirty & /*errorSubject*/ 16) set_data(t0, /*errorSubject*/ ctx[4]);

			if (/*errorBody*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$p(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
		}
	};
}

// (73:6) {#if errorBody}
function create_if_block_1$p(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*errorBody*/ ctx[5]);
			toggle_class(p, "bx--form-requirement__supplement", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*errorBody*/ 32) set_data(t, /*errorBody*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$1W(ctx) {
	let span1;
	let p;
	let t0;
	let t1;
	let span0;
	let filename;
	let t2;
	let current;
	let mounted;
	let dispose;

	filename = new Filename$1({
			props: {
				iconDescription: /*iconDescription*/ ctx[2],
				status: /*status*/ ctx[0],
				invalid: /*invalid*/ ctx[3]
			}
		});

	filename.$on("keydown", /*keydown_handler*/ ctx[13]);
	filename.$on("click", /*click_handler*/ ctx[14]);
	let if_block = /*invalid*/ ctx[3] && /*errorSubject*/ ctx[4] && create_if_block$10(ctx);
	let span1_levels = [{ id: /*id*/ ctx[6] }, /*$$restProps*/ ctx[9]];
	let span1_data = {};

	for (let i = 0; i < span1_levels.length; i += 1) {
		span1_data = assign(span1_data, span1_levels[i]);
	}

	return {
		c() {
			span1 = element("span");
			p = element("p");
			t0 = text(/*name*/ ctx[7]);
			t1 = space();
			span0 = element("span");
			create_component(filename.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			toggle_class(p, "bx--file-filename", true);
			toggle_class(span0, "bx--file__state-container", true);
			set_attributes(span1, span1_data);
			toggle_class(span1, "bx--file__selected-file", true);
			toggle_class(span1, "bx--file__selected-file--invalid", /*invalid*/ ctx[3]);
			toggle_class(span1, "bx--file__selected-file--md", /*size*/ ctx[1] === 'field');
			toggle_class(span1, "bx--file__selected-file--sm", /*size*/ ctx[1] === 'small');
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, p);
			append(p, t0);
			append(span1, t1);
			append(span1, span0);
			mount_component(filename, span0, null);
			append(span1, t2);
			if (if_block) if_block.m(span1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span1, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(span1, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(span1, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 128) set_data(t0, /*name*/ ctx[7]);
			const filename_changes = {};
			if (dirty & /*iconDescription*/ 4) filename_changes.iconDescription = /*iconDescription*/ ctx[2];
			if (dirty & /*status*/ 1) filename_changes.status = /*status*/ ctx[0];
			if (dirty & /*invalid*/ 8) filename_changes.invalid = /*invalid*/ ctx[3];
			filename.$set(filename_changes);

			if (/*invalid*/ ctx[3] && /*errorSubject*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$10(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(span1, span1_data = get_spread_update(span1_levels, [
				(!current || dirty & /*id*/ 64) && { id: /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(span1, "bx--file__selected-file", true);
			toggle_class(span1, "bx--file__selected-file--invalid", /*invalid*/ ctx[3]);
			toggle_class(span1, "bx--file__selected-file--md", /*size*/ ctx[1] === 'field');
			toggle_class(span1, "bx--file__selected-file--sm", /*size*/ ctx[1] === 'small');
		},
		i(local) {
			if (current) return;
			transition_in(filename.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(filename.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			destroy_component(filename);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1X($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"status","size","iconDescription","invalid","errorSubject","errorBody","id","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "uploading" } = $$props;
	let { size = "default" } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;
	let { errorSubject = "" } = $$props;
	let { errorBody = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	const dispatch = createEventDispatcher();

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === ' ' || key === 'Enter') {
			dispatch('delete', id);
		}
	};

	const click_handler = () => {
		dispatch('delete', id);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('status' in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('iconDescription' in $$new_props) $$invalidate(2, iconDescription = $$new_props.iconDescription);
		if ('invalid' in $$new_props) $$invalidate(3, invalid = $$new_props.invalid);
		if ('errorSubject' in $$new_props) $$invalidate(4, errorSubject = $$new_props.errorSubject);
		if ('errorBody' in $$new_props) $$invalidate(5, errorBody = $$new_props.errorBody);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(7, name = $$new_props.name);
	};

	return [
		status,
		size,
		iconDescription,
		invalid,
		errorSubject,
		errorBody,
		id,
		name,
		dispatch,
		$$restProps,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler
	];
}

class FileUploaderItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1X, create_fragment$1W, safe_not_equal, {
			status: 0,
			size: 1,
			iconDescription: 2,
			invalid: 3,
			errorSubject: 4,
			errorBody: 5,
			id: 6,
			name: 7
		});
	}
}

var FileUploaderItem$1 = FileUploaderItem;

/* src/FileUploader/FileUploaderDropContainer.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$b = dirty => ({});
const get_labelText_slot_context$b = ctx => ({});

// (101:29)          
function fallback_block$w(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 32) set_data(t, /*labelText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1V(ctx) {
	let div1;
	let label;
	let div0;
	let t;
	let input;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[15].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[14], get_labelText_slot_context$b);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$w(ctx);
	let div1_levels = [/*$$restProps*/ ctx[13]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			label = element("label");
			div0 = element("div");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t = space();
			input = element("input");
			attr(div0, "role", /*role*/ ctx[6]);
			toggle_class(div0, "bx--file__drop-container", true);
			toggle_class(div0, "bx--file__drop-container--drag-over", /*over*/ ctx[11]);
			attr(label, "for", /*id*/ ctx[9]);
			attr(label, "tabindex", /*tabindex*/ ctx[8]);
			toggle_class(label, "bx--file-browse-btn", true);
			toggle_class(label, "bx--file-browse-btn--disabled", /*disabled*/ ctx[7]);
			attr(input, "type", "file");
			attr(input, "tabindex", "-1");
			attr(input, "id", /*id*/ ctx[9]);
			input.disabled = /*disabled*/ ctx[7];
			attr(input, "accept", /*accept*/ ctx[2]);
			attr(input, "name", /*name*/ ctx[10]);
			input.multiple = /*multiple*/ ctx[3];
			toggle_class(input, "bx--file-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--file", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(label, div0);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(div0, null);
			}

			append(div1, t);
			append(div1, input);
			/*input_binding*/ ctx[22](input);
			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "keydown", /*keydown_handler*/ ctx[20]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[21]),
					listen(input, "change", /*change_handler*/ ctx[23]),
					listen(input, "click", /*click_handler*/ ctx[19]),
					listen(input, "click", click_handler_1),
					listen(div1, "dragover", /*dragover_handler*/ ctx[16]),
					listen(div1, "dragover", stop_propagation(prevent_default(/*dragover_handler_1*/ ctx[24]))),
					listen(div1, "dragleave", /*dragleave_handler*/ ctx[17]),
					listen(div1, "dragleave", stop_propagation(prevent_default(/*dragleave_handler_1*/ ctx[25]))),
					listen(div1, "drop", /*drop_handler*/ ctx[18]),
					listen(div1, "drop", stop_propagation(prevent_default(/*drop_handler_1*/ ctx[26])))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[14], dirty, get_labelText_slot_changes$b),
						get_labelText_slot_context$b
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 32)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*role*/ 64) {
				attr(div0, "role", /*role*/ ctx[6]);
			}

			if (dirty & /*over*/ 2048) {
				toggle_class(div0, "bx--file__drop-container--drag-over", /*over*/ ctx[11]);
			}

			if (!current || dirty & /*id*/ 512) {
				attr(label, "for", /*id*/ ctx[9]);
			}

			if (!current || dirty & /*tabindex*/ 256) {
				attr(label, "tabindex", /*tabindex*/ ctx[8]);
			}

			if (dirty & /*disabled*/ 128) {
				toggle_class(label, "bx--file-browse-btn--disabled", /*disabled*/ ctx[7]);
			}

			if (!current || dirty & /*id*/ 512) {
				attr(input, "id", /*id*/ ctx[9]);
			}

			if (!current || dirty & /*disabled*/ 128) {
				input.disabled = /*disabled*/ ctx[7];
			}

			if (!current || dirty & /*accept*/ 4) {
				attr(input, "accept", /*accept*/ ctx[2]);
			}

			if (!current || dirty & /*name*/ 1024) {
				attr(input, "name", /*name*/ ctx[10]);
			}

			if (!current || dirty & /*multiple*/ 8) {
				input.multiple = /*multiple*/ ctx[3];
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]]));
			toggle_class(div1, "bx--file", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			/*input_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const click_handler_1 = ({ target }) => {
	target.value = null;
};

function instance$1W($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"accept","files","multiple","validateFiles","labelText","role","disabled","tabindex","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { accept = [] } = $$props;
	let { files = [] } = $$props;
	let { multiple = false } = $$props;
	let { validateFiles = files => files } = $$props;
	let { labelText = "Add file" } = $$props;
	let { role = "button" } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let over = false;

	function dragover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function dragleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function drop_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === ' ' || key === 'Enter') {
			ref.click();
		}
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler = ({ target }) => {
		$$invalidate(0, files = validateFiles([...target.files]));
		dispatch('add', files);
		dispatch('change', files);
	};

	const dragover_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(11, over = true);
			dataTransfer.dropEffect = 'copy';
		}
	};

	const dragleave_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(11, over = false);
			dataTransfer.dropEffect = 'move';
		}
	};

	const drop_handler_1 = ({ dataTransfer }) => {
		if (!disabled) {
			$$invalidate(11, over = false);
			$$invalidate(0, files = validateFiles([...dataTransfer.files]));
			dispatch('add', files);
			dispatch('change', files);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('accept' in $$new_props) $$invalidate(2, accept = $$new_props.accept);
		if ('files' in $$new_props) $$invalidate(0, files = $$new_props.files);
		if ('multiple' in $$new_props) $$invalidate(3, multiple = $$new_props.multiple);
		if ('validateFiles' in $$new_props) $$invalidate(4, validateFiles = $$new_props.validateFiles);
		if ('labelText' in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ('role' in $$new_props) $$invalidate(6, role = $$new_props.role);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('tabindex' in $$new_props) $$invalidate(8, tabindex = $$new_props.tabindex);
		if ('id' in $$new_props) $$invalidate(9, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(10, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	return [
		files,
		ref,
		accept,
		multiple,
		validateFiles,
		labelText,
		role,
		disabled,
		tabindex,
		id,
		name,
		over,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		dragover_handler,
		dragleave_handler,
		drop_handler,
		click_handler,
		keydown_handler,
		keydown_handler_1,
		input_binding,
		change_handler,
		dragover_handler_1,
		dragleave_handler_1,
		drop_handler_1
	];
}

class FileUploaderDropContainer extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1W, create_fragment$1V, safe_not_equal, {
			accept: 2,
			files: 0,
			multiple: 3,
			validateFiles: 4,
			labelText: 5,
			role: 6,
			disabled: 7,
			tabindex: 8,
			id: 9,
			name: 10,
			ref: 1
		});
	}
}

var FileUploaderDropContainer$1 = FileUploaderDropContainer;

/* src/FileUploader/FileUploaderSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$1U(ctx) {
	let div;
	let skeletontext0;
	let t0;
	let skeletontext1;
	let t1;
	let buttonskeleton;
	let current;
	let mounted;
	let dispose;
	skeletontext0 = new SkeletonText$1({ props: { heading: true, width: "100px" } });

	skeletontext1 = new SkeletonText$1({
			props: {
				width: "225px",
				class: "bx--label-description"
			}
		});

	buttonskeleton = new ButtonSkeleton$1({});
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			create_component(skeletontext0.$$.fragment);
			t0 = space();
			create_component(skeletontext1.$$.fragment);
			t1 = space();
			create_component(buttonskeleton.$$.fragment);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(skeletontext0, div, null);
			append(div, t0);
			mount_component(skeletontext1, div, null);
			append(div, t1);
			mount_component(buttonskeleton, div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(buttonskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(buttonskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(buttonskeleton);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1V($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FileUploaderSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1V, create_fragment$1U, safe_not_equal, {});
	}
}

var FileUploaderSkeleton$1 = FileUploaderSkeleton;

/* src/Form/Form.svelte generated by Svelte v3.49.0 */

function create_fragment$1T(ctx) {
	let form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let form_levels = [/*$$restProps*/ ctx[1]];
	let form_data = {};

	for (let i = 0; i < form_levels.length; i += 1) {
		form_data = assign(form_data, form_levels[i]);
	}

	return {
		c() {
			form = element("form");
			if (default_slot) default_slot.c();
			set_attributes(form, form_data);
			toggle_class(form, "bx--form", true);
		},
		m(target, anchor) {
			insert(target, form, anchor);

			if (default_slot) {
				default_slot.m(form, null);
			}

			/*form_binding*/ ctx[10](form);
			current = true;

			if (!mounted) {
				dispose = [
					listen(form, "click", /*click_handler*/ ctx[4]),
					listen(form, "keydown", /*keydown_handler*/ ctx[5]),
					listen(form, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(form, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(form, "mouseleave", /*mouseleave_handler*/ ctx[8]),
					listen(form, "submit", /*submit_handler*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(form, form_data = get_spread_update(form_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(form, "bx--form", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			if (default_slot) default_slot.d(detaching);
			/*form_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1U($$self, $$props, $$invalidate) {
	const omit_props_names = ["ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function submit_handler(event) {
		bubble.call(this, $$self, event);
	}

	function form_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler,
		form_binding
	];
}

class Form extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1U, create_fragment$1T, safe_not_equal, { ref: 0 });
	}
}

var Form$1 = Form;

/* src/FluidForm/FluidForm.svelte generated by Svelte v3.49.0 */

function create_default_slot$c(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1S(ctx) {
	let form;
	let current;

	const form_spread_levels = [
		/*$$restProps*/ ctx[0],
		{
			class: "bx--form--fluid " + /*$$restProps*/ ctx[0].class
		}
	];

	let form_props = {
		$$slots: { default: [create_default_slot$c] },
		$$scope: { ctx }
	};

	for (let i = 0; i < form_spread_levels.length; i += 1) {
		form_props = assign(form_props, form_spread_levels[i]);
	}

	form = new Form$1({ props: form_props });
	form.$on("click", /*click_handler*/ ctx[2]);
	form.$on("keydown", /*keydown_handler*/ ctx[3]);
	form.$on("mouseover", /*mouseover_handler*/ ctx[4]);
	form.$on("mouseenter", /*mouseenter_handler*/ ctx[5]);
	form.$on("mouseleave", /*mouseleave_handler*/ ctx[6]);
	form.$on("submit", /*submit_handler*/ ctx[7]);

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const form_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(form_spread_levels, [
					get_spread_object(/*$$restProps*/ ctx[0]),
					{
						class: "bx--form--fluid " + /*$$restProps*/ ctx[0].class
					}
				])
			: {};

			if (dirty & /*$$scope*/ 256) {
				form_changes.$$scope = { dirty, ctx };
			}

			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

function instance$1T($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	setContext("Form", { isFluid: true });

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function submit_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		keydown_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		submit_handler,
		$$scope
	];
}

class FluidForm extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1T, create_fragment$1S, safe_not_equal, {});
	}
}

var FluidForm$1 = FluidForm;

/* src/FormGroup/FormGroup.svelte generated by Svelte v3.49.0 */

function create_if_block_1$o(ctx) {
	let legend;
	let t;
	let legend_id_value;

	return {
		c() {
			legend = element("legend");
			t = text(/*legendText*/ ctx[4]);
			attr(legend, "id", legend_id_value = /*legendId*/ ctx[5] || /*$$restProps*/ ctx[6]['aria-labelledby']);
			toggle_class(legend, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, legend, anchor);
			append(legend, t);
		},
		p(ctx, dirty) {
			if (dirty & /*legendText*/ 16) set_data(t, /*legendText*/ ctx[4]);

			if (dirty & /*legendId, $$restProps*/ 96 && legend_id_value !== (legend_id_value = /*legendId*/ ctx[5] || /*$$restProps*/ ctx[6]['aria-labelledby'])) {
				attr(legend, "id", legend_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(legend);
		}
	};
}

// (40:2) {#if message}
function create_if_block$$(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*messageText*/ ctx[3]);
			toggle_class(div, "bx--form__requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*messageText*/ 8) set_data(t, /*messageText*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1R(ctx) {
	let fieldset;
	let t0;
	let t1;
	let fieldset_data_invalid_value;
	let fieldset_aria_labelledby_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*legendText*/ ctx[4] && create_if_block_1$o(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let if_block1 = /*message*/ ctx[2] && create_if_block$$(ctx);

	let fieldset_levels = [
		{
			"data-invalid": fieldset_data_invalid_value = /*invalid*/ ctx[1] || undefined
		},
		{
			"aria-labelledby": fieldset_aria_labelledby_value = /*$$restProps*/ ctx[6]['aria-labelledby'] || /*legendId*/ ctx[5]
		},
		/*$$restProps*/ ctx[6]
	];

	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	return {
		c() {
			fieldset = element("fieldset");
			if (if_block0) if_block0.c();
			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(fieldset, fieldset_data);
			toggle_class(fieldset, "bx--fieldset", true);
			toggle_class(fieldset, "bx--fieldset--no-margin", /*noMargin*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);
			if (if_block0) if_block0.m(fieldset, null);
			append(fieldset, t0);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			append(fieldset, t1);
			if (if_block1) if_block1.m(fieldset, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(fieldset, "click", /*click_handler*/ ctx[9]),
					listen(fieldset, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(fieldset, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(fieldset, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*legendText*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$o(ctx);
					if_block0.c();
					if_block0.m(fieldset, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if (/*message*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$$(ctx);
					if_block1.c();
					if_block1.m(fieldset, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				(!current || dirty & /*invalid*/ 2 && fieldset_data_invalid_value !== (fieldset_data_invalid_value = /*invalid*/ ctx[1] || undefined)) && {
					"data-invalid": fieldset_data_invalid_value
				},
				(!current || dirty & /*$$restProps, legendId*/ 96 && fieldset_aria_labelledby_value !== (fieldset_aria_labelledby_value = /*$$restProps*/ ctx[6]['aria-labelledby'] || /*legendId*/ ctx[5])) && {
					"aria-labelledby": fieldset_aria_labelledby_value
				},
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(fieldset, "bx--fieldset", true);
			toggle_class(fieldset, "bx--fieldset--no-margin", /*noMargin*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			if (if_block0) if_block0.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1S($$self, $$props, $$invalidate) {
	const omit_props_names = ["noMargin","invalid","message","messageText","legendText","legendId"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { noMargin = false } = $$props;
	let { invalid = false } = $$props;
	let { message = false } = $$props;
	let { messageText = "" } = $$props;
	let { legendText = "" } = $$props;
	let { legendId = "" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('noMargin' in $$new_props) $$invalidate(0, noMargin = $$new_props.noMargin);
		if ('invalid' in $$new_props) $$invalidate(1, invalid = $$new_props.invalid);
		if ('message' in $$new_props) $$invalidate(2, message = $$new_props.message);
		if ('messageText' in $$new_props) $$invalidate(3, messageText = $$new_props.messageText);
		if ('legendText' in $$new_props) $$invalidate(4, legendText = $$new_props.legendText);
		if ('legendId' in $$new_props) $$invalidate(5, legendId = $$new_props.legendId);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		noMargin,
		invalid,
		message,
		messageText,
		legendText,
		legendId,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormGroup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1S, create_fragment$1R, safe_not_equal, {
			noMargin: 0,
			invalid: 1,
			message: 2,
			messageText: 3,
			legendText: 4,
			legendId: 5
		});
	}
}

var FormGroup$1 = FormGroup;

/* src/FormItem/FormItem.svelte generated by Svelte v3.49.0 */

function create_fragment$1Q(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1R($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1R, create_fragment$1Q, safe_not_equal, {});
	}
}

var FormItem$1 = FormItem;

/* src/FormLabel/FormLabel.svelte generated by Svelte v3.49.0 */

function create_fragment$1P(ctx) {
	let label;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let label_levels = [{ for: /*id*/ ctx[0] }, /*$$restProps*/ ctx[1]];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			label = element("label");
			if (default_slot) default_slot.c();
			set_attributes(label, label_data);
			toggle_class(label, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (default_slot) {
				default_slot.m(label, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "click", /*click_handler*/ ctx[4]),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 1) && { for: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(label, "bx--label", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1Q($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		id,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class FormLabel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1Q, create_fragment$1P, safe_not_equal, { id: 0 });
	}
}

var FormLabel$1 = FormLabel;

/* src/Grid/Grid.svelte generated by Svelte v3.49.0 */

const get_default_slot_changes$7 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$7 = ctx => ({ props: /*props*/ ctx[1] });

// (54:0) {:else}
function create_else_block$c(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (52:0) {#if as}
function create_if_block$_(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$7);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 514)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$7),
						get_default_slot_context$7
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1O(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$_, create_else_block$c];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1P($$self, $$props, $$invalidate) {
	let props;

	const omit_props_names = [
		"as","condensed","narrow","fullWidth","noGutter","noGutterLeft","noGutterRight","padding"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { fullWidth = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('fullWidth' in $$new_props) $$invalidate(4, fullWidth = $$new_props.fullWidth);
		if ('noGutter' in $$new_props) $$invalidate(5, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(6, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(7, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(8, padding = $$new_props.padding);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--grid",
				condensed && "bx--grid--condensed",
				narrow && "bx--grid--narrow",
				fullWidth && "bx--grid--full-width",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		fullWidth,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Grid extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1P, create_fragment$1O, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			fullWidth: 4,
			noGutter: 5,
			noGutterLeft: 6,
			noGutterRight: 7,
			padding: 8
		});
	}
}

var Grid$1 = Grid;

/* src/Grid/Row.svelte generated by Svelte v3.49.0 */

const get_default_slot_changes$6 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$6 = ctx => ({ props: /*props*/ ctx[1] });

// (50:0) {:else}
function create_else_block$b(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (48:0) {#if as}
function create_if_block$Z(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$6);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 258)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$6),
						get_default_slot_context$6
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1N(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$Z, create_else_block$b];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1O($$self, $$props, $$invalidate) {
	let props;
	const omit_props_names = ["as","condensed","narrow","noGutter","noGutterLeft","noGutterRight","padding"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { condensed = false } = $$props;
	let { narrow = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('condensed' in $$new_props) $$invalidate(2, condensed = $$new_props.condensed);
		if ('narrow' in $$new_props) $$invalidate(3, narrow = $$new_props.narrow);
		if ('noGutter' in $$new_props) $$invalidate(4, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(5, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(6, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(7, padding = $$new_props.padding);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				"bx--row",
				condensed && "bx--row--condensed",
				narrow && "bx--row--narrow",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				padding && "bx--row-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		condensed,
		narrow,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		$$scope,
		slots
	];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1O, create_fragment$1N, safe_not_equal, {
			as: 0,
			condensed: 2,
			narrow: 3,
			noGutter: 4,
			noGutterLeft: 5,
			noGutterRight: 6,
			padding: 7
		});
	}
}

var Row$1 = Row;

/* src/Grid/Column.svelte generated by Svelte v3.49.0 */

const get_default_slot_changes$5 = dirty => ({ props: dirty & /*props*/ 2 });
const get_default_slot_context$5 = ctx => ({ props: /*props*/ ctx[1] });

// (115:0) {:else}
function create_else_block$a(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
	let div_levels = [/*props*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*props*/ 2 && /*props*/ ctx[1]]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (113:0) {#if as}
function create_if_block$Y(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context$5);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, props*/ 8194)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, get_default_slot_changes$5),
						get_default_slot_context$5
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1M(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$Y, create_else_block$a];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*as*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1N($$self, $$props, $$invalidate) {
	let columnClass;
	let props;

	const omit_props_names = [
		"as","noGutter","noGutterLeft","noGutterRight","padding","aspectRatio","sm","md","lg","xlg","max"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { as = false } = $$props;
	let { noGutter = false } = $$props;
	let { noGutterLeft = false } = $$props;
	let { noGutterRight = false } = $$props;
	let { padding = false } = $$props;
	let { aspectRatio = undefined } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xlg = undefined } = $$props;
	let { max = undefined } = $$props;
	const breakpoints = ["sm", "md", "lg", "xlg", "max"];

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('as' in $$new_props) $$invalidate(0, as = $$new_props.as);
		if ('noGutter' in $$new_props) $$invalidate(2, noGutter = $$new_props.noGutter);
		if ('noGutterLeft' in $$new_props) $$invalidate(3, noGutterLeft = $$new_props.noGutterLeft);
		if ('noGutterRight' in $$new_props) $$invalidate(4, noGutterRight = $$new_props.noGutterRight);
		if ('padding' in $$new_props) $$invalidate(5, padding = $$new_props.padding);
		if ('aspectRatio' in $$new_props) $$invalidate(6, aspectRatio = $$new_props.aspectRatio);
		if ('sm' in $$new_props) $$invalidate(7, sm = $$new_props.sm);
		if ('md' in $$new_props) $$invalidate(8, md = $$new_props.md);
		if ('lg' in $$new_props) $$invalidate(9, lg = $$new_props.lg);
		if ('xlg' in $$new_props) $$invalidate(10, xlg = $$new_props.xlg);
		if ('max' in $$new_props) $$invalidate(11, max = $$new_props.max);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*sm, md, lg, xlg, max*/ 3968) {
			$$invalidate(12, columnClass = [sm, md, lg, xlg, max].map((breakpoint, i) => {
				const name = breakpoints[i];

				if (breakpoint === true) {
					return `bx--col-${name}`;
				} else if (typeof breakpoint === "number") {
					return `bx--col-${name}-${breakpoint}`;
				} else if (typeof breakpoint === "object") {
					let bp = [];

					if (typeof breakpoint.span === "number") {
						bp = [...bp, `bx--col-${name}-${breakpoint.span}`];
					} else if (breakpoint.span === true) {
						bp = [...bp, `bx--col-${name}`];
					}

					if (typeof breakpoint.offset === "number") {
						bp = [...bp, `bx--offset-${name}-${breakpoint.offset}`];
					}

					return bp.join(" ");
				}
			}).filter(Boolean).join(" "));
		}

		$$invalidate(1, props = {
			...$$restProps,
			class: [
				$$restProps.class,
				columnClass,
				!columnClass && "bx--col",
				noGutter && "bx--no-gutter",
				noGutterLeft && "bx--no-gutter--left",
				noGutterRight && "bx--no-gutter--right",
				aspectRatio && `bx--aspect-ratio bx--aspect-ratio--${aspectRatio}`,
				padding && "bx--col-padding"
			].filter(Boolean).join(" ")
		});
	};

	return [
		as,
		props,
		noGutter,
		noGutterLeft,
		noGutterRight,
		padding,
		aspectRatio,
		sm,
		md,
		lg,
		xlg,
		max,
		columnClass,
		$$scope,
		slots
	];
}

class Column extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1N, create_fragment$1M, safe_not_equal, {
			as: 0,
			noGutter: 2,
			noGutterLeft: 3,
			noGutterRight: 4,
			padding: 5,
			aspectRatio: 6,
			sm: 7,
			md: 8,
			lg: 9,
			xlg: 10,
			max: 11
		});
	}
}

var Column$1 = Column;

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const height = parseFloat(style.height);
    const padding_top = parseFloat(style.paddingTop);
    const padding_bottom = parseFloat(style.paddingBottom);
    const margin_top = parseFloat(style.marginTop);
    const margin_bottom = parseFloat(style.marginBottom);
    const border_top_width = parseFloat(style.borderTopWidth);
    const border_bottom_width = parseFloat(style.borderBottomWidth);
    return {
        delay,
        duration,
        easing,
        css: t => 'overflow: hidden;' +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `height: ${t * height}px;` +
            `padding-top: ${t * padding_top}px;` +
            `padding-bottom: ${t * padding_bottom}px;` +
            `margin-top: ${t * margin_top}px;` +
            `margin-bottom: ${t * margin_bottom}px;` +
            `border-top-width: ${t * border_top_width}px;` +
            `border-bottom-width: ${t * border_bottom_width}px;`
    };
}

/* src/ImageLoader/ImageLoader.svelte generated by Svelte v3.49.0 */
const get_error_slot_changes_1 = dirty => ({});
const get_error_slot_context_1 = ctx => ({});
const get_loading_slot_changes_1 = dirty => ({});
const get_loading_slot_context_1 = ctx => ({});
const get_error_slot_changes = dirty => ({});
const get_error_slot_context = ctx => ({});
const get_loading_slot_changes = dirty => ({});
const get_loading_slot_context = ctx => ({});

// (95:0) {:else}
function create_else_block$9(ctx) {
	let aspectratio;
	let current;

	aspectratio = new AspectRatio$1({
			props: {
				ratio: /*ratio*/ ctx[5],
				$$slots: { default: [create_default_slot$b] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(aspectratio.$$.fragment);
		},
		m(target, anchor) {
			mount_component(aspectratio, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const aspectratio_changes = {};
			if (dirty & /*ratio*/ 32) aspectratio_changes.ratio = /*ratio*/ ctx[5];

			if (dirty & /*$$scope, error, $$restProps, src, alt, fadeIn, loaded, loading*/ 1247) {
				aspectratio_changes.$$scope = { dirty, ctx };
			}

			aspectratio.$set(aspectratio_changes);
		},
		i(local) {
			if (current) return;
			transition_in(aspectratio.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(aspectratio.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(aspectratio, detaching);
		}
	};
}

// (79:0) {#if ratio === undefined}
function create_if_block$X(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*loading*/ ctx[2] && create_if_block_3$c(ctx);
	let if_block1 = /*loaded*/ ctx[0] && create_if_block_2$f(ctx);
	let if_block2 = /*error*/ ctx[1] && create_if_block_1$n(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*loading*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*loading*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$c(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*loaded*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*loaded*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$f(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*error*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*error*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$n(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (97:4) {#if loading}
function create_if_block_6$6(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[9].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context_1);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[10], dirty, get_loading_slot_changes_1),
						get_loading_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (100:4) {#if loaded}
function create_if_block_5$6(ctx) {
	let img;
	let img_style_value;
	let img_src_value;
	let img_transition;
	let current;

	let img_levels = [
		/*$$restProps*/ ctx[7],
		{
			style: img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style
		},
		{ src: img_src_value = /*src*/ ctx[3] },
		{ alt: /*alt*/ ctx[4] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	return {
		c() {
			img = element("img");
			set_attributes(img, img_data);
		},
		m(target, anchor) {
			insert(target, img, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*$$restProps*/ 128 && img_style_value !== (img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style)) && { style: img_style_value },
				(!current || dirty & /*src*/ 8 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[3])) && { src: img_src_value },
				(!current || dirty & /*alt*/ 16) && { alt: /*alt*/ ctx[4] }
			]));
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, true);
				img_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, false);
			img_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching && img_transition) img_transition.end();
		}
	};
}

// (109:4) {#if error}
function create_if_block_4$8(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[9].error;
	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[10], get_error_slot_context_1);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						error_slot,
						error_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(error_slot_template, /*$$scope*/ ctx[10], dirty, get_error_slot_changes_1),
						get_error_slot_context_1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

// (96:2) <AspectRatio ratio="{ratio}">
function create_default_slot$b(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*loading*/ ctx[2] && create_if_block_6$6(ctx);
	let if_block1 = /*loaded*/ ctx[0] && create_if_block_5$6(ctx);
	let if_block2 = /*error*/ ctx[1] && create_if_block_4$8(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*loading*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*loading*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*loaded*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*loaded*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$6(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*error*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*error*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4$8(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (80:2) {#if loading}
function create_if_block_3$c(ctx) {
	let current;
	const loading_slot_template = /*#slots*/ ctx[9].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[10], get_loading_slot_context);

	return {
		c() {
			if (loading_slot) loading_slot.c();
		},
		m(target, anchor) {
			if (loading_slot) {
				loading_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[10], dirty, get_loading_slot_changes),
						get_loading_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot, local);
			current = false;
		},
		d(detaching) {
			if (loading_slot) loading_slot.d(detaching);
		}
	};
}

// (83:2) {#if loaded}
function create_if_block_2$f(ctx) {
	let img;
	let img_style_value;
	let img_src_value;
	let img_transition;
	let current;

	let img_levels = [
		/*$$restProps*/ ctx[7],
		{
			style: img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style
		},
		{ src: img_src_value = /*src*/ ctx[3] },
		{ alt: /*alt*/ ctx[4] }
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	return {
		c() {
			img = element("img");
			set_attributes(img, img_data);
		},
		m(target, anchor) {
			insert(target, img, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*$$restProps*/ 128 && img_style_value !== (img_style_value = "width: 100%;" + /*$$restProps*/ ctx[7].style)) && { style: img_style_value },
				(!current || dirty & /*src*/ 8 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[3])) && { src: img_src_value },
				(!current || dirty & /*alt*/ 16) && { alt: /*alt*/ ctx[4] }
			]));
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, true);
				img_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, { duration: /*fadeIn*/ ctx[6] ? fast02 : 0 }, false);
			img_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching && img_transition) img_transition.end();
		}
	};
}

// (92:2) {#if error}
function create_if_block_1$n(ctx) {
	let current;
	const error_slot_template = /*#slots*/ ctx[9].error;
	const error_slot = create_slot(error_slot_template, ctx, /*$$scope*/ ctx[10], get_error_slot_context);

	return {
		c() {
			if (error_slot) error_slot.c();
		},
		m(target, anchor) {
			if (error_slot) {
				error_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (error_slot) {
				if (error_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						error_slot,
						error_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(error_slot_template, /*$$scope*/ ctx[10], dirty, get_error_slot_changes),
						get_error_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(error_slot, local);
			current = true;
		},
		o(local) {
			transition_out(error_slot, local);
			current = false;
		},
		d(detaching) {
			if (error_slot) error_slot.d(detaching);
		}
	};
}

function create_fragment$1L(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$X, create_else_block$9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*ratio*/ ctx[5] === undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const fast02 = 110;

function instance$1M($$self, $$props, $$invalidate) {
	const omit_props_names = ["src","alt","ratio","loading","loaded","error","fadeIn","loadImage"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { src = "" } = $$props;
	let { alt = "" } = $$props;
	let { ratio = undefined } = $$props;
	let { loading = false } = $$props;
	let { loaded = false } = $$props;
	let { error = false } = $$props;
	let { fadeIn = false } = $$props;

	const loadImage = url => {
		if (image != null) image = null;
		$$invalidate(0, loaded = false);
		$$invalidate(1, error = false);
		image = new Image();
		image.src = url || src;
		image.onload = () => $$invalidate(0, loaded = true);
		image.onerror = () => $$invalidate(1, error = true);
	};

	const dispatch = createEventDispatcher();
	let image = null;

	onMount(() => {
		return () => image = null;
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('src' in $$new_props) $$invalidate(3, src = $$new_props.src);
		if ('alt' in $$new_props) $$invalidate(4, alt = $$new_props.alt);
		if ('ratio' in $$new_props) $$invalidate(5, ratio = $$new_props.ratio);
		if ('loading' in $$new_props) $$invalidate(2, loading = $$new_props.loading);
		if ('loaded' in $$new_props) $$invalidate(0, loaded = $$new_props.loaded);
		if ('error' in $$new_props) $$invalidate(1, error = $$new_props.error);
		if ('fadeIn' in $$new_props) $$invalidate(6, fadeIn = $$new_props.fadeIn);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*loaded, error*/ 3) {
			$$invalidate(2, loading = !loaded && !error);
		}

		if ($$self.$$.dirty & /*src*/ 8) {
			if (src && typeof window !== "undefined") loadImage();
		}

		if ($$self.$$.dirty & /*loaded*/ 1) {
			if (loaded) dispatch("load");
		}

		if ($$self.$$.dirty & /*error*/ 2) {
			if (error) dispatch("error");
		}
	};

	return [
		loaded,
		error,
		loading,
		src,
		alt,
		ratio,
		fadeIn,
		$$restProps,
		loadImage,
		slots,
		$$scope
	];
}

class ImageLoader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1M, create_fragment$1L, safe_not_equal, {
			src: 3,
			alt: 4,
			ratio: 5,
			loading: 2,
			loaded: 0,
			error: 1,
			fadeIn: 6,
			loadImage: 8
		});
	}

	get loadImage() {
		return this.$$.ctx[8];
	}
}

var ImageLoader$1 = ImageLoader;

/* src/icons/ErrorFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$W(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1K(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$W(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "fill", "none");
			attr(path0, "d", "M14.9 7.2H17.1V24.799H14.9z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path0, "transform", "rotate(-45 16 16)");
			attr(path1, "d", "M16,2A13.914,13.914,0,0,0,2,16,13.914,13.914,0,0,0,16,30,13.914,13.914,0,0,0,30,16,13.914,13.914,0,0,0,16,2Zm5.4449,21L9,10.5557,10.5557,9,23,21.4448Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$W(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1L($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ErrorFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1L, create_fragment$1K, safe_not_equal, { size: 0, title: 1 });
	}
}

var ErrorFilled$1 = ErrorFilled;

/* src/InlineLoading/InlineLoading.svelte generated by Svelte v3.49.0 */

function create_if_block_3$b(ctx) {
	let loading;
	let current;

	loading = new Loading$1({
			props: {
				small: true,
				description: /*iconDescription*/ ctx[2],
				withOverlay: false,
				active: /*status*/ ctx[0] === 'active'
			}
		});

	return {
		c() {
			create_component(loading.$$.fragment);
		},
		m(target, anchor) {
			mount_component(loading, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const loading_changes = {};
			if (dirty & /*iconDescription*/ 4) loading_changes.description = /*iconDescription*/ ctx[2];
			if (dirty & /*status*/ 1) loading_changes.active = /*status*/ ctx[0] === 'active';
			loading.$set(loading_changes);
		},
		i(local) {
			if (current) return;
			transition_in(loading.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(loading.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(loading, detaching);
		}
	};
}

// (63:36) 
function create_if_block_2$e(ctx) {
	let checkmarkfilled;
	let current;

	checkmarkfilled = new CheckmarkFilled$1({
			props: {
				class: "bx--inline-loading__checkmark-container",
				title: /*iconDescription*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(checkmarkfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkfilled, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkmarkfilled_changes = {};
			if (dirty & /*iconDescription*/ 4) checkmarkfilled_changes.title = /*iconDescription*/ ctx[2];
			checkmarkfilled.$set(checkmarkfilled_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkfilled, detaching);
		}
	};
}

// (58:4) {#if status === "error"}
function create_if_block_1$m(ctx) {
	let errorfilled;
	let current;

	errorfilled = new ErrorFilled$1({
			props: {
				class: "bx--inline-loading--error",
				title: /*iconDescription*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(errorfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(errorfilled, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const errorfilled_changes = {};
			if (dirty & /*iconDescription*/ 4) errorfilled_changes.title = /*iconDescription*/ ctx[2];
			errorfilled.$set(errorfilled_changes);
		},
		i(local) {
			if (current) return;
			transition_in(errorfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(errorfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(errorfilled, detaching);
		}
	};
}

// (77:2) {#if description}
function create_if_block$V(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*description*/ ctx[1]);
			toggle_class(div, "bx--inline-loading__text", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*description*/ 2) set_data(t, /*description*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1J(ctx) {
	let div1;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$m, create_if_block_2$e, create_if_block_3$b];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[0] === "error") return 0;
		if (/*status*/ ctx[0] === "finished") return 1;
		if (/*status*/ ctx[0] === "inactive" || /*status*/ ctx[0] === "active") return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	let if_block1 = /*description*/ ctx[1] && create_if_block$V(ctx);
	let div1_levels = [{ "aria-live": "assertive" }, /*$$restProps*/ ctx[3]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div0, "bx--inline-loading__animation", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--inline-loading", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div0, null);
			}

			append(div1, t);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[5]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block0) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block0 = if_blocks[current_block_type_index];

					if (!if_block0) {
						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block0.c();
					} else {
						if_block0.p(ctx, dirty);
					}

					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				} else {
					if_block0 = null;
				}
			}

			if (/*description*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$V(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ "aria-live": "assertive" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(div1, "bx--inline-loading", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1K($$self, $$props, $$invalidate) {
	const omit_props_names = ["status","description","iconDescription","successDelay"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { status = "active" } = $$props;
	let { description = undefined } = $$props;
	let { iconDescription = undefined } = $$props;
	let { successDelay = 1500 } = $$props;
	const dispatch = createEventDispatcher();
	let timeout = undefined;

	onMount(() => {
		return () => {
			clearTimeout(timeout);
		};
	});

	afterUpdate(() => {
		if (status === "finished") {
			timeout = setTimeout(
				() => {
					dispatch("success");
				},
				successDelay
			);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('status' in $$new_props) $$invalidate(0, status = $$new_props.status);
		if ('description' in $$new_props) $$invalidate(1, description = $$new_props.description);
		if ('iconDescription' in $$new_props) $$invalidate(2, iconDescription = $$new_props.iconDescription);
		if ('successDelay' in $$new_props) $$invalidate(4, successDelay = $$new_props.successDelay);
	};

	return [
		status,
		description,
		iconDescription,
		$$restProps,
		successDelay,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class InlineLoading extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1K, create_fragment$1J, safe_not_equal, {
			status: 0,
			description: 1,
			iconDescription: 2,
			successDelay: 4
		});
	}
}

var InlineLoading$1 = InlineLoading;

/* src/icons/Launch.svelte generated by Svelte v3.49.0 */

function create_if_block$U(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1I(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$U(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M26,28H6a2.0027,2.0027,0,0,1-2-2V6A2.0027,2.0027,0,0,1,6,4H16V6H6V26H26V16h2V26A2.0027,2.0027,0,0,1,26,28Z");
			attr(path1, "d", "M20 2L20 4 26.586 4 18 12.586 19.414 14 28 5.414 28 12 30 12 30 2 20 2z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$U(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1J($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Launch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1J, create_fragment$1I, safe_not_equal, { size: 0, title: 1 });
	}
}

var Launch$1 = Launch;

/* src/Link/OutboundLink.svelte generated by Svelte v3.49.0 */

function create_default_slot$a(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1H(ctx) {
	let link;
	let current;
	const link_spread_levels = [/*$$restProps*/ ctx[0], { target: "_blank" }, { icon: Launch$1 }];

	let link_props = {
		$$slots: { default: [create_default_slot$a] },
		$$scope: { ctx }
	};

	for (let i = 0; i < link_spread_levels.length; i += 1) {
		link_props = assign(link_props, link_spread_levels[i]);
	}

	link = new Link$1({ props: link_props });
	link.$on("click", /*click_handler*/ ctx[2]);
	link.$on("mouseover", /*mouseover_handler*/ ctx[3]);
	link.$on("mouseenter", /*mouseenter_handler*/ ctx[4]);
	link.$on("mouseleave", /*mouseleave_handler*/ ctx[5]);

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const link_changes = (dirty & /*$$restProps, Launch*/ 1)
			? get_spread_update(link_spread_levels, [
					dirty & /*$$restProps*/ 1 && get_spread_object(/*$$restProps*/ ctx[0]),
					link_spread_levels[1],
					dirty & /*Launch*/ 0 && { icon: Launch$1 }
				])
			: {};

			if (dirty & /*$$scope*/ 64) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

function instance$1I($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class OutboundLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1I, create_fragment$1H, safe_not_equal, {});
	}
}

var OutboundLink$1 = OutboundLink;

/* src/ListItem/ListItem.svelte generated by Svelte v3.49.0 */

function create_fragment$1G(ctx) {
	let li;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let li_levels = [/*$$restProps*/ ctx[0]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			if (default_slot) default_slot.c();
			set_attributes(li, li_data);
			toggle_class(li, "bx--list__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);

			if (default_slot) {
				default_slot.m(li, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", /*click_handler*/ ctx[3]),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(li, "bx--list__item", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1H($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ListItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1H, create_fragment$1G, safe_not_equal, {});
	}
}

var ListItem$1 = ListItem;

/* src/LocalStorage/LocalStorage.svelte generated by Svelte v3.49.0 */

function clearAll() {
	localStorage.clear();
}

function instance$1G($$self, $$props, $$invalidate) {
	let { key = "local-storage-key" } = $$props;
	let { value = "" } = $$props;

	function clearItem() {
		localStorage.removeItem(key);
	}

	const dispatch = createEventDispatcher();
	let prevValue = value;

	function setItem() {
		if (typeof value === "object") {
			localStorage.setItem(key, JSON.stringify(value));
		} else {
			localStorage.setItem(key, value);
		}
	}

	onMount(() => {
		const item = localStorage.getItem(key);

		if (item != null) {
			try {
				$$invalidate(0, value = JSON.parse(item));
			} catch(e) {
				$$invalidate(0, value = item);
			}
		} else {
			setItem();
			dispatch("save");
		}
	});

	afterUpdate(() => {
		if (prevValue !== value) {
			setItem();
			dispatch("update", { prevValue, value });
		}

		prevValue = value;
	});

	$$self.$$set = $$props => {
		if ('key' in $$props) $$invalidate(1, key = $$props.key);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, key, clearItem, clearAll];
}

class LocalStorage extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1G, null, safe_not_equal, {
			key: 1,
			value: 0,
			clearItem: 2,
			clearAll: 3
		});
	}

	get clearItem() {
		return this.$$.ctx[2];
	}

	get clearAll() {
		return clearAll;
	}
}

var LocalStorage$1 = LocalStorage;

/* src/MultiSelect/MultiSelect.svelte generated by Svelte v3.49.0 */

function get_each_context$b(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[73] = list[i];
	child_ctx[75] = i;
	return child_ctx;
}

const get_default_slot_changes$4 = dirty => ({
	item: dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832,
	index: dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832
});

const get_default_slot_context$4 = ctx => ({
	slot: "labelText",
	item: /*item*/ ctx[73],
	index: /*i*/ ctx[75]
});

// (295:2) {#if titleText}
function create_if_block_9$3(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*titleText*/ ctx[17]);
			attr(label_1, "for", /*id*/ ctx[26]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[11]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[25]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*titleText*/ 131072) set_data(t, /*titleText*/ ctx[17]);

			if (dirty[0] & /*id*/ 67108864) {
				attr(label_1, "for", /*id*/ ctx[26]);
			}

			if (dirty[0] & /*disabled*/ 2048) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[11]);
			}

			if (dirty[0] & /*hideLabel*/ 33554432) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[25]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (322:4) {#if invalid}
function create_if_block_8$3(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (325:4) {#if !invalid && warn}
function create_if_block_7$4(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--list-box__invalid-icon bx--list-box__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (386:6) {#if checked.length > 0}
function create_if_block_6$5(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection$1({
			props: {
				selectionCount: /*checked*/ ctx[31].length,
				translateWithId: /*translateWithIdSelection*/ ctx[16],
				disabled: /*disabled*/ ctx[11]
			}
		});

	listboxselection.$on("clear", /*clear_handler*/ ctx[52]);
	listboxselection.$on("clear", /*clear_handler_1*/ ctx[53]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[1] & /*checked*/ 1) listboxselection_changes.selectionCount = /*checked*/ ctx[31].length;
			if (dirty[0] & /*translateWithIdSelection*/ 65536) listboxselection_changes.translateWithId = /*translateWithIdSelection*/ ctx[16];
			if (dirty[0] & /*disabled*/ 2048) listboxselection_changes.disabled = /*disabled*/ ctx[11];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (401:6) {#if filterable}
function create_if_block_3$a(ctx) {
	let input;
	let t0;
	let t1;
	let t2;
	let listboxmenuicon;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		/*$$restProps*/ ctx[37],
		{ role: "combobox" },
		{ tabindex: "0" },
		{ autocomplete: "off" },
		{ "aria-autocomplete": "list" },
		{ "aria-expanded": /*open*/ ctx[1] },
		{
			"aria-activedescendant": /*highlightedId*/ ctx[6]
		},
		{ "aria-disabled": /*disabled*/ ctx[11] },
		{ "aria-controls": /*menuId*/ ctx[34] },
		{ disabled: /*disabled*/ ctx[11] },
		{ placeholder: /*placeholder*/ ctx[14] },
		{ id: /*id*/ ctx[26] },
		{ name: /*name*/ ctx[27] }
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block0 = /*invalid*/ ctx[19] && create_if_block_5$5();
	let if_block1 = /*value*/ ctx[0] && create_if_block_4$7(ctx);

	listboxmenuicon = new ListBoxMenuIcon$1({
			props: {
				style: "pointer-events: " + (/*open*/ ctx[1] ? 'auto' : 'none'),
				translateWithId: /*translateWithId*/ ctx[15],
				open: /*open*/ ctx[1]
			}
		});

	listboxmenuicon.$on("click", /*click_handler_1*/ ctx[58]);

	return {
		c() {
			input = element("input");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			create_component(listboxmenuicon.$$.fragment);
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*value*/ ctx[0] === '');
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[54](input);
			set_input_value(input, /*value*/ ctx[0]);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[55]),
					listen(input, "keydown", /*keydown_handler*/ ctx[46]),
					listen(input, "keydown", stop_propagation(/*keydown_handler_1*/ ctx[56])),
					listen(input, "keyup", /*keyup_handler*/ ctx[47]),
					listen(input, "focus", /*focus_handler*/ ctx[48]),
					listen(input, "blur", /*blur_handler*/ ctx[49]),
					listen(input, "paste", /*paste_handler*/ ctx[50])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				dirty[1] & /*$$restProps*/ 64 && /*$$restProps*/ ctx[37],
				{ role: "combobox" },
				{ tabindex: "0" },
				{ autocomplete: "off" },
				{ "aria-autocomplete": "list" },
				(!current || dirty[0] & /*open*/ 2) && { "aria-expanded": /*open*/ ctx[1] },
				(!current || dirty[0] & /*highlightedId*/ 64) && {
					"aria-activedescendant": /*highlightedId*/ ctx[6]
				},
				(!current || dirty[0] & /*disabled*/ 2048) && { "aria-disabled": /*disabled*/ ctx[11] },
				(!current || dirty[1] & /*menuId*/ 8) && { "aria-controls": /*menuId*/ ctx[34] },
				(!current || dirty[0] & /*disabled*/ 2048) && { disabled: /*disabled*/ ctx[11] },
				(!current || dirty[0] & /*placeholder*/ 16384) && { placeholder: /*placeholder*/ ctx[14] },
				(!current || dirty[0] & /*id*/ 67108864) && { id: /*id*/ ctx[26] },
				(!current || dirty[0] & /*name*/ 134217728) && { name: /*name*/ ctx[27] }
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--empty", /*value*/ ctx[0] === '');
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[13]);

			if (/*invalid*/ ctx[19]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 524288) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$5();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*value*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*value*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.style = "pointer-events: " + (/*open*/ ctx[1] ? 'auto' : 'none');
			if (dirty[0] & /*translateWithId*/ 32768) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[15];
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[54](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			destroy_component(listboxmenuicon, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (451:8) {#if invalid}
function create_if_block_5$5(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--list-box__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (454:8) {#if value}
function create_if_block_4$7(ctx) {
	let listboxselection;
	let current;

	listboxselection = new ListBoxSelection$1({
			props: {
				translateWithId: /*translateWithIdSelection*/ ctx[16],
				disabled: /*disabled*/ ctx[11],
				open: /*open*/ ctx[1]
			}
		});

	listboxselection.$on("clear", /*clear_handler_2*/ ctx[57]);

	return {
		c() {
			create_component(listboxselection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxselection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxselection_changes = {};
			if (dirty[0] & /*translateWithIdSelection*/ 65536) listboxselection_changes.translateWithId = /*translateWithIdSelection*/ ctx[16];
			if (dirty[0] & /*disabled*/ 2048) listboxselection_changes.disabled = /*disabled*/ ctx[11];
			if (dirty[0] & /*open*/ 2) listboxselection_changes.open = /*open*/ ctx[1];
			listboxselection.$set(listboxselection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxselection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxselection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxselection, detaching);
		}
	};
}

// (475:6) {#if !filterable}
function create_if_block_2$d(ctx) {
	let span;
	let t0;
	let t1;
	let listboxmenuicon;
	let current;

	listboxmenuicon = new ListBoxMenuIcon$1({
			props: {
				open: /*open*/ ctx[1],
				translateWithId: /*translateWithId*/ ctx[15]
			}
		});

	return {
		c() {
			span = element("span");
			t0 = text(/*label*/ ctx[24]);
			t1 = space();
			create_component(listboxmenuicon.$$.fragment);
			toggle_class(span, "bx--list-box__label", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			insert(target, t1, anchor);
			mount_component(listboxmenuicon, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*label*/ 16777216) set_data(t0, /*label*/ ctx[24]);
			const listboxmenuicon_changes = {};
			if (dirty[0] & /*open*/ 2) listboxmenuicon_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*translateWithId*/ 32768) listboxmenuicon_changes.translateWithId = /*translateWithId*/ ctx[15];
			listboxmenuicon.$set(listboxmenuicon_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (detaching) detach(t1);
			destroy_component(listboxmenuicon, detaching);
		}
	};
}

// (330:4) <ListBoxField       role="button"       tabindex="0"       aria-expanded="{open}"       on:click="{() => {         if (disabled) return;         if (filterable) {           open = true;           inputRef.focus();         } else {           open = !open;         }       }}"       on:keydown="{(e) => {         if (filterable) {           return;         }         const key = e.key;         if ([' ', 'ArrowUp', 'ArrowDown'].includes(key)) {           e.preventDefault();         }         if (key === ' ') {           open = !open;         } else if (key === 'Tab') {           if (selectionRef && checked.length > 0) {             selectionRef.focus();           } else {             open = false;             fieldRef.blur();           }         } else if (key === 'ArrowDown') {           change(1);         } else if (key === 'ArrowUp') {           change(-1);         } else if (key === 'Enter') {           if (highlightedIndex > -1) {             sortedItems = sortedItems.map((item, i) => {               if (i !== highlightedIndex) return item;               return { ...item, checked: !item.checked };             });           }         }       }}"       on:focus="{() => {         if (filterable) {           open = true;           if (inputRef) inputRef.focus();         }       }}"       on:blur="{(e) => {         if (!filterable) dispatch('blur', e);       }}"       id="{id}"       disabled="{disabled}"       translateWithId="{translateWithId}"     >
function create_default_slot_3(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let current;
	let if_block0 = /*checked*/ ctx[31].length > 0 && create_if_block_6$5(ctx);
	let if_block1 = /*filterable*/ ctx[12] && create_if_block_3$a(ctx);
	let if_block2 = !/*filterable*/ ctx[12] && create_if_block_2$d(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*checked*/ ctx[31].length > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[1] & /*checked*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*filterable*/ ctx[12]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 4096) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3$a(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*filterable*/ ctx[12]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*filterable*/ 4096) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$d(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (480:4) {#if open}
function create_if_block_1$l(ctx) {
	let listboxmenu;
	let current;

	listboxmenu = new ListBoxMenu$1({
			props: {
				"aria-label": /*ariaLabel*/ ctx[32],
				id: /*id*/ ctx[26],
				"aria-multiselectable": "true",
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listboxmenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listboxmenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const listboxmenu_changes = {};
			if (dirty[1] & /*ariaLabel*/ 2) listboxmenu_changes["aria-label"] = /*ariaLabel*/ ctx[32];
			if (dirty[0] & /*id*/ 67108864) listboxmenu_changes.id = /*id*/ ctx[26];

			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, itemToInput, open*/ 1879314834 | dirty[2] & /*$$scope*/ 32) {
				listboxmenu_changes.$$scope = { dirty, ctx };
			}

			listboxmenu.$set(listboxmenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listboxmenu, detaching);
		}
	};
}

// (523:63)                  
function fallback_block$v(ctx) {
	let t_value = /*itemToString*/ ctx[7](/*item*/ ctx[73]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1610616960 && t_value !== (t_value = /*itemToString*/ ctx[7](/*item*/ ctx[73]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (523:14) 
function create_labelText_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[45].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[67], get_default_slot_context$4);
	const default_slot_or_fallback = default_slot || fallback_block$v(ctx);

	return {
		c() {
			if (default_slot_or_fallback) default_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832 | dirty[2] & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[67],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[67])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[67], dirty, get_default_slot_changes$4),
						get_default_slot_context$4
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1610616960)) {
					default_slot_or_fallback.p(ctx, !current ? [-1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};
}

// (487:10) <ListBoxMenuItem             id="{item.id}"             role="option"             aria-labelledby="checkbox-{item.id}"             aria-selected="{item.checked}"             active="{item.checked}"             highlighted="{highlightedIndex === i}"             disabled="{item.disabled}"             on:click="{(e) => {               if (item.disabled) {                 e.stopPropagation();                 return;               }               sortedItems = sortedItems.map((_) =>                 _.id === item.id ? { ..._, checked: !_.checked } : _               );               fieldRef.focus();             }}"             on:mouseenter="{() => {               if (item.disabled) return;               highlightedIndex = i;             }}"           >
function create_default_slot_2$2(ctx) {
	let checkbox;
	let t;
	let current;

	const checkbox_spread_levels = [
		{ name: /*item*/ ctx[73].id },
		{
			title: /*useTitleInItem*/ ctx[18]
			? /*itemToString*/ ctx[7](/*item*/ ctx[73])
			: undefined
		},
		/*itemToInput*/ ctx[8](/*item*/ ctx[73]),
		{ readonly: true },
		{ tabindex: "-1" },
		{ id: "checkbox-" + /*item*/ ctx[73].id },
		{ checked: /*item*/ ctx[73].checked },
		{ disabled: /*item*/ ctx[73].disabled }
	];

	function blur_handler_2() {
		return /*blur_handler_2*/ ctx[63](/*i*/ ctx[75]);
	}

	let checkbox_props = {
		$$slots: { labelText: [create_labelText_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < checkbox_spread_levels.length; i += 1) {
		checkbox_props = assign(checkbox_props, checkbox_spread_levels[i]);
	}

	checkbox = new Checkbox$1({ props: checkbox_props });
	checkbox.$on("blur", blur_handler_2);

	return {
		c() {
			create_component(checkbox.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			mount_component(checkbox, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			const checkbox_changes = (dirty[0] & /*filterable, filteredItems, sortedItems, useTitleInItem, itemToString, itemToInput*/ 1610879360)
			? get_spread_update(checkbox_spread_levels, [
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832 && { name: /*item*/ ctx[73].id },
					dirty[0] & /*useTitleInItem, itemToString, filterable, filteredItems, sortedItems*/ 1610879104 && {
						title: /*useTitleInItem*/ ctx[18]
						? /*itemToString*/ ctx[7](/*item*/ ctx[73])
						: undefined
					},
					dirty[0] & /*itemToInput, filterable, filteredItems, sortedItems*/ 1610617088 && get_spread_object(/*itemToInput*/ ctx[8](/*item*/ ctx[73])),
					checkbox_spread_levels[3],
					checkbox_spread_levels[4],
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832 && { id: "checkbox-" + /*item*/ ctx[73].id },
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832 && { checked: /*item*/ ctx[73].checked },
					dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832 && { disabled: /*item*/ ctx[73].disabled }
				])
			: {};

			if (dirty[0] & /*itemToString, filterable, filteredItems, sortedItems*/ 1610616960 | dirty[2] & /*$$scope*/ 32) {
				checkbox_changes.$$scope = { dirty, ctx };
			}

			checkbox.$set(checkbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkbox, detaching);
			if (detaching) detach(t);
		}
	};
}

// (486:8) {#each filterable ? filteredItems : sortedItems as item, i (item.id)}
function create_each_block$b(key_1, ctx) {
	let first;
	let listboxmenuitem;
	let current;

	function click_handler_3(...args) {
		return /*click_handler_3*/ ctx[64](/*item*/ ctx[73], ...args);
	}

	function mouseenter_handler() {
		return /*mouseenter_handler*/ ctx[65](/*item*/ ctx[73], /*i*/ ctx[75]);
	}

	listboxmenuitem = new ListBoxMenuItem$1({
			props: {
				id: /*item*/ ctx[73].id,
				role: "option",
				"aria-labelledby": "checkbox-" + /*item*/ ctx[73].id,
				"aria-selected": /*item*/ ctx[73].checked,
				active: /*item*/ ctx[73].checked,
				highlighted: /*highlightedIndex*/ ctx[28] === /*i*/ ctx[75],
				disabled: /*item*/ ctx[73].disabled,
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			}
		});

	listboxmenuitem.$on("click", click_handler_3);
	listboxmenuitem.$on("mouseenter", mouseenter_handler);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(listboxmenuitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(listboxmenuitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const listboxmenuitem_changes = {};
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832) listboxmenuitem_changes.id = /*item*/ ctx[73].id;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832) listboxmenuitem_changes["aria-labelledby"] = "checkbox-" + /*item*/ ctx[73].id;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832) listboxmenuitem_changes["aria-selected"] = /*item*/ ctx[73].checked;
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832) listboxmenuitem_changes.active = /*item*/ ctx[73].checked;
			if (dirty[0] & /*highlightedIndex, filterable, filteredItems, sortedItems*/ 1879052288) listboxmenuitem_changes.highlighted = /*highlightedIndex*/ ctx[28] === /*i*/ ctx[75];
			if (dirty[0] & /*filterable, filteredItems, sortedItems*/ 1610616832) listboxmenuitem_changes.disabled = /*item*/ ctx[73].disabled;

			if (dirty[0] & /*filterable, filteredItems, sortedItems, useTitleInItem, itemToString, itemToInput, open*/ 1610879362 | dirty[2] & /*$$scope*/ 32) {
				listboxmenuitem_changes.$$scope = { dirty, ctx };
			}

			listboxmenuitem.$set(listboxmenuitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listboxmenuitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listboxmenuitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(listboxmenuitem, detaching);
		}
	};
}

// (481:6) <ListBoxMenu         aria-label="{ariaLabel}"         id="{id}"         aria-multiselectable="true"       >
function create_default_slot_1$4(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;

	let each_value = /*filterable*/ ctx[12]
	? /*filteredItems*/ ctx[30]
	: /*sortedItems*/ ctx[29];

	const get_key = ctx => /*item*/ ctx[73].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$b(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$b(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, itemToInput, open*/ 1879314834 | dirty[2] & /*$$scope*/ 32) {
				each_value = /*filterable*/ ctx[12]
				? /*filteredItems*/ ctx[30]
				: /*sortedItems*/ ctx[29];

				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$b, each_1_anchor, get_each_context$b);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (305:2) <ListBox     role="{undefined}"     disabled="{disabled}"     invalid="{invalid}"     invalidText="{invalidText}"     open="{open}"     light="{light}"     size="{size}"     warn="{warn}"     warnText="{warnText}"     class="bx--multi-select {direction === 'top' &&       'bx--list-box--up'} {filterable && 'bx--combo-box'}       {filterable && 'bx--multi-select--filterable'}       {invalid && 'bx--multi-select--invalid'}       {inline && 'bx--multi-select--inline'}       {checked.length > 0 && 'bx--multi-select--selected'}"   >
function create_default_slot$9(ctx) {
	let t0;
	let t1;
	let listboxfield;
	let t2;
	let if_block2_anchor;
	let current;
	let if_block0 = /*invalid*/ ctx[19] && create_if_block_8$3();
	let if_block1 = !/*invalid*/ ctx[19] && /*warn*/ ctx[21] && create_if_block_7$4();

	listboxfield = new ListBoxField$1({
			props: {
				role: "button",
				tabindex: "0",
				"aria-expanded": /*open*/ ctx[1],
				id: /*id*/ ctx[26],
				disabled: /*disabled*/ ctx[11],
				translateWithId: /*translateWithId*/ ctx[15],
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	listboxfield.$on("click", /*click_handler_2*/ ctx[59]);
	listboxfield.$on("keydown", /*keydown_handler_2*/ ctx[60]);
	listboxfield.$on("focus", /*focus_handler_1*/ ctx[61]);
	listboxfield.$on("blur", /*blur_handler_1*/ ctx[62]);
	let if_block2 = /*open*/ ctx[1] && create_if_block_1$l(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			create_component(listboxfield.$$.fragment);
			t2 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			mount_component(listboxfield, target, anchor);
			insert(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*invalid*/ ctx[19]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 524288) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_8$3();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[19] && /*warn*/ ctx[21]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 2621440) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_7$4();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const listboxfield_changes = {};
			if (dirty[0] & /*open*/ 2) listboxfield_changes["aria-expanded"] = /*open*/ ctx[1];
			if (dirty[0] & /*id*/ 67108864) listboxfield_changes.id = /*id*/ ctx[26];
			if (dirty[0] & /*disabled*/ 2048) listboxfield_changes.disabled = /*disabled*/ ctx[11];
			if (dirty[0] & /*translateWithId*/ 32768) listboxfield_changes.translateWithId = /*translateWithId*/ ctx[15];

			if (dirty[0] & /*open, translateWithId, label, filterable, translateWithIdSelection, disabled, value, invalid, highlightedId, placeholder, id, name, inputRef, light, sortedItems, fieldRef*/ 755628119 | dirty[1] & /*$$restProps, menuId, checked*/ 73 | dirty[2] & /*$$scope*/ 32) {
				listboxfield_changes.$$scope = { dirty, ctx };
			}

			listboxfield.$set(listboxfield_changes);

			if (/*open*/ ctx[1]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*open*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1$l(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(listboxfield.$$.fragment, local);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(listboxfield.$$.fragment, local);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			destroy_component(listboxfield, detaching);
			if (detaching) detach(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

// (532:2) {#if !inline && !invalid && !warn && helperText}
function create_if_block$T(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[23]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 8388608) set_data(t, /*helperText*/ ctx[23]);

			if (dirty[0] & /*disabled*/ 2048) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[11]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1F(ctx) {
	let div;
	let t0;
	let listbox;
	let t1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*titleText*/ ctx[17] && create_if_block_9$3(ctx);

	listbox = new ListBox$1({
			props: {
				role: undefined,
				disabled: /*disabled*/ ctx[11],
				invalid: /*invalid*/ ctx[19],
				invalidText: /*invalidText*/ ctx[20],
				open: /*open*/ ctx[1],
				light: /*light*/ ctx[13],
				size: /*size*/ ctx[9],
				warn: /*warn*/ ctx[21],
				warnText: /*warnText*/ ctx[22],
				class: "bx--multi-select " + (/*direction*/ ctx[10] === 'top' && 'bx--list-box--up') + " " + (/*filterable*/ ctx[12] && 'bx--combo-box') + "\n      " + (/*filterable*/ ctx[12] && 'bx--multi-select--filterable') + "\n      " + (/*invalid*/ ctx[19] && 'bx--multi-select--invalid') + "\n      " + (/*inline*/ ctx[33] && 'bx--multi-select--inline') + "\n      " + (/*checked*/ ctx[31].length > 0 && 'bx--multi-select--selected'),
				$$slots: { default: [create_default_slot$9] },
				$$scope: { ctx }
			}
		});

	let if_block1 = !/*inline*/ ctx[33] && !/*invalid*/ ctx[19] && !/*warn*/ ctx[21] && /*helperText*/ ctx[23] && create_if_block$T(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(listbox.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--multi-select__wrapper", true);
			toggle_class(div, "bx--list-box__wrapper", true);
			toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[33]);
			toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[33]);
			toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[33] && /*invalid*/ ctx[19]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			mount_component(listbox, div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			/*div_binding*/ ctx[66](div);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[51]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*titleText*/ ctx[17]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9$3(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			const listbox_changes = {};
			if (dirty[0] & /*disabled*/ 2048) listbox_changes.disabled = /*disabled*/ ctx[11];
			if (dirty[0] & /*invalid*/ 524288) listbox_changes.invalid = /*invalid*/ ctx[19];
			if (dirty[0] & /*invalidText*/ 1048576) listbox_changes.invalidText = /*invalidText*/ ctx[20];
			if (dirty[0] & /*open*/ 2) listbox_changes.open = /*open*/ ctx[1];
			if (dirty[0] & /*light*/ 8192) listbox_changes.light = /*light*/ ctx[13];
			if (dirty[0] & /*size*/ 512) listbox_changes.size = /*size*/ ctx[9];
			if (dirty[0] & /*warn*/ 2097152) listbox_changes.warn = /*warn*/ ctx[21];
			if (dirty[0] & /*warnText*/ 4194304) listbox_changes.warnText = /*warnText*/ ctx[22];
			if (dirty[0] & /*direction, filterable, invalid*/ 529408 | dirty[1] & /*inline, checked*/ 5) listbox_changes.class = "bx--multi-select " + (/*direction*/ ctx[10] === 'top' && 'bx--list-box--up') + " " + (/*filterable*/ ctx[12] && 'bx--combo-box') + "\n      " + (/*filterable*/ ctx[12] && 'bx--multi-select--filterable') + "\n      " + (/*invalid*/ ctx[19] && 'bx--multi-select--invalid') + "\n      " + (/*inline*/ ctx[33] && 'bx--multi-select--inline') + "\n      " + (/*checked*/ ctx[31].length > 0 && 'bx--multi-select--selected');

			if (dirty[0] & /*id, filterable, filteredItems, sortedItems, highlightedIndex, fieldRef, useTitleInItem, itemToString, itemToInput, open, disabled, translateWithId, inputRef, selectionRef, label, translateWithIdSelection, value, invalid, highlightedId, placeholder, name, light, warn*/ 2100165111 | dirty[1] & /*ariaLabel, checked, $$restProps, menuId*/ 75 | dirty[2] & /*$$scope*/ 32) {
				listbox_changes.$$scope = { dirty, ctx };
			}

			listbox.$set(listbox_changes);

			if (!/*inline*/ ctx[33] && !/*invalid*/ ctx[19] && !/*warn*/ ctx[21] && /*helperText*/ ctx[23]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$T(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[1] & /*inline*/ 4) {
				toggle_class(div, "bx--multi-select__wrapper--inline", /*inline*/ ctx[33]);
			}

			if (dirty[1] & /*inline*/ 4) {
				toggle_class(div, "bx--list-box__wrapper--inline", /*inline*/ ctx[33]);
			}

			if (dirty[0] & /*invalid*/ 524288 | dirty[1] & /*inline*/ 4) {
				toggle_class(div, "bx--multi-select__wrapper--inline--invalid", /*inline*/ ctx[33] && /*invalid*/ ctx[19]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(listbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			destroy_component(listbox);
			if (if_block1) if_block1.d();
			/*div_binding*/ ctx[66](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$1F($$self, $$props, $$invalidate) {
	let menuId;
	let inline;
	let ariaLabel;
	let sortedItems;
	let checked;
	let unchecked;
	let filteredItems;

	const omit_props_names = [
		"items","itemToString","itemToInput","selectedIds","value","size","type","direction","selectionFeedback","disabled","filterable","filterItem","open","light","locale","placeholder","sortItem","translateWithId","translateWithIdSelection","titleText","useTitleInItem","invalid","invalidText","warn","warnText","helperText","label","hideLabel","id","name","inputRef","multiSelectRef","fieldRef","selectionRef","highlightedId"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { items = [] } = $$props;
	let { itemToString = item => item.text || item.id } = $$props;

	let { itemToInput = item => {
		
	} } = $$props;

	let { selectedIds = [] } = $$props;
	let { value = "" } = $$props;
	let { size = undefined } = $$props;
	let { type = "default" } = $$props;
	let { direction = "bottom" } = $$props;
	let { selectionFeedback = "top-after-reopen" } = $$props;
	let { disabled = false } = $$props;
	let { filterable = false } = $$props;
	let { filterItem = (item, value) => item.text.toLowerCase().includes(value.trim().toLowerCase()) } = $$props;
	let { open = false } = $$props;
	let { light = false } = $$props;
	let { locale = "en" } = $$props;
	let { placeholder = "" } = $$props;
	let { sortItem = (a, b) => a.text.localeCompare(b.text, locale, { numeric: true }) } = $$props;
	let { translateWithId = undefined } = $$props;
	let { translateWithIdSelection = undefined } = $$props;
	let { titleText = "" } = $$props;
	let { useTitleInItem = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { inputRef = null } = $$props;
	let { multiSelectRef = null } = $$props;
	let { fieldRef = null } = $$props;
	let { selectionRef = null } = $$props;
	let { highlightedId = null } = $$props;
	const dispatch = createEventDispatcher();
	let initialSorted = false;
	let highlightedIndex = -1;
	let prevChecked = [];

	setContext("MultiSelect", {
		declareRef: ({ key, ref }) => {
			switch (key) {
				case "field":
					$$invalidate(4, fieldRef = ref);
					break;
				case "selection":
					$$invalidate(5, selectionRef = ref);
					break;
			}
		}
	});

	function change(direction) {
		let index = highlightedIndex + direction;
		const length = filterable ? filteredItems.length : items.length;

		if (index < 0) {
			index = length - 1;
		} else if (index >= length) {
			index = 0;
		}

		let disabled = items[index].disabled;

		while (disabled) {
			index = index + direction;

			if (index < 0) {
				index = items.length - 1;
			} else if (index >= items.length) {
				index = 0;
			}

			disabled = items[index].disabled;
		}

		$$invalidate(28, highlightedIndex = index);
	}

	function sort() {
		return [
			...checked.length > 1 ? checked.sort(sortItem) : checked,
			...unchecked.sort(sortItem)
		];
	}

	afterUpdate(() => {
		if (checked.length !== prevChecked.length) {
			if (selectionFeedback === "top") {
				$$invalidate(29, sortedItems = sort());
			}

			prevChecked = checked;
			$$invalidate(39, selectedIds = checked.map(({ id }) => id));

			dispatch("select", {
				selectedIds,
				selected: checked,
				unselected: unchecked
			});
		}

		if (!open) {
			if (!initialSorted || selectionFeedback !== "fixed") {
				$$invalidate(29, sortedItems = sort());
				initialSorted = true;
			}

			$$invalidate(28, highlightedIndex = -1);
			$$invalidate(0, value = "");
		}

		$$invalidate(38, items = sortedItems);
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler = ({ target }) => {
		if (open && multiSelectRef && !multiSelectRef.contains(target)) {
			$$invalidate(1, open = false);
		}
	};

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	const clear_handler_1 = () => {
		$$invalidate(29, sortedItems = sortedItems.map(item => ({ ...item, checked: false })));
		if (fieldRef) fieldRef.blur();
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputRef = $$value;
			$$invalidate(2, inputRef);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === 'Enter') {
			if (highlightedId) {
				const filteredItemIndex = sortedItems.findIndex(item => item.id === highlightedId);

				$$invalidate(29, sortedItems = sortedItems.map((item, i) => {
					if (i !== filteredItemIndex) return item;
					return { ...item, checked: !item.checked };
				}));
			}
		} else if (key === 'Tab') {
			$$invalidate(1, open = false);
			inputRef.blur();
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Escape') {
			$$invalidate(1, open = false);
		} else if (key === ' ') {
			if (!open) $$invalidate(1, open = true);
		}
	};

	const clear_handler_2 = () => {
		$$invalidate(0, value = '');
		$$invalidate(1, open = false);
	};

	const click_handler_1 = e => {
		e.stopPropagation();
		$$invalidate(1, open = !open);
	};

	const click_handler_2 = () => {
		if (disabled) return;

		if (filterable) {
			$$invalidate(1, open = true);
			inputRef.focus();
		} else {
			$$invalidate(1, open = !open);
		}
	};

	const keydown_handler_2 = e => {
		if (filterable) {
			return;
		}

		const key = e.key;

		if ([' ', 'ArrowUp', 'ArrowDown'].includes(key)) {
			e.preventDefault();
		}

		if (key === ' ') {
			$$invalidate(1, open = !open);
		} else if (key === 'Tab') {
			if (selectionRef && checked.length > 0) {
				selectionRef.focus();
			} else {
				$$invalidate(1, open = false);
				fieldRef.blur();
			}
		} else if (key === 'ArrowDown') {
			change(1);
		} else if (key === 'ArrowUp') {
			change(-1);
		} else if (key === 'Enter') {
			if (highlightedIndex > -1) {
				$$invalidate(29, sortedItems = sortedItems.map((item, i) => {
					if (i !== highlightedIndex) return item;
					return { ...item, checked: !item.checked };
				}));
			}
		}
	};

	const focus_handler_1 = () => {
		if (filterable) {
			$$invalidate(1, open = true);
			if (inputRef) inputRef.focus();
		}
	};

	const blur_handler_1 = e => {
		if (!filterable) dispatch('blur', e);
	};

	const blur_handler_2 = i => {
		if (i === filteredItems.length - 1) $$invalidate(1, open = false);
	};

	const click_handler_3 = (item, e) => {
		if (item.disabled) {
			e.stopPropagation();
			return;
		}

		$$invalidate(29, sortedItems = sortedItems.map(_ => _.id === item.id ? { ..._, checked: !_.checked } : _));
		fieldRef.focus();
	};

	const mouseenter_handler = (item, i) => {
		if (item.disabled) return;
		$$invalidate(28, highlightedIndex = i);
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			multiSelectRef = $$value;
			$$invalidate(3, multiSelectRef);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(72, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(37, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('items' in $$new_props) $$invalidate(38, items = $$new_props.items);
		if ('itemToString' in $$new_props) $$invalidate(7, itemToString = $$new_props.itemToString);
		if ('itemToInput' in $$new_props) $$invalidate(8, itemToInput = $$new_props.itemToInput);
		if ('selectedIds' in $$new_props) $$invalidate(39, selectedIds = $$new_props.selectedIds);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('size' in $$new_props) $$invalidate(9, size = $$new_props.size);
		if ('type' in $$new_props) $$invalidate(40, type = $$new_props.type);
		if ('direction' in $$new_props) $$invalidate(10, direction = $$new_props.direction);
		if ('selectionFeedback' in $$new_props) $$invalidate(41, selectionFeedback = $$new_props.selectionFeedback);
		if ('disabled' in $$new_props) $$invalidate(11, disabled = $$new_props.disabled);
		if ('filterable' in $$new_props) $$invalidate(12, filterable = $$new_props.filterable);
		if ('filterItem' in $$new_props) $$invalidate(42, filterItem = $$new_props.filterItem);
		if ('open' in $$new_props) $$invalidate(1, open = $$new_props.open);
		if ('light' in $$new_props) $$invalidate(13, light = $$new_props.light);
		if ('locale' in $$new_props) $$invalidate(43, locale = $$new_props.locale);
		if ('placeholder' in $$new_props) $$invalidate(14, placeholder = $$new_props.placeholder);
		if ('sortItem' in $$new_props) $$invalidate(44, sortItem = $$new_props.sortItem);
		if ('translateWithId' in $$new_props) $$invalidate(15, translateWithId = $$new_props.translateWithId);
		if ('translateWithIdSelection' in $$new_props) $$invalidate(16, translateWithIdSelection = $$new_props.translateWithIdSelection);
		if ('titleText' in $$new_props) $$invalidate(17, titleText = $$new_props.titleText);
		if ('useTitleInItem' in $$new_props) $$invalidate(18, useTitleInItem = $$new_props.useTitleInItem);
		if ('invalid' in $$new_props) $$invalidate(19, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(20, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(21, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(22, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(23, helperText = $$new_props.helperText);
		if ('label' in $$new_props) $$invalidate(24, label = $$new_props.label);
		if ('hideLabel' in $$new_props) $$invalidate(25, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(26, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(27, name = $$new_props.name);
		if ('inputRef' in $$new_props) $$invalidate(2, inputRef = $$new_props.inputRef);
		if ('multiSelectRef' in $$new_props) $$invalidate(3, multiSelectRef = $$new_props.multiSelectRef);
		if ('fieldRef' in $$new_props) $$invalidate(4, fieldRef = $$new_props.fieldRef);
		if ('selectionRef' in $$new_props) $$invalidate(5, selectionRef = $$new_props.selectionRef);
		if ('highlightedId' in $$new_props) $$invalidate(6, highlightedId = $$new_props.highlightedId);
		if ('$$scope' in $$new_props) $$invalidate(67, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 67108864) {
			$$invalidate(34, menuId = `menu-${id}`);
		}

		if ($$self.$$.dirty[1] & /*type*/ 512) {
			$$invalidate(33, inline = type === "inline");
		}

		$$invalidate(32, ariaLabel = $$props["aria-label"] || "Choose an item");

		if ($$self.$$.dirty[1] & /*items, selectedIds*/ 384) {
			$$invalidate(29, sortedItems = items.map(item => ({
				...item,
				checked: selectedIds.includes(item.id)
			})));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 536870912) {
			$$invalidate(31, checked = sortedItems.filter(({ checked }) => checked));
		}

		if ($$self.$$.dirty[0] & /*sortedItems*/ 536870912) {
			unchecked = sortedItems.filter(({ checked }) => !checked);
		}

		if ($$self.$$.dirty[0] & /*sortedItems, value*/ 536870913 | $$self.$$.dirty[1] & /*filterItem*/ 2048) {
			$$invalidate(30, filteredItems = sortedItems.filter(item => filterItem(item, value)));
		}

		if ($$self.$$.dirty[0] & /*highlightedIndex, filterable, filteredItems, sortedItems*/ 1879052288) {
			$$invalidate(6, highlightedId = highlightedIndex > -1
			? (filterable ? filteredItems : sortedItems)[highlightedIndex]?.id ?? null
			: null);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		open,
		inputRef,
		multiSelectRef,
		fieldRef,
		selectionRef,
		highlightedId,
		itemToString,
		itemToInput,
		size,
		direction,
		disabled,
		filterable,
		light,
		placeholder,
		translateWithId,
		translateWithIdSelection,
		titleText,
		useTitleInItem,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		id,
		name,
		highlightedIndex,
		sortedItems,
		filteredItems,
		checked,
		ariaLabel,
		inline,
		menuId,
		dispatch,
		change,
		$$restProps,
		items,
		selectedIds,
		type,
		selectionFeedback,
		filterItem,
		locale,
		sortItem,
		slots,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		click_handler,
		clear_handler,
		clear_handler_1,
		input_binding,
		input_input_handler,
		keydown_handler_1,
		clear_handler_2,
		click_handler_1,
		click_handler_2,
		keydown_handler_2,
		focus_handler_1,
		blur_handler_1,
		blur_handler_2,
		click_handler_3,
		mouseenter_handler,
		div_binding,
		$$scope
	];
}

class MultiSelect extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1F,
			create_fragment$1F,
			safe_not_equal,
			{
				items: 38,
				itemToString: 7,
				itemToInput: 8,
				selectedIds: 39,
				value: 0,
				size: 9,
				type: 40,
				direction: 10,
				selectionFeedback: 41,
				disabled: 11,
				filterable: 12,
				filterItem: 42,
				open: 1,
				light: 13,
				locale: 43,
				placeholder: 14,
				sortItem: 44,
				translateWithId: 15,
				translateWithIdSelection: 16,
				titleText: 17,
				useTitleInItem: 18,
				invalid: 19,
				invalidText: 20,
				warn: 21,
				warnText: 22,
				helperText: 23,
				label: 24,
				hideLabel: 25,
				id: 26,
				name: 27,
				inputRef: 2,
				multiSelectRef: 3,
				fieldRef: 4,
				selectionRef: 5,
				highlightedId: 6
			},
			null,
			[-1, -1, -1]
		);
	}
}

var MultiSelect$1 = MultiSelect;

/* src/Modal/Modal.svelte generated by Svelte v3.49.0 */

function get_each_context$a(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[55] = list[i];
	return child_ctx;
}

const get_heading_slot_changes = dirty => ({});
const get_heading_slot_context = ctx => ({});
const get_label_slot_changes$1 = dirty => ({});
const get_label_slot_context$1 = ctx => ({});

// (207:6) {#if passiveModal}
function create_if_block_6$4(ctx) {
	let button;
	let close;
	let current;
	let mounted;
	let dispose;

	close = new Close$1({
			props: {
				size: 20,
				class: "bx--modal-close__icon",
				"aria-hidden": "true"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[8]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close, button, null);
			/*button_binding*/ ctx[37](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[38]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*iconDescription*/ 256) {
				attr(button, "aria-label", /*iconDescription*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close);
			/*button_binding*/ ctx[37](null);
			mounted = false;
			dispose();
		}
	};
}

// (220:6) {#if modalLabel}
function create_if_block_5$4(ctx) {
	let h2;
	let current;
	const label_slot_template = /*#slots*/ ctx[31].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[50], get_label_slot_context$1);
	const label_slot_or_fallback = label_slot || fallback_block_1$a(ctx);

	return {
		c() {
			h2 = element("h2");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(h2, "id", /*modalLabelId*/ ctx[25]);
			toggle_class(h2, "bx--modal-header__label", true);
		},
		m(target, anchor) {
			insert(target, h2, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(h2, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[50], dirty, get_label_slot_changes$1),
						get_label_slot_context$1
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*modalLabel*/ 128)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*modalLabelId*/ 33554432) {
				attr(h2, "id", /*modalLabelId*/ ctx[25]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h2);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (222:29) {modalLabel}
function fallback_block_1$a(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalLabel*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalLabel*/ 128) set_data(t, /*modalLabel*/ ctx[7]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (226:29) {modalHeading}
function fallback_block$u(ctx) {
	let t;

	return {
		c() {
			t = text(/*modalHeading*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*modalHeading*/ 64) set_data(t, /*modalHeading*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (228:6) {#if !passiveModal}
function create_if_block_4$6(ctx) {
	let button;
	let close;
	let current;
	let mounted;
	let dispose;

	close = new Close$1({
			props: {
				size: 20,
				class: "bx--modal-close__icon",
				"aria-hidden": "true"
			}
		});

	return {
		c() {
			button = element("button");
			create_component(close.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-label", /*iconDescription*/ ctx[8]);
			toggle_class(button, "bx--modal-close", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(close, button, null);
			/*button_binding_1*/ ctx[39](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_2*/ ctx[40]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*iconDescription*/ 256) {
				attr(button, "aria-label", /*iconDescription*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			destroy_component(close);
			/*button_binding_1*/ ctx[39](null);
			mounted = false;
			dispose();
		}
	};
}

// (254:4) {#if hasScrollingContent}
function create_if_block_3$9(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			toggle_class(div, "bx--modal-content--overflow-indicator", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (257:4) {#if !passiveModal}
function create_if_block$S(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let t;
	let button;
	let current;
	const if_block_creators = [create_if_block_1$k, create_if_block_2$c];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*secondaryButtons*/ ctx[16].length > 0) return 0;
		if (/*secondaryButtonText*/ ctx[15]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	button = new Button$1({
			props: {
				kind: /*danger*/ ctx[3] ? 'danger' : 'primary',
				disabled: /*primaryButtonDisabled*/ ctx[12],
				icon: /*primaryButtonIcon*/ ctx[13],
				$$slots: { default: [create_default_slot$8] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_5*/ ctx[43]);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			create_component(button.$$.fragment);
			toggle_class(div, "bx--modal-footer", true);
			toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[16].length === 2);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div, null);
			}

			append(div, t);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div, t);
				} else {
					if_block = null;
				}
			}

			const button_changes = {};
			if (dirty[0] & /*danger*/ 8) button_changes.kind = /*danger*/ ctx[3] ? 'danger' : 'primary';
			if (dirty[0] & /*primaryButtonDisabled*/ 4096) button_changes.disabled = /*primaryButtonDisabled*/ ctx[12];
			if (dirty[0] & /*primaryButtonIcon*/ 8192) button_changes.icon = /*primaryButtonIcon*/ ctx[13];

			if (dirty[0] & /*primaryButtonText*/ 2048 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (dirty[0] & /*secondaryButtons*/ 65536) {
				toggle_class(div, "bx--modal-footer--three-button", /*secondaryButtons*/ ctx[16].length === 2);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			destroy_component(button);
		}
	};
}

// (273:38) 
function create_if_block_2$c(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_4*/ ctx[42]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty[0] & /*secondaryButtonText*/ 32768 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (262:8) {#if secondaryButtons.length > 0}
function create_if_block_1$k(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*secondaryButtons*/ ctx[16];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*dispatch, secondaryButtons*/ 67174400) {
				each_value = /*secondaryButtons*/ ctx[16];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$a(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$a(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (274:10) <Button             kind="secondary"             on:click="{() => {               dispatch('click:button--secondary', {                 text: secondaryButtonText,               });             }}"           >
function create_default_slot_2$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*secondaryButtonText*/ ctx[15]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtonText*/ 32768) set_data(t, /*secondaryButtonText*/ ctx[15]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (264:12) <Button               kind="secondary"               on:click="{() => {                 dispatch('click:button--secondary', { text: button.text });               }}"             >
function create_default_slot_1$3(ctx) {
	let t0_value = /*button*/ ctx[55].text + "";
	let t0;
	let t1;

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*secondaryButtons*/ 65536 && t0_value !== (t0_value = /*button*/ ctx[55].text + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (263:10) {#each secondaryButtons as button}
function create_each_block$a(ctx) {
	let button;
	let current;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[41](/*button*/ ctx[55]);
	}

	button = new Button$1({
			props: {
				kind: "secondary",
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			}
		});

	button.$on("click", click_handler_3);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty[0] & /*secondaryButtons*/ 65536 | dirty[1] & /*$$scope*/ 524288) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (285:8) <Button           kind="{danger ? 'danger' : 'primary'}"           disabled="{primaryButtonDisabled}"           icon="{primaryButtonIcon}"           on:click="{() => {             dispatch('submit');             dispatch('click:button--primary');           }}"         >
function create_default_slot$8(ctx) {
	let t;

	return {
		c() {
			t = text(/*primaryButtonText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*primaryButtonText*/ 2048) set_data(t, /*primaryButtonText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1E(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let h3;
	let t2;
	let t3;
	let div1;
	let div1_tabindex_value;
	let div1_role_value;
	let div1_aria_label_value;
	let div1_aria_labelledby_value;
	let t4;
	let t5;
	let div2_role_value;
	let div2_aria_describedby_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*passiveModal*/ ctx[5] && create_if_block_6$4(ctx);
	let if_block1 = /*modalLabel*/ ctx[7] && create_if_block_5$4(ctx);
	const heading_slot_template = /*#slots*/ ctx[31].heading;
	const heading_slot = create_slot(heading_slot_template, ctx, /*$$scope*/ ctx[50], get_heading_slot_context);
	const heading_slot_or_fallback = heading_slot || fallback_block$u(ctx);
	let if_block2 = !/*passiveModal*/ ctx[5] && create_if_block_4$6(ctx);
	const default_slot_template = /*#slots*/ ctx[31].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[50], null);
	let if_block3 = /*hasScrollingContent*/ ctx[10] && create_if_block_3$9();
	let if_block4 = !/*passiveModal*/ ctx[5] && create_if_block$S(ctx);
	let div3_levels = [{ role: "presentation" }, { id: /*id*/ ctx[18] }, /*$$restProps*/ ctx[28]];
	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			h3 = element("h3");
			if (heading_slot_or_fallback) heading_slot_or_fallback.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			attr(h3, "id", /*modalHeadingId*/ ctx[24]);
			toggle_class(h3, "bx--modal-header__heading", true);
			toggle_class(div0, "bx--modal-header", true);
			attr(div1, "id", /*modalBodyId*/ ctx[23]);
			attr(div1, "tabindex", div1_tabindex_value = /*hasScrollingContent*/ ctx[10] ? '0' : undefined);
			attr(div1, "role", div1_role_value = /*hasScrollingContent*/ ctx[10] ? 'region' : undefined);

			attr(div1, "aria-label", div1_aria_label_value = /*hasScrollingContent*/ ctx[10]
			? /*ariaLabel*/ ctx[22]
			: undefined);

			attr(div1, "aria-labelledby", div1_aria_labelledby_value = /*modalLabel*/ ctx[7]
			? /*modalLabelId*/ ctx[25]
			: /*modalHeadingId*/ ctx[24]);

			toggle_class(div1, "bx--modal-content", true);
			toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[9]);
			toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[10]);
			attr(div2, "tabindex", "-1");

			attr(div2, "role", div2_role_value = /*alert*/ ctx[4]
			? /*passiveModal*/ ctx[5] ? 'alert' : 'alertdialog'
			: 'dialog');

			attr(div2, "aria-describedby", div2_aria_describedby_value = /*alert*/ ctx[4] && !/*passiveModal*/ ctx[5]
			? /*modalBodyId*/ ctx[23]
			: undefined);

			attr(div2, "aria-modal", "true");
			attr(div2, "aria-label", /*ariaLabel*/ ctx[22]);
			toggle_class(div2, "bx--modal-container", true);
			toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[5]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, h3);

			if (heading_slot_or_fallback) {
				heading_slot_or_fallback.m(h3, null);
			}

			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div2, t3);
			append(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t4);
			if (if_block3) if_block3.m(div2, null);
			append(div2, t5);
			if (if_block4) if_block4.m(div2, null);
			/*div2_binding*/ ctx[44](div2);
			/*div3_binding*/ ctx[46](div3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler_6*/ ctx[45]),
					listen(div3, "keydown", /*keydown_handler*/ ctx[32]),
					listen(div3, "keydown", /*keydown_handler_1*/ ctx[47]),
					listen(div3, "click", /*click_handler*/ ctx[33]),
					listen(div3, "click", /*click_handler_7*/ ctx[48]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[34]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[35]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[36]),
					listen(div3, "transitionend", /*transitionend_handler*/ ctx[49])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*passiveModal*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 32) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_6$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*modalLabel*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*modalLabel*/ 128) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_5$4(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (heading_slot) {
				if (heading_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						heading_slot,
						heading_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(heading_slot_template, /*$$scope*/ ctx[50], dirty, get_heading_slot_changes),
						get_heading_slot_context
					);
				}
			} else {
				if (heading_slot_or_fallback && heading_slot_or_fallback.p && (!current || dirty[0] & /*modalHeading*/ 64)) {
					heading_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*modalHeadingId*/ 16777216) {
				attr(h3, "id", /*modalHeadingId*/ ctx[24]);
			}

			if (!/*passiveModal*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 32) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_4$6(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 524288)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[50],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[50])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[50], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*modalBodyId*/ 8388608) {
				attr(div1, "id", /*modalBodyId*/ ctx[23]);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 1024 && div1_tabindex_value !== (div1_tabindex_value = /*hasScrollingContent*/ ctx[10] ? '0' : undefined)) {
				attr(div1, "tabindex", div1_tabindex_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent*/ 1024 && div1_role_value !== (div1_role_value = /*hasScrollingContent*/ ctx[10] ? 'region' : undefined)) {
				attr(div1, "role", div1_role_value);
			}

			if (!current || dirty[0] & /*hasScrollingContent, ariaLabel*/ 4195328 && div1_aria_label_value !== (div1_aria_label_value = /*hasScrollingContent*/ ctx[10]
			? /*ariaLabel*/ ctx[22]
			: undefined)) {
				attr(div1, "aria-label", div1_aria_label_value);
			}

			if (!current || dirty[0] & /*modalLabel, modalLabelId, modalHeadingId*/ 50331776 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = /*modalLabel*/ ctx[7]
			? /*modalLabelId*/ ctx[25]
			: /*modalHeadingId*/ ctx[24])) {
				attr(div1, "aria-labelledby", div1_aria_labelledby_value);
			}

			if (dirty[0] & /*hasForm*/ 512) {
				toggle_class(div1, "bx--modal-content--with-form", /*hasForm*/ ctx[9]);
			}

			if (dirty[0] & /*hasScrollingContent*/ 1024) {
				toggle_class(div1, "bx--modal-scroll-content", /*hasScrollingContent*/ ctx[10]);
			}

			if (/*hasScrollingContent*/ ctx[10]) {
				if (if_block3) ; else {
					if_block3 = create_if_block_3$9();
					if_block3.c();
					if_block3.m(div2, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*passiveModal*/ ctx[5]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*passiveModal*/ 32) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block$S(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div2, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*alert, passiveModal*/ 48 && div2_role_value !== (div2_role_value = /*alert*/ ctx[4]
			? /*passiveModal*/ ctx[5] ? 'alert' : 'alertdialog'
			: 'dialog')) {
				attr(div2, "role", div2_role_value);
			}

			if (!current || dirty[0] & /*alert, passiveModal, modalBodyId*/ 8388656 && div2_aria_describedby_value !== (div2_aria_describedby_value = /*alert*/ ctx[4] && !/*passiveModal*/ ctx[5]
			? /*modalBodyId*/ ctx[23]
			: undefined)) {
				attr(div2, "aria-describedby", div2_aria_describedby_value);
			}

			if (!current || dirty[0] & /*ariaLabel*/ 4194304) {
				attr(div2, "aria-label", /*ariaLabel*/ ctx[22]);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div2, "bx--modal-container--xs", /*size*/ ctx[2] === 'xs');
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div2, "bx--modal-container--sm", /*size*/ ctx[2] === 'sm');
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div2, "bx--modal-container--lg", /*size*/ ctx[2] === 'lg');
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				{ role: "presentation" },
				(!current || dirty[0] & /*id*/ 262144) && { id: /*id*/ ctx[18] },
				dirty[0] & /*$$restProps*/ 268435456 && /*$$restProps*/ ctx[28]
			]));

			toggle_class(div3, "bx--modal", true);
			toggle_class(div3, "bx--modal-tall", !/*passiveModal*/ ctx[5]);
			toggle_class(div3, "is-visible", /*open*/ ctx[0]);
			toggle_class(div3, "bx--modal--danger", /*danger*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(heading_slot_or_fallback, local);
			transition_in(if_block2);
			transition_in(default_slot, local);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(heading_slot_or_fallback, local);
			transition_out(if_block2);
			transition_out(default_slot, local);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (heading_slot_or_fallback) heading_slot_or_fallback.d(detaching);
			if (if_block2) if_block2.d();
			if (default_slot) default_slot.d(detaching);
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*div2_binding*/ ctx[44](null);
			/*div3_binding*/ ctx[46](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1E($$self, $$props, $$invalidate) {
	let modalLabelId;
	let modalHeadingId;
	let modalBodyId;
	let ariaLabel;

	const omit_props_names = [
		"size","open","danger","alert","passiveModal","modalHeading","modalLabel","modalAriaLabel","iconDescription","hasForm","hasScrollingContent","primaryButtonText","primaryButtonDisabled","primaryButtonIcon","shouldSubmitOnEnter","secondaryButtonText","secondaryButtons","selectorPrimaryFocus","preventCloseOnClickOutside","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $openStore;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = undefined } = $$props;
	let { open = false } = $$props;
	let { danger = false } = $$props;
	let { alert = false } = $$props;
	let { passiveModal = false } = $$props;
	let { modalHeading = undefined } = $$props;
	let { modalLabel = undefined } = $$props;
	let { modalAriaLabel = undefined } = $$props;
	let { iconDescription = "Close the modal" } = $$props;
	let { hasForm = false } = $$props;
	let { hasScrollingContent = false } = $$props;
	let { primaryButtonText = "" } = $$props;
	let { primaryButtonDisabled = false } = $$props;
	let { primaryButtonIcon = undefined } = $$props;
	let { shouldSubmitOnEnter = true } = $$props;
	let { secondaryButtonText = "" } = $$props;
	let { secondaryButtons = [] } = $$props;
	let { selectorPrimaryFocus = "[data-modal-primary-focus]" } = $$props;
	let { preventCloseOnClickOutside = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let buttonRef = null;
	let innerModal = null;
	let opened = false;
	let didClickInnerModal = false;

	function focus(element) {
		const node = (element || innerModal).querySelector(selectorPrimaryFocus) || buttonRef;
		node.focus();
	}

	const openStore = writable(open);
	component_subscribe($$self, openStore, value => $$invalidate(52, $openStore = value));
	trackModal(openStore);

	afterUpdate(() => {
		if (opened) {
			if (!open) {
				opened = false;
				dispatch("close");
			}
		} else if (open) {
			opened = true;
			focus();
			dispatch("open");
		}
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(19, buttonRef);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, open = false);
	};

	function button_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			buttonRef = $$value;
			$$invalidate(19, buttonRef);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, open = false);
	};

	const click_handler_3 = button => {
		dispatch('click:button--secondary', { text: button.text });
	};

	const click_handler_4 = () => {
		dispatch('click:button--secondary', { text: secondaryButtonText });
	};

	const click_handler_5 = () => {
		dispatch('submit');
		dispatch('click:button--primary');
	};

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			innerModal = $$value;
			$$invalidate(20, innerModal);
		});
	}

	const click_handler_6 = () => {
		$$invalidate(21, didClickInnerModal = true);
	};

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = e => {
		if (open) {
			if (e.key === 'Escape') {
				$$invalidate(0, open = false);
			} else if (e.key === 'Tab') {
				// trap focus
				// taken from github.com/carbon-design-system/carbon/packages/react/src/internal/keyboard/navigation.js
				const selectorTabbable = `
  a[href], area[href], input:not([disabled]):not([tabindex='-1']),
  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),
  textarea:not([disabled]):not([tabindex='-1']),
  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]
`;

				const tabbable = Array.from(ref.querySelectorAll(selectorTabbable));
				let index = tabbable.indexOf(document.activeElement);
				if (index === -1 && e.shiftKey) index = 0;
				index += tabbable.length + (e.shiftKey ? -1 : 1);
				index %= tabbable.length;
				tabbable[index].focus();
				e.preventDefault();
			} else if (shouldSubmitOnEnter && e.key === 'Enter') {
				dispatch('submit');
				dispatch('click:button--primary');
			}
		}
	};

	const click_handler_7 = () => {
		if (!didClickInnerModal && !preventCloseOnClickOutside) $$invalidate(0, open = false);
		$$invalidate(21, didClickInnerModal = false);
	};

	const transitionend_handler = e => {
		if (e.propertyName === 'transform') {
			dispatch('transitionend', { open });
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(54, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(28, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('danger' in $$new_props) $$invalidate(3, danger = $$new_props.danger);
		if ('alert' in $$new_props) $$invalidate(4, alert = $$new_props.alert);
		if ('passiveModal' in $$new_props) $$invalidate(5, passiveModal = $$new_props.passiveModal);
		if ('modalHeading' in $$new_props) $$invalidate(6, modalHeading = $$new_props.modalHeading);
		if ('modalLabel' in $$new_props) $$invalidate(7, modalLabel = $$new_props.modalLabel);
		if ('modalAriaLabel' in $$new_props) $$invalidate(29, modalAriaLabel = $$new_props.modalAriaLabel);
		if ('iconDescription' in $$new_props) $$invalidate(8, iconDescription = $$new_props.iconDescription);
		if ('hasForm' in $$new_props) $$invalidate(9, hasForm = $$new_props.hasForm);
		if ('hasScrollingContent' in $$new_props) $$invalidate(10, hasScrollingContent = $$new_props.hasScrollingContent);
		if ('primaryButtonText' in $$new_props) $$invalidate(11, primaryButtonText = $$new_props.primaryButtonText);
		if ('primaryButtonDisabled' in $$new_props) $$invalidate(12, primaryButtonDisabled = $$new_props.primaryButtonDisabled);
		if ('primaryButtonIcon' in $$new_props) $$invalidate(13, primaryButtonIcon = $$new_props.primaryButtonIcon);
		if ('shouldSubmitOnEnter' in $$new_props) $$invalidate(14, shouldSubmitOnEnter = $$new_props.shouldSubmitOnEnter);
		if ('secondaryButtonText' in $$new_props) $$invalidate(15, secondaryButtonText = $$new_props.secondaryButtonText);
		if ('secondaryButtons' in $$new_props) $$invalidate(16, secondaryButtons = $$new_props.secondaryButtons);
		if ('selectorPrimaryFocus' in $$new_props) $$invalidate(30, selectorPrimaryFocus = $$new_props.selectorPrimaryFocus);
		if ('preventCloseOnClickOutside' in $$new_props) $$invalidate(17, preventCloseOnClickOutside = $$new_props.preventCloseOnClickOutside);
		if ('id' in $$new_props) $$invalidate(18, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(50, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*open*/ 1) {
			set_store_value(openStore, $openStore = open, $openStore);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			$$invalidate(25, modalLabelId = `bx--modal-header__label--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			$$invalidate(24, modalHeadingId = `bx--modal-header__heading--modal-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			$$invalidate(23, modalBodyId = `bx--modal-body--${id}`);
		}

		$$invalidate(22, ariaLabel = modalLabel || $$props["aria-label"] || modalAriaLabel || modalHeading);
	};

	$$props = exclude_internal_props($$props);

	return [
		open,
		ref,
		size,
		danger,
		alert,
		passiveModal,
		modalHeading,
		modalLabel,
		iconDescription,
		hasForm,
		hasScrollingContent,
		primaryButtonText,
		primaryButtonDisabled,
		primaryButtonIcon,
		shouldSubmitOnEnter,
		secondaryButtonText,
		secondaryButtons,
		preventCloseOnClickOutside,
		id,
		buttonRef,
		innerModal,
		didClickInnerModal,
		ariaLabel,
		modalBodyId,
		modalHeadingId,
		modalLabelId,
		dispatch,
		openStore,
		$$restProps,
		modalAriaLabel,
		selectorPrimaryFocus,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		button_binding,
		click_handler_1,
		button_binding_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		div2_binding,
		click_handler_6,
		div3_binding,
		keydown_handler_1,
		click_handler_7,
		transitionend_handler,
		$$scope
	];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1E,
			create_fragment$1E,
			safe_not_equal,
			{
				size: 2,
				open: 0,
				danger: 3,
				alert: 4,
				passiveModal: 5,
				modalHeading: 6,
				modalLabel: 7,
				modalAriaLabel: 29,
				iconDescription: 8,
				hasForm: 9,
				hasScrollingContent: 10,
				primaryButtonText: 11,
				primaryButtonDisabled: 12,
				primaryButtonIcon: 13,
				shouldSubmitOnEnter: 14,
				secondaryButtonText: 15,
				secondaryButtons: 16,
				selectorPrimaryFocus: 30,
				preventCloseOnClickOutside: 17,
				id: 18,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var Modal$1 = Modal;

/* src/Notification/NotificationButton.svelte generated by Svelte v3.49.0 */

function create_fragment$1D(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[1];

	function switch_props(ctx) {
		return {
			props: {
				size: 20,
				title: /*title*/ ctx[2],
				class: "" + ((/*notificationType*/ ctx[0] === 'toast' && 'bx--toast-notification__close-icon') + " " + (/*notificationType*/ ctx[0] === 'inline' && 'bx--inline-notification__close-icon'))
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let button_levels = [
		{ type: "button" },
		{ "aria-label": /*iconDescription*/ ctx[3] },
		{ title: /*iconDescription*/ ctx[3] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === 'toast');
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === 'inline');
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[5]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*title*/ 4) switch_instance_changes.title = /*title*/ ctx[2];
			if (dirty & /*notificationType*/ 1) switch_instance_changes.class = "" + ((/*notificationType*/ ctx[0] === 'toast' && 'bx--toast-notification__close-icon') + " " + (/*notificationType*/ ctx[0] === 'inline' && 'bx--inline-notification__close-icon'));

			if (switch_value !== (switch_value = /*icon*/ ctx[1])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*iconDescription*/ 8) && { "aria-label": /*iconDescription*/ ctx[3] },
				(!current || dirty & /*iconDescription*/ 8) && { title: /*iconDescription*/ ctx[3] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--toast-notification__close-button", /*notificationType*/ ctx[0] === 'toast');
			toggle_class(button, "bx--inline-notification__close-button", /*notificationType*/ ctx[0] === 'inline');
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1D($$self, $$props, $$invalidate) {
	const omit_props_names = ["notificationType","icon","title","iconDescription"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { notificationType = "toast" } = $$props;
	let { icon = Close$1 } = $$props;
	let { title = undefined } = $$props;
	let { iconDescription = "Close icon" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('notificationType' in $$new_props) $$invalidate(0, notificationType = $$new_props.notificationType);
		if ('icon' in $$new_props) $$invalidate(1, icon = $$new_props.icon);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
	};

	return [
		notificationType,
		icon,
		title,
		iconDescription,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NotificationButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1D, create_fragment$1D, safe_not_equal, {
			notificationType: 0,
			icon: 1,
			title: 2,
			iconDescription: 3
		});
	}
}

var NotificationButton$1 = NotificationButton;

/* src/icons/InformationFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$R(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1C(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$R(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,6a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$R(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1C($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class InformationFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1C, create_fragment$1C, safe_not_equal, { size: 0, title: 1 });
	}
}

var InformationFilled$1 = InformationFilled;

/* src/icons/InformationSquareFilled.svelte generated by Svelte v3.49.0 */

function create_if_block$Q(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1B(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$Q(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "fill", "none");
			attr(path0, "d", "M16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,13.875H17.125v-8H13v2.25h1.875v5.75H12v2.25h8Z");
			attr(path0, "data-icon-path", "inner-path");
			attr(path1, "d", "M26,4H6A2,2,0,0,0,4,6V26a2,2,0,0,0,2,2H26a2,2,0,0,0,2-2V6A2,2,0,0,0,26,4ZM16,8a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,16,8Zm4,16.125H12v-2.25h2.875v-5.75H13v-2.25h4.125v8H20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$Q(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1B($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class InformationSquareFilled extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1B, create_fragment$1B, safe_not_equal, { size: 0, title: 1 });
	}
}

var InformationSquareFilled$1 = InformationSquareFilled;

/* src/Notification/NotificationIcon.svelte generated by Svelte v3.49.0 */

function create_fragment$1A(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]];

	function switch_props(ctx) {
		return {
			props: {
				size: 20,
				title: /*iconDescription*/ ctx[2],
				class: "" + ((/*notificationType*/ ctx[1] === 'toast' && 'bx--toast-notification__icon') + " " + (/*notificationType*/ ctx[1] === 'inline' && 'bx--inline-notification__icon'))
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*iconDescription*/ 4) switch_instance_changes.title = /*iconDescription*/ ctx[2];
			if (dirty & /*notificationType*/ 2) switch_instance_changes.class = "" + ((/*notificationType*/ ctx[1] === 'toast' && 'bx--toast-notification__icon') + " " + (/*notificationType*/ ctx[1] === 'inline' && 'bx--inline-notification__icon'));

			if (switch_value !== (switch_value = /*icons*/ ctx[3][/*kind*/ ctx[0]])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance$1A($$self, $$props, $$invalidate) {
	let { kind = "error" } = $$props;
	let { notificationType = "toast" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;

	const icons = {
		error: ErrorFilled$1,
		"info-square": InformationSquareFilled$1,
		info: InformationFilled$1,
		success: CheckmarkFilled$1,
		warning: WarningFilled$1,
		"warning-alt": WarningAltFilled$1
	};

	$$self.$$set = $$props => {
		if ('kind' in $$props) $$invalidate(0, kind = $$props.kind);
		if ('notificationType' in $$props) $$invalidate(1, notificationType = $$props.notificationType);
		if ('iconDescription' in $$props) $$invalidate(2, iconDescription = $$props.iconDescription);
	};

	return [kind, notificationType, iconDescription, icons];
}

class NotificationIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1A, create_fragment$1A, safe_not_equal, {
			kind: 0,
			notificationType: 1,
			iconDescription: 2
		});
	}
}

var NotificationIcon$1 = NotificationIcon;

/* src/Notification/ToastNotification.svelte generated by Svelte v3.49.0 */
const get_caption_slot_changes = dirty => ({});
const get_caption_slot_context = ctx => ({});
const get_subtitle_slot_changes$1 = dirty => ({});
const get_subtitle_slot_context$1 = ctx => ({});
const get_title_slot_changes$1 = dirty => ({});
const get_title_slot_context$1 = ctx => ({});

// (74:0) {#if open}
function create_if_block$P(ctx) {
	let div3;
	let notificationicon;
	let t0;
	let div2;
	let h3;
	let t1;
	let div0;
	let t2;
	let div1;
	let t3;
	let t4;
	let div3_style_value;
	let current;
	let mounted;
	let dispose;
	notificationicon = new NotificationIcon$1({ props: { kind: /*kind*/ ctx[0] } });
	const title_slot_template = /*#slots*/ ctx[14].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[13], get_title_slot_context$1);
	const title_slot_or_fallback = title_slot || fallback_block_2$4(ctx);
	const subtitle_slot_template = /*#slots*/ ctx[14].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[13], get_subtitle_slot_context$1);
	const subtitle_slot_or_fallback = subtitle_slot || fallback_block_1$9(ctx);
	const caption_slot_template = /*#slots*/ ctx[14].caption;
	const caption_slot = create_slot(caption_slot_template, ctx, /*$$scope*/ ctx[13], get_caption_slot_context);
	const caption_slot_or_fallback = caption_slot || fallback_block$t(ctx);
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
	let if_block = !/*hideCloseButton*/ ctx[7] && create_if_block_1$j(ctx);

	let div3_levels = [
		{ role: /*role*/ ctx[2] },
		{ kind: /*kind*/ ctx[0] },
		/*$$restProps*/ ctx[11],
		{
			style: div3_style_value = "" + ((/*fullWidth*/ ctx[8] && 'width: 100%;') + /*$$restProps*/ ctx[11].style)
		}
	];

	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			div2 = element("div");
			h3 = element("h3");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.c();
			t2 = space();
			div1 = element("div");
			if (caption_slot_or_fallback) caption_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			t4 = space();
			if (if_block) if_block.c();
			toggle_class(h3, "bx--toast-notification__title", true);
			toggle_class(div0, "bx--toast-notification__subtitle", true);
			toggle_class(div1, "bx--toast-notification__caption", true);
			toggle_class(div2, "bx--toast-notification__details", true);
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--toast-notification", true);
			toggle_class(div3, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--toast-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--toast-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--toast-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--toast-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--toast-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			mount_component(notificationicon, div3, null);
			append(div3, t0);
			append(div3, div2);
			append(div2, h3);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(h3, null);
			}

			append(div2, t1);
			append(div2, div0);

			if (subtitle_slot_or_fallback) {
				subtitle_slot_or_fallback.m(div0, null);
			}

			append(div2, t2);
			append(div2, div1);

			if (caption_slot_or_fallback) {
				caption_slot_or_fallback.m(div1, null);
			}

			append(div2, t3);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			append(div3, t4);
			if (if_block) if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div3, "click", /*click_handler*/ ctx[15]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[16]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[17]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*kind*/ 1) notificationicon_changes.kind = /*kind*/ ctx[0];
			notificationicon.$set(notificationicon_changes);

			if (title_slot) {
				if (title_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[13], dirty, get_title_slot_changes$1),
						get_title_slot_context$1
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/ 8)) {
					title_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[13], dirty, get_subtitle_slot_changes$1),
						get_subtitle_slot_context$1
					);
				}
			} else {
				if (subtitle_slot_or_fallback && subtitle_slot_or_fallback.p && (!current || dirty & /*subtitle*/ 16)) {
					subtitle_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (caption_slot) {
				if (caption_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						caption_slot,
						caption_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(caption_slot_template, /*$$scope*/ ctx[13], dirty, get_caption_slot_changes),
						get_caption_slot_context
					);
				}
			} else {
				if (caption_slot_or_fallback && caption_slot_or_fallback.p && (!current || dirty & /*caption*/ 32)) {
					caption_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!/*hideCloseButton*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$j(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*kind*/ 1) && { kind: /*kind*/ ctx[0] },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11],
				(!current || dirty & /*fullWidth, $$restProps*/ 2304 && div3_style_value !== (div3_style_value = "" + ((/*fullWidth*/ ctx[8] && 'width: 100%;') + /*$$restProps*/ ctx[11].style))) && { style: div3_style_value }
			]));

			toggle_class(div3, "bx--toast-notification", true);
			toggle_class(div3, "bx--toast-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--toast-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--toast-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--toast-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--toast-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--toast-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--toast-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(title_slot_or_fallback, local);
			transition_in(subtitle_slot_or_fallback, local);
			transition_in(caption_slot_or_fallback, local);
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(title_slot_or_fallback, local);
			transition_out(subtitle_slot_or_fallback, local);
			transition_out(caption_slot_or_fallback, local);
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(notificationicon);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.d(detaching);
			if (caption_slot_or_fallback) caption_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (96:27) {title}
function fallback_block_2$4(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 8) set_data(t, /*title*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (99:30) {subtitle}
function fallback_block_1$9(ctx) {
	let t;

	return {
		c() {
			t = text(/*subtitle*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*subtitle*/ 16) set_data(t, /*subtitle*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (102:29) {caption}
function fallback_block$t(ctx) {
	let t;

	return {
		c() {
			t = text(/*caption*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*caption*/ 32) set_data(t, /*caption*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (106:4) {#if !hideCloseButton}
function create_if_block_1$j(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton$1({
			props: {
				iconDescription: /*iconDescription*/ ctx[6]
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[10]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 64) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$1z(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[9] && create_if_block$P(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[9]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$P(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1z($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","lowContrast","timeout","role","title","subtitle","caption","iconDescription","hideCloseButton","fullWidth"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "" } = $$props;
	let { subtitle = "" } = $$props;
	let { caption = "" } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	let { hideCloseButton = false } = $$props;
	let { fullWidth = false } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close(closeFromTimeout) {
		const shouldContinue = dispatch("close", { timeout: closeFromTimeout === true }, { cancelable: true });

		if (shouldContinue) {
			$$invalidate(9, open = false);
		}
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(true), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ('lowContrast' in $$new_props) $$invalidate(1, lowContrast = $$new_props.lowContrast);
		if ('timeout' in $$new_props) $$invalidate(12, timeout = $$new_props.timeout);
		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ('title' in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ('subtitle' in $$new_props) $$invalidate(4, subtitle = $$new_props.subtitle);
		if ('caption' in $$new_props) $$invalidate(5, caption = $$new_props.caption);
		if ('iconDescription' in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ('hideCloseButton' in $$new_props) $$invalidate(7, hideCloseButton = $$new_props.hideCloseButton);
		if ('fullWidth' in $$new_props) $$invalidate(8, fullWidth = $$new_props.fullWidth);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	return [
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		caption,
		iconDescription,
		hideCloseButton,
		fullWidth,
		open,
		close,
		$$restProps,
		timeout,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ToastNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1z, create_fragment$1z, safe_not_equal, {
			kind: 0,
			lowContrast: 1,
			timeout: 12,
			role: 2,
			title: 3,
			subtitle: 4,
			caption: 5,
			iconDescription: 6,
			hideCloseButton: 7,
			fullWidth: 8
		});
	}
}

var ToastNotification$1 = ToastNotification;

/* src/Notification/InlineNotification.svelte generated by Svelte v3.49.0 */
const get_actions_slot_changes = dirty => ({});
const get_actions_slot_context = ctx => ({});
const get_subtitle_slot_changes = dirty => ({});
const get_subtitle_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});

// (65:0) {#if open}
function create_if_block$O(ctx) {
	let div3;
	let div2;
	let notificationicon;
	let t0;
	let div1;
	let p;
	let t1;
	let div0;
	let t2;
	let t3;
	let t4;
	let current;
	let mounted;
	let dispose;

	notificationicon = new NotificationIcon$1({
			props: {
				notificationType: "inline",
				kind: /*kind*/ ctx[0]
			}
		});

	const title_slot_template = /*#slots*/ ctx[12].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[11], get_title_slot_context);
	const title_slot_or_fallback = title_slot || fallback_block_1$8(ctx);
	const subtitle_slot_template = /*#slots*/ ctx[12].subtitle;
	const subtitle_slot = create_slot(subtitle_slot_template, ctx, /*$$scope*/ ctx[11], get_subtitle_slot_context);
	const subtitle_slot_or_fallback = subtitle_slot || fallback_block$s(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);
	const actions_slot_template = /*#slots*/ ctx[12].actions;
	const actions_slot = create_slot(actions_slot_template, ctx, /*$$scope*/ ctx[11], get_actions_slot_context);
	let if_block = !/*hideCloseButton*/ ctx[5] && create_if_block_1$i(ctx);
	let div3_levels = [{ role: /*role*/ ctx[2] }, { kind: /*kind*/ ctx[0] }, /*$$restProps*/ ctx[9]];
	let div3_data = {};

	for (let i = 0; i < div3_levels.length; i += 1) {
		div3_data = assign(div3_data, div3_levels[i]);
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			create_component(notificationicon.$$.fragment);
			t0 = space();
			div1 = element("div");
			p = element("p");
			if (title_slot_or_fallback) title_slot_or_fallback.c();
			t1 = space();
			div0 = element("div");
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.c();
			t2 = space();
			if (default_slot) default_slot.c();
			t3 = space();
			if (actions_slot) actions_slot.c();
			t4 = space();
			if (if_block) if_block.c();
			toggle_class(p, "bx--inline-notification__title", true);
			toggle_class(div0, "bx--inline-notification__subtitle", true);
			toggle_class(div1, "bx--inline-notification__text-wrapper", true);
			toggle_class(div2, "bx--inline-notification__details", true);
			set_attributes(div3, div3_data);
			toggle_class(div3, "bx--inline-notification", true);
			toggle_class(div3, "bx--inline-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--inline-notification--hide-close-button", /*hideCloseButton*/ ctx[5]);
			toggle_class(div3, "bx--inline-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--inline-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--inline-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--inline-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--inline-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--inline-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			mount_component(notificationicon, div2, null);
			append(div2, t0);
			append(div2, div1);
			append(div1, p);

			if (title_slot_or_fallback) {
				title_slot_or_fallback.m(p, null);
			}

			append(div1, t1);
			append(div1, div0);

			if (subtitle_slot_or_fallback) {
				subtitle_slot_or_fallback.m(div0, null);
			}

			append(div1, t2);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div3, t3);

			if (actions_slot) {
				actions_slot.m(div3, null);
			}

			append(div3, t4);
			if (if_block) if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div3, "click", /*click_handler*/ ctx[13]),
					listen(div3, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div3, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div3, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const notificationicon_changes = {};
			if (dirty & /*kind*/ 1) notificationicon_changes.kind = /*kind*/ ctx[0];
			notificationicon.$set(notificationicon_changes);

			if (title_slot) {
				if (title_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						title_slot,
						title_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(title_slot_template, /*$$scope*/ ctx[11], dirty, get_title_slot_changes),
						get_title_slot_context
					);
				}
			} else {
				if (title_slot_or_fallback && title_slot_or_fallback.p && (!current || dirty & /*title*/ 8)) {
					title_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (subtitle_slot) {
				if (subtitle_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						subtitle_slot,
						subtitle_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(subtitle_slot_template, /*$$scope*/ ctx[11], dirty, get_subtitle_slot_changes),
						get_subtitle_slot_context
					);
				}
			} else {
				if (subtitle_slot_or_fallback && subtitle_slot_or_fallback.p && (!current || dirty & /*subtitle*/ 16)) {
					subtitle_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (actions_slot) {
				if (actions_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						actions_slot,
						actions_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(actions_slot_template, /*$$scope*/ ctx[11], dirty, get_actions_slot_changes),
						get_actions_slot_context
					);
				}
			}

			if (!/*hideCloseButton*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideCloseButton*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1$i(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(div3, div3_data = get_spread_update(div3_levels, [
				(!current || dirty & /*role*/ 4) && { role: /*role*/ ctx[2] },
				(!current || dirty & /*kind*/ 1) && { kind: /*kind*/ ctx[0] },
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9]
			]));

			toggle_class(div3, "bx--inline-notification", true);
			toggle_class(div3, "bx--inline-notification--low-contrast", /*lowContrast*/ ctx[1]);
			toggle_class(div3, "bx--inline-notification--hide-close-button", /*hideCloseButton*/ ctx[5]);
			toggle_class(div3, "bx--inline-notification--error", /*kind*/ ctx[0] === 'error');
			toggle_class(div3, "bx--inline-notification--info", /*kind*/ ctx[0] === 'info');
			toggle_class(div3, "bx--inline-notification--info-square", /*kind*/ ctx[0] === 'info-square');
			toggle_class(div3, "bx--inline-notification--success", /*kind*/ ctx[0] === 'success');
			toggle_class(div3, "bx--inline-notification--warning", /*kind*/ ctx[0] === 'warning');
			toggle_class(div3, "bx--inline-notification--warning-alt", /*kind*/ ctx[0] === 'warning-alt');
		},
		i(local) {
			if (current) return;
			transition_in(notificationicon.$$.fragment, local);
			transition_in(title_slot_or_fallback, local);
			transition_in(subtitle_slot_or_fallback, local);
			transition_in(default_slot, local);
			transition_in(actions_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(notificationicon.$$.fragment, local);
			transition_out(title_slot_or_fallback, local);
			transition_out(subtitle_slot_or_fallback, local);
			transition_out(default_slot, local);
			transition_out(actions_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(notificationicon);
			if (title_slot_or_fallback) title_slot_or_fallback.d(detaching);
			if (subtitle_slot_or_fallback) subtitle_slot_or_fallback.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (actions_slot) actions_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (88:29) {title}
function fallback_block_1$8(ctx) {
	let t;

	return {
		c() {
			t = text(/*title*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 8) set_data(t, /*title*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (91:32) {subtitle}
function fallback_block$s(ctx) {
	let t;

	return {
		c() {
			t = text(/*subtitle*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*subtitle*/ 16) set_data(t, /*subtitle*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (97:4) {#if !hideCloseButton}
function create_if_block_1$i(ctx) {
	let notificationbutton;
	let current;

	notificationbutton = new NotificationButton$1({
			props: {
				iconDescription: /*iconDescription*/ ctx[6],
				notificationType: "inline"
			}
		});

	notificationbutton.$on("click", /*close*/ ctx[8]);

	return {
		c() {
			create_component(notificationbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(notificationbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const notificationbutton_changes = {};
			if (dirty & /*iconDescription*/ 64) notificationbutton_changes.iconDescription = /*iconDescription*/ ctx[6];
			notificationbutton.$set(notificationbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(notificationbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(notificationbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(notificationbutton, detaching);
		}
	};
}

function create_fragment$1y(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*open*/ ctx[7] && create_if_block$O(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*open*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$O(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$1y($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"kind","lowContrast","timeout","role","title","subtitle","hideCloseButton","iconDescription"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { kind = "error" } = $$props;
	let { lowContrast = false } = $$props;
	let { timeout = 0 } = $$props;
	let { role = "alert" } = $$props;
	let { title = "" } = $$props;
	let { subtitle = "" } = $$props;
	let { hideCloseButton = false } = $$props;
	let { iconDescription = "Closes notification" } = $$props;
	const dispatch = createEventDispatcher();
	let open = true;
	let timeoutId = undefined;

	function close(closeFromTimeout) {
		const shouldContinue = dispatch("close", { timeout: closeFromTimeout === true }, { cancelable: true });

		if (shouldContinue) {
			$$invalidate(7, open = false);
		}
	}

	onMount(() => {
		if (timeout) {
			timeoutId = setTimeout(() => close(true), timeout);
		}

		return () => {
			clearTimeout(timeoutId);
		};
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('kind' in $$new_props) $$invalidate(0, kind = $$new_props.kind);
		if ('lowContrast' in $$new_props) $$invalidate(1, lowContrast = $$new_props.lowContrast);
		if ('timeout' in $$new_props) $$invalidate(10, timeout = $$new_props.timeout);
		if ('role' in $$new_props) $$invalidate(2, role = $$new_props.role);
		if ('title' in $$new_props) $$invalidate(3, title = $$new_props.title);
		if ('subtitle' in $$new_props) $$invalidate(4, subtitle = $$new_props.subtitle);
		if ('hideCloseButton' in $$new_props) $$invalidate(5, hideCloseButton = $$new_props.hideCloseButton);
		if ('iconDescription' in $$new_props) $$invalidate(6, iconDescription = $$new_props.iconDescription);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	return [
		kind,
		lowContrast,
		role,
		title,
		subtitle,
		hideCloseButton,
		iconDescription,
		open,
		close,
		$$restProps,
		timeout,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class InlineNotification extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1y, create_fragment$1y, safe_not_equal, {
			kind: 0,
			lowContrast: 1,
			timeout: 10,
			role: 2,
			title: 3,
			subtitle: 4,
			hideCloseButton: 5,
			iconDescription: 6
		});
	}
}

var InlineNotification$1 = InlineNotification;

/* src/Notification/NotificationActionButton.svelte generated by Svelte v3.49.0 */

function create_default_slot$7(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1x(ctx) {
	let button;
	let current;

	const button_spread_levels = [
		{ kind: "ghost" },
		{ size: "small" },
		/*$$restProps*/ ctx[0],
		{
			class: "bx--inline-notification__action-button " + /*$$restProps*/ ctx[0].class
		}
	];

	let button_props = {
		$$slots: { default: [create_default_slot$7] },
		$$scope: { ctx }
	};

	for (let i = 0; i < button_spread_levels.length; i += 1) {
		button_props = assign(button_props, button_spread_levels[i]);
	}

	button = new Button$1({ props: button_props });
	button.$on("click", /*click_handler*/ ctx[2]);
	button.$on("mouseover", /*mouseover_handler*/ ctx[3]);
	button.$on("mouseenter", /*mouseenter_handler*/ ctx[4]);
	button.$on("mouseleave", /*mouseleave_handler*/ ctx[5]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const button_changes = (dirty & /*$$restProps*/ 1)
			? get_spread_update(button_spread_levels, [
					button_spread_levels[0],
					button_spread_levels[1],
					get_spread_object(/*$$restProps*/ ctx[0]),
					{
						class: "bx--inline-notification__action-button " + /*$$restProps*/ ctx[0].class
					}
				])
			: {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

function instance$1x($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class NotificationActionButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1x, create_fragment$1x, safe_not_equal, {});
	}
}

var NotificationActionButton$1 = NotificationActionButton;

/* src/icons/Add.svelte generated by Svelte v3.49.0 */

function create_if_block$N(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1w(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$N(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M17 15L17 8 15 8 15 15 8 15 8 17 15 17 15 24 17 24 17 17 24 17 24 15z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$N(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1w($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Add extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1w, create_fragment$1w, safe_not_equal, { size: 0, title: 1 });
	}
}

var Add$1 = Add;

/* src/icons/Subtract.svelte generated by Svelte v3.49.0 */

function create_if_block$M(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1v(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$M(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M8 15H24V17H8z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$M(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1v($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Subtract extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1v, create_fragment$1v, safe_not_equal, { size: 0, title: 1 });
	}
}

var Subtract$1 = Subtract;

/* src/icons/EditOff.svelte generated by Svelte v3.49.0 */

function create_if_block$L(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1u(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$L(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M30 28.6L3.4 2 2 3.4l10.1 10.1L4 21.6V28h6.4l8.1-8.1L28.6 30 30 28.6zM9.6 26H6v-3.6l7.5-7.5 3.6 3.6L9.6 26zM29.4 6.2L29.4 6.2l-3.6-3.6c-.8-.8-2-.8-2.8 0l0 0 0 0-8 8 1.4 1.4L20 8.4l3.6 3.6L20 15.6l1.4 1.4 8-8C30.2 8.2 30.2 7 29.4 6.2L29.4 6.2zM25 10.6L21.4 7l3-3L28 7.6 25 10.6z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$L(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1u($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class EditOff extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1u, create_fragment$1u, safe_not_equal, { size: 0, title: 1 });
	}
}

var EditOff$1 = EditOff;

/* src/NumberInput/NumberInput.svelte generated by Svelte v3.49.0 */
const get_label_slot_changes = dirty => ({});
const get_label_slot_context = ctx => ({});

// (174:4) {#if $$slots.label || label}
function create_if_block_7$3(ctx) {
	let label_1;
	let current;
	const label_slot_template = /*#slots*/ ctx[34].label;
	const label_slot = create_slot(label_slot_template, ctx, /*$$scope*/ ctx[33], get_label_slot_context);
	const label_slot_or_fallback = label_slot || fallback_block$r(ctx);

	return {
		c() {
			label_1 = element("label");
			if (label_slot_or_fallback) label_slot_or_fallback.c();
			attr(label_1, "for", /*id*/ ctx[18]);
			toggle_class(label_1, "bx--label", true);
			toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[8]);
			toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (label_slot_or_fallback) {
				label_slot_or_fallback.m(label_1, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (label_slot) {
				if (label_slot.p && (!current || dirty[1] & /*$$scope*/ 4)) {
					update_slot_base(
						label_slot,
						label_slot_template,
						ctx,
						/*$$scope*/ ctx[33],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[33])
						: get_slot_changes(label_slot_template, /*$$scope*/ ctx[33], dirty, get_label_slot_changes),
						get_label_slot_context
					);
				}
			} else {
				if (label_slot_or_fallback && label_slot_or_fallback.p && (!current || dirty[0] & /*label*/ 65536)) {
					label_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 262144) {
				attr(label_1, "for", /*id*/ ctx[18]);
			}

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(label_1, "bx--label--disabled", /*disabled*/ ctx[8]);
			}

			if (dirty[0] & /*hideLabel*/ 131072) {
				toggle_class(label_1, "bx--visually-hidden", /*hideLabel*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(label_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(label_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (label_slot_or_fallback) label_slot_or_fallback.d(detaching);
		}
	};
}

// (181:27) {label}
function fallback_block$r(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*label*/ 65536) set_data(t, /*label*/ ctx[16]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (213:6) {#if invalid}
function create_if_block_6$3(ctx) {
	let warningfilled;
	let current;
	warningfilled = new WarningFilled$1({ props: { class: "bx--number__invalid" } });

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (216:6) {#if !invalid && warn}
function create_if_block_5$3(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--number__invalid bx--number__invalid--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (221:6) {#if readonly}
function create_if_block_4$5(ctx) {
	let editoff;
	let current;

	editoff = new EditOff$1({
			props: { class: "bx--text-input__readonly-icon" }
		});

	return {
		c() {
			create_component(editoff.$$.fragment);
		},
		m(target, anchor) {
			mount_component(editoff, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(editoff.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editoff.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(editoff, detaching);
		}
	};
}

// (224:6) {#if !hideSteppers}
function create_if_block_3$8(ctx) {
	let div2;
	let button0;
	let subtract;
	let button0_title_value;
	let button0_aria_label_value;
	let t0;
	let div0;
	let t1;
	let button1;
	let add;
	let button1_title_value;
	let button1_aria_label_value;
	let t2;
	let div1;
	let current;
	let mounted;
	let dispose;
	subtract = new Subtract$1({ props: { class: "down-icon" } });
	add = new Add$1({ props: { class: "up-icon" } });

	return {
		c() {
			div2 = element("div");
			button0 = element("button");
			create_component(subtract.$$.fragment);
			t0 = space();
			div0 = element("div");
			t1 = space();
			button1 = element("button");
			create_component(add.$$.fragment);
			t2 = space();
			div1 = element("div");
			attr(button0, "type", "button");
			attr(button0, "tabindex", "-1");
			attr(button0, "title", button0_title_value = /*decrementLabel*/ ctx[23] || /*iconDescription*/ ctx[10]);
			attr(button0, "aria-label", button0_aria_label_value = /*decrementLabel*/ ctx[23] || /*iconDescription*/ ctx[10]);
			button0.disabled = /*disabled*/ ctx[8];
			toggle_class(button0, "bx--number__control-btn", true);
			toggle_class(button0, "down-icon", true);
			toggle_class(div0, "bx--number__rule-divider", true);
			attr(button1, "type", "button");
			attr(button1, "tabindex", "-1");
			attr(button1, "title", button1_title_value = /*incrementLabel*/ ctx[24] || /*iconDescription*/ ctx[10]);
			attr(button1, "aria-label", button1_aria_label_value = /*incrementLabel*/ ctx[24] || /*iconDescription*/ ctx[10]);
			button1.disabled = /*disabled*/ ctx[8];
			toggle_class(button1, "bx--number__control-btn", true);
			toggle_class(button1, "up-icon", true);
			toggle_class(div1, "bx--number__rule-divider", true);
			toggle_class(div2, "bx--number__controls", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, button0);
			mount_component(subtract, button0, null);
			append(div2, t0);
			append(div2, div0);
			append(div2, t1);
			append(div2, button1);
			mount_component(add, button1, null);
			append(div2, t2);
			append(div2, div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_1*/ ctx[45]),
					listen(button1, "click", /*click_handler_2*/ ctx[46])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 8389632 && button0_title_value !== (button0_title_value = /*decrementLabel*/ ctx[23] || /*iconDescription*/ ctx[10])) {
				attr(button0, "title", button0_title_value);
			}

			if (!current || dirty[0] & /*decrementLabel, iconDescription*/ 8389632 && button0_aria_label_value !== (button0_aria_label_value = /*decrementLabel*/ ctx[23] || /*iconDescription*/ ctx[10])) {
				attr(button0, "aria-label", button0_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 256) {
				button0.disabled = /*disabled*/ ctx[8];
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 16778240 && button1_title_value !== (button1_title_value = /*incrementLabel*/ ctx[24] || /*iconDescription*/ ctx[10])) {
				attr(button1, "title", button1_title_value);
			}

			if (!current || dirty[0] & /*incrementLabel, iconDescription*/ 16778240 && button1_aria_label_value !== (button1_aria_label_value = /*incrementLabel*/ ctx[24] || /*iconDescription*/ ctx[10])) {
				attr(button1, "aria-label", button1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 256) {
				button1.disabled = /*disabled*/ ctx[8];
			}
		},
		i(local) {
			if (current) return;
			transition_in(subtract.$$.fragment, local);
			transition_in(add.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(subtract.$$.fragment, local);
			transition_out(add.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(subtract);
			destroy_component(add);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (259:4) {#if !error && !warn && helperText}
function create_if_block_2$b(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[15]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 32768) set_data(t, /*helperText*/ ctx[15]);

			if (dirty[0] & /*disabled*/ 256) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[8]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (267:4) {#if error}
function create_if_block_1$h(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[21]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 2097152) {
				attr(div, "id", /*errorId*/ ctx[21]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (272:4) {#if !error && warn}
function create_if_block$K(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*errorId*/ ctx[21]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*errorId*/ 2097152) {
				attr(div, "id", /*errorId*/ ctx[21]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1t(ctx) {
	let div2;
	let div1;
	let t0;
	let div0;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_aria_label_value;
	let input_value_value;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let div1_data_invalid_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*$$slots*/ ctx[28].label || /*label*/ ctx[16]) && create_if_block_7$3(ctx);

	let input_levels = [
		{ type: "number" },
		{ pattern: "[0-9]*" },
		{ "aria-describedby": /*errorId*/ ctx[21] },
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-label": input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[20]
		},
		{ disabled: /*disabled*/ ctx[8] },
		{ id: /*id*/ ctx[18] },
		{ name: /*name*/ ctx[19] },
		{ max: /*max*/ ctx[4] },
		{ min: /*min*/ ctx[5] },
		{ step: /*step*/ ctx[3] },
		{
			value: input_value_value = /*value*/ ctx[0] ?? ''
		},
		{ readOnly: /*readonly*/ ctx[7] },
		/*$$restProps*/ ctx[29]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block1 = /*invalid*/ ctx[11] && create_if_block_6$3();
	let if_block2 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_5$3();
	let if_block3 = /*readonly*/ ctx[7] && create_if_block_4$5();
	let if_block4 = !/*hideSteppers*/ ctx[9] && create_if_block_3$8(ctx);
	let if_block5 = !/*error*/ ctx[22] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15] && create_if_block_2$b(ctx);
	let if_block6 = /*error*/ ctx[22] && create_if_block_1$h(ctx);
	let if_block7 = !/*error*/ ctx[22] && /*warn*/ ctx[13] && create_if_block$K(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			set_attributes(input, input_data);
			toggle_class(div0, "bx--number__input-wrapper", true);
			toggle_class(div0, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			attr(div1, "data-invalid", div1_data_invalid_value = /*error*/ ctx[22] || undefined);
			toggle_class(div1, "bx--number", true);
			toggle_class(div1, "bx--number--helpertext", true);
			toggle_class(div1, "bx--number--readonly", /*readonly*/ ctx[7]);
			toggle_class(div1, "bx--number--light", /*light*/ ctx[6]);
			toggle_class(div1, "bx--number--nolabel", /*hideLabel*/ ctx[17]);
			toggle_class(div1, "bx--number--nosteppers", /*hideSteppers*/ ctx[9]);
			toggle_class(div1, "bx--number--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div1, "bx--number--xl", /*size*/ ctx[2] === 'xl');
			toggle_class(div2, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[44](input);
			append(div0, t1);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t3);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t4);
			if (if_block4) if_block4.m(div0, null);
			append(div1, t5);
			if (if_block5) if_block5.m(div1, null);
			append(div1, t6);
			if (if_block6) if_block6.m(div1, null);
			append(div1, t7);
			if (if_block7) if_block7.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*onChange*/ ctx[27]),
					listen(input, "input", /*onInput*/ ctx[26]),
					listen(input, "keydown", /*keydown_handler*/ ctx[39]),
					listen(input, "keyup", /*keyup_handler*/ ctx[40]),
					listen(input, "focus", /*focus_handler*/ ctx[41]),
					listen(input, "blur", /*blur_handler*/ ctx[42]),
					listen(input, "paste", /*paste_handler*/ ctx[43]),
					listen(div2, "click", /*click_handler*/ ctx[35]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[36]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[37]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[38])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*$$slots*/ ctx[28].label || /*label*/ ctx[16]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*$$slots, label*/ 268500992) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_7$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "number" },
				{ pattern: "[0-9]*" },
				(!current || dirty[0] & /*errorId*/ 2097152) && { "aria-describedby": /*errorId*/ ctx[21] },
				(!current || dirty[0] & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 2048 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*label, ariaLabel*/ 1114112 && input_aria_label_value !== (input_aria_label_value = /*label*/ ctx[16] ? undefined : /*ariaLabel*/ ctx[20])) && { "aria-label": input_aria_label_value },
				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] },
				(!current || dirty[0] & /*id*/ 262144) && { id: /*id*/ ctx[18] },
				(!current || dirty[0] & /*name*/ 524288) && { name: /*name*/ ctx[19] },
				(!current || dirty[0] & /*max*/ 16) && { max: /*max*/ ctx[4] },
				(!current || dirty[0] & /*min*/ 32) && { min: /*min*/ ctx[5] },
				(!current || dirty[0] & /*step*/ 8) && { step: /*step*/ ctx[3] },
				(!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0] ?? '') && input.value !== input_value_value) && { value: input_value_value },
				(!current || dirty[0] & /*readonly*/ 128) && { readOnly: /*readonly*/ ctx[7] },
				dirty[0] & /*$$restProps*/ 536870912 && /*$$restProps*/ ctx[29]
			]));

			if (/*invalid*/ ctx[11]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6$3();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block2) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_5$3();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*readonly*/ ctx[7]) {
				if (if_block3) {
					if (dirty[0] & /*readonly*/ 128) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_4$5();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t4);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (!/*hideSteppers*/ ctx[9]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty[0] & /*hideSteppers*/ 512) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_3$8(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div0, null);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*invalid, warn*/ 10240) {
				toggle_class(div0, "bx--number__input-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			}

			if (!/*error*/ ctx[22] && !/*warn*/ ctx[13] && /*helperText*/ ctx[15]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_2$b(ctx);
					if_block5.c();
					if_block5.m(div1, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*error*/ ctx[22]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_1$h(ctx);
					if_block6.c();
					if_block6.m(div1, t7);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (!/*error*/ ctx[22] && /*warn*/ ctx[13]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block$K(ctx);
					if_block7.c();
					if_block7.m(div1, null);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!current || dirty[0] & /*error*/ 4194304 && div1_data_invalid_value !== (div1_data_invalid_value = /*error*/ ctx[22] || undefined)) {
				attr(div1, "data-invalid", div1_data_invalid_value);
			}

			if (dirty[0] & /*readonly*/ 128) {
				toggle_class(div1, "bx--number--readonly", /*readonly*/ ctx[7]);
			}

			if (dirty[0] & /*light*/ 64) {
				toggle_class(div1, "bx--number--light", /*light*/ ctx[6]);
			}

			if (dirty[0] & /*hideLabel*/ 131072) {
				toggle_class(div1, "bx--number--nolabel", /*hideLabel*/ ctx[17]);
			}

			if (dirty[0] & /*hideSteppers*/ 512) {
				toggle_class(div1, "bx--number--nosteppers", /*hideSteppers*/ ctx[9]);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div1, "bx--number--sm", /*size*/ ctx[2] === 'sm');
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(div1, "bx--number--xl", /*size*/ ctx[2] === 'xl');
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[44](null);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function parse(raw) {
	return raw != "" ? Number(raw) : null;
}

function instance$1t($$self, $$props, $$invalidate) {
	let incrementLabel;
	let decrementLabel;
	let error;
	let errorId;
	let ariaLabel;

	const omit_props_names = [
		"size","value","step","max","min","light","readonly","allowEmpty","disabled","hideSteppers","iconDescription","invalid","invalidText","warn","warnText","helperText","label","hideLabel","translateWithId","translationIds","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { value = null } = $$props;
	let { step = 1 } = $$props;
	let { max = undefined } = $$props;
	let { min = undefined } = $$props;
	let { light = false } = $$props;
	let { readonly = false } = $$props;
	let { allowEmpty = false } = $$props;
	let { disabled = false } = $$props;
	let { hideSteppers = false } = $$props;
	let { iconDescription = "" } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { label = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { translateWithId = id => defaultTranslations[id] } = $$props;

	const translationIds = {
		increment: "increment",
		decrement: "decrement"
	};

	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	const defaultTranslations = {
		[translationIds.increment]: "Increment number",
		[translationIds.decrement]: "Decrement number"
	};

	const dispatch = createEventDispatcher();

	function updateValue(direction) {
		const nextValue = $$invalidate(0, value += direction * step);

		if (nextValue < min) {
			$$invalidate(0, value = min);
		} else if (nextValue > max) {
			$$invalidate(0, value = max);
		} else {
			$$invalidate(0, value = nextValue);
		}

		dispatch("input", value);
		dispatch("change", value);
	}

	function onInput({ target }) {
		$$invalidate(0, value = parse(target.value));
		dispatch("input", value);
	}

	function onChange({ target }) {
		dispatch("change", parse(target.value));
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		updateValue(-1);
	};

	const click_handler_2 = () => {
		updateValue(1);
	};

	$$self.$$set = $$new_props => {
		$$invalidate(49, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(29, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('step' in $$new_props) $$invalidate(3, step = $$new_props.step);
		if ('max' in $$new_props) $$invalidate(4, max = $$new_props.max);
		if ('min' in $$new_props) $$invalidate(5, min = $$new_props.min);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('readonly' in $$new_props) $$invalidate(7, readonly = $$new_props.readonly);
		if ('allowEmpty' in $$new_props) $$invalidate(30, allowEmpty = $$new_props.allowEmpty);
		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
		if ('hideSteppers' in $$new_props) $$invalidate(9, hideSteppers = $$new_props.hideSteppers);
		if ('iconDescription' in $$new_props) $$invalidate(10, iconDescription = $$new_props.iconDescription);
		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(15, helperText = $$new_props.helperText);
		if ('label' in $$new_props) $$invalidate(16, label = $$new_props.label);
		if ('hideLabel' in $$new_props) $$invalidate(17, hideLabel = $$new_props.hideLabel);
		if ('translateWithId' in $$new_props) $$invalidate(31, translateWithId = $$new_props.translateWithId);
		if ('id' in $$new_props) $$invalidate(18, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(19, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(33, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[1] & /*translateWithId*/ 1) {
			$$invalidate(24, incrementLabel = translateWithId("increment"));
		}

		if ($$self.$$.dirty[1] & /*translateWithId*/ 1) {
			$$invalidate(23, decrementLabel = translateWithId("decrement"));
		}

		if ($$self.$$.dirty[0] & /*invalid, allowEmpty, value, max, min*/ 1073743921) {
			$$invalidate(22, error = invalid || !allowEmpty && value == null || value > max || value < min);
		}

		if ($$self.$$.dirty[0] & /*id*/ 262144) {
			$$invalidate(21, errorId = `error-${id}`);
		}

		$$invalidate(20, ariaLabel = $$props["aria-label"] || "Numeric input field with increment and decrement buttons");
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		ref,
		size,
		step,
		max,
		min,
		light,
		readonly,
		disabled,
		hideSteppers,
		iconDescription,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		label,
		hideLabel,
		id,
		name,
		ariaLabel,
		errorId,
		error,
		decrementLabel,
		incrementLabel,
		updateValue,
		onInput,
		onChange,
		$$slots,
		$$restProps,
		allowEmpty,
		translateWithId,
		translationIds,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		input_binding,
		click_handler_1,
		click_handler_2
	];
}

class NumberInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1t,
			create_fragment$1t,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				step: 3,
				max: 4,
				min: 5,
				light: 6,
				readonly: 7,
				allowEmpty: 30,
				disabled: 8,
				hideSteppers: 9,
				iconDescription: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				helperText: 15,
				label: 16,
				hideLabel: 17,
				translateWithId: 31,
				translationIds: 32,
				id: 18,
				name: 19,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}

	get translationIds() {
		return this.$$.ctx[32];
	}
}

var NumberInput$1 = NumberInput;

/* src/NumberInput/NumberInputSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block$J(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$1s(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$J();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--number", true);
			toggle_class(div0, "bx--skeleton", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$J();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1s($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class NumberInputSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1s, create_fragment$1s, safe_not_equal, { hideLabel: 0 });
	}
}

var NumberInputSkeleton$1 = NumberInputSkeleton;

/* src/OrderedList/OrderedList.svelte generated by Svelte v3.49.0 */

function create_fragment$1r(ctx) {
	let ol;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let ol_levels = [/*$$restProps*/ ctx[3]];
	let ol_data = {};

	for (let i = 0; i < ol_levels.length; i += 1) {
		ol_data = assign(ol_data, ol_levels[i]);
	}

	return {
		c() {
			ol = element("ol");
			if (default_slot) default_slot.c();
			set_attributes(ol, ol_data);
			toggle_class(ol, "bx--list--ordered", !/*native*/ ctx[1]);
			toggle_class(ol, "bx--list--ordered--native", /*native*/ ctx[1]);
			toggle_class(ol, "bx--list--nested", /*nested*/ ctx[0]);
			toggle_class(ol, "bx--list--expressive", /*expressive*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, ol, anchor);

			if (default_slot) {
				default_slot.m(ol, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ol, "click", /*click_handler*/ ctx[6]),
					listen(ol, "mouseover", /*mouseover_handler*/ ctx[7]),
					listen(ol, "mouseenter", /*mouseenter_handler*/ ctx[8]),
					listen(ol, "mouseleave", /*mouseleave_handler*/ ctx[9])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(ol, ol_data = get_spread_update(ol_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(ol, "bx--list--ordered", !/*native*/ ctx[1]);
			toggle_class(ol, "bx--list--ordered--native", /*native*/ ctx[1]);
			toggle_class(ol, "bx--list--nested", /*nested*/ ctx[0]);
			toggle_class(ol, "bx--list--expressive", /*expressive*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ol);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1r($$self, $$props, $$invalidate) {
	const omit_props_names = ["nested","native","expressive"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { nested = false } = $$props;
	let { native = false } = $$props;
	let { expressive = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('nested' in $$new_props) $$invalidate(0, nested = $$new_props.nested);
		if ('native' in $$new_props) $$invalidate(1, native = $$new_props.native);
		if ('expressive' in $$new_props) $$invalidate(2, expressive = $$new_props.expressive);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		nested,
		native,
		expressive,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class OrderedList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1r, create_fragment$1r, safe_not_equal, { nested: 0, native: 1, expressive: 2 });
	}
}

var OrderedList$1 = OrderedList;

/* src/icons/CaretLeft.svelte generated by Svelte v3.49.0 */

function create_if_block$I(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1q(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$I(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M20 24L10 16 20 8z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$I(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1q($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CaretLeft extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1q, create_fragment$1q, safe_not_equal, { size: 0, title: 1 });
	}
}

var CaretLeft$1 = CaretLeft;

/* src/Select/Select.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$a = dirty => ({});
const get_labelText_slot_context$a = ctx => ({});

// (136:4) {#if !noLabel}
function create_if_block_10$2(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context$a);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$q(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[5]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes$a),
						get_labelText_slot_context$a
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 8192)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr(label, "for", /*id*/ ctx[5]);
			}

			if (dirty[0] & /*hideLabel*/ 16384) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[14]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (143:31)            
function fallback_block$q(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 8192) set_data(t, /*labelText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (148:4) {#if inline}
function create_if_block_6$2(ctx) {
	let div1;
	let div0;
	let select;
	let select_aria_describedby_value;
	let select_aria_invalid_value;
	let select_disabled_value;
	let select_required_value;
	let t0;
	let chevrondown;
	let t1;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let if_block2_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[26].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);
	chevrondown = new ChevronDown$1({ props: { class: "bx--select__arrow" } });
	let if_block0 = /*invalid*/ ctx[7] && create_if_block_9$2();
	let if_block1 = /*invalid*/ ctx[7] && create_if_block_8$2(ctx);
	let if_block2 = /*helperText*/ ctx[11] && create_if_block_7$2(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			attr(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined);
			attr(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			select.required = select_required_value = /*required*/ ctx[15] || undefined;
			attr(select, "id", /*id*/ ctx[5]);
			attr(select, "name", /*name*/ ctx[6]);
			toggle_class(select, "bx--select-input", true);
			toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div0, "bx--select-input__wrapper", true);
			toggle_class(div1, "bx--select-input--inline__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding*/ ctx[33](select);
			append(div0, t0);
			mount_component(chevrondown, div0, null);
			append(div0, t1);
			if (if_block0) if_block0.m(div0, null);
			append(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			insert(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*handleChange*/ ctx[21]),
					listen(select, "input", /*input_handler*/ ctx[30]),
					listen(select, "focus", /*focus_handler*/ ctx[31]),
					listen(select, "blur", /*blur_handler*/ ctx[32])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*invalid, errorId*/ 65664 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined)) {
				attr(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty[0] & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(select, "aria-invalid", select_aria_invalid_value);
			}

			if (!current || dirty[0] & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				select.disabled = select_disabled_value;
			}

			if (!current || dirty[0] & /*required*/ 32768 && select_required_value !== (select_required_value = /*required*/ ctx[15] || undefined)) {
				select.required = select_required_value;
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty[0] & /*name*/ 64) {
				attr(select, "name", /*name*/ ctx[6]);
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 128 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8$2(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_7$2(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[33](null);
			destroy_component(chevrondown);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (173:10) {#if invalid}
function create_if_block_9$2(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--select__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (177:8) {#if invalid}
function create_if_block_8$2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 256) set_data(t, /*invalidText*/ ctx[8]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (183:6) {#if helperText}
function create_if_block_7$2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (192:4) {#if !inline}
function create_if_block$H(ctx) {
	let div;
	let select;
	let select_aria_describedby_value;
	let select_disabled_value;
	let select_required_value;
	let select_aria_invalid_value;
	let t0;
	let chevrondown;
	let t1;
	let t2;
	let div_data_invalid_value;
	let t3;
	let t4;
	let t5;
	let if_block4_anchor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[26].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);
	chevrondown = new ChevronDown$1({ props: { class: "bx--select__arrow" } });
	let if_block0 = /*invalid*/ ctx[7] && create_if_block_5$2();
	let if_block1 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_4$4();
	let if_block2 = !/*invalid*/ ctx[7] && /*helperText*/ ctx[11] && create_if_block_3$7(ctx);
	let if_block3 = /*invalid*/ ctx[7] && create_if_block_2$a(ctx);
	let if_block4 = !/*invalid*/ ctx[7] && /*warn*/ ctx[9] && create_if_block_1$g(ctx);

	return {
		c() {
			div = element("div");
			select = element("select");
			if (default_slot) default_slot.c();
			t0 = space();
			create_component(chevrondown.$$.fragment);
			t1 = space();
			if (if_block0) if_block0.c();
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (if_block2) if_block2.c();
			t4 = space();
			if (if_block3) if_block3.c();
			t5 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			attr(select, "id", /*id*/ ctx[5]);
			attr(select, "name", /*name*/ ctx[6]);
			attr(select, "aria-describedby", select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined);
			select.disabled = select_disabled_value = /*disabled*/ ctx[4] || undefined;
			select.required = select_required_value = /*required*/ ctx[15] || undefined;
			attr(select, "aria-invalid", select_aria_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(select, "bx--select-input", true);
			toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			attr(div, "data-invalid", div_data_invalid_value = /*invalid*/ ctx[7] || undefined);
			toggle_class(div, "bx--select-input__wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			/*select_binding_1*/ ctx[34](select);
			append(div, t0);
			mount_component(chevrondown, div, null);
			append(div, t1);
			if (if_block0) if_block0.m(div, null);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			insert(target, t3, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t4, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert(target, t5, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert(target, if_block4_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*handleChange*/ ctx[21]),
					listen(select, "input", /*input_handler_1*/ ctx[27]),
					listen(select, "focus", /*focus_handler_1*/ ctx[28]),
					listen(select, "blur", /*blur_handler_1*/ ctx[29])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*id*/ 32) {
				attr(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty[0] & /*name*/ 64) {
				attr(select, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty[0] & /*invalid, errorId*/ 65664 && select_aria_describedby_value !== (select_aria_describedby_value = /*invalid*/ ctx[7] ? /*errorId*/ ctx[16] : undefined)) {
				attr(select, "aria-describedby", select_aria_describedby_value);
			}

			if (!current || dirty[0] & /*disabled*/ 16 && select_disabled_value !== (select_disabled_value = /*disabled*/ ctx[4] || undefined)) {
				select.disabled = select_disabled_value;
			}

			if (!current || dirty[0] & /*required*/ 32768 && select_required_value !== (select_required_value = /*required*/ ctx[15] || undefined)) {
				select.required = select_required_value;
			}

			if (!current || dirty[0] & /*invalid*/ 128 && select_aria_invalid_value !== (select_aria_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(select, "aria-invalid", select_aria_invalid_value);
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--sm", /*size*/ ctx[1] === 'sm');
			}

			if (dirty[0] & /*size*/ 2) {
				toggle_class(select, "bx--select-input--xl", /*size*/ ctx[1] === 'xl');
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block0) {
					if (dirty[0] & /*invalid*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_5$2();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t2);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block1) {
					if (dirty[0] & /*invalid, warn*/ 640) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$4();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 128 && div_data_invalid_value !== (div_data_invalid_value = /*invalid*/ ctx[7] || undefined)) {
				attr(div, "data-invalid", div_data_invalid_value);
			}

			if (!/*invalid*/ ctx[7] && /*helperText*/ ctx[11]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$7(ctx);
					if_block2.c();
					if_block2.m(t4.parentNode, t4);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[7]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2$a(ctx);
					if_block3.c();
					if_block3.m(t5.parentNode, t5);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (!/*invalid*/ ctx[7] && /*warn*/ ctx[9]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1$g(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*select_binding_1*/ ctx[34](null);
			destroy_component(chevrondown);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach(t3);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t4);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach(t5);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach(if_block4_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (216:8) {#if invalid}
function create_if_block_5$2(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--select__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (219:8) {#if !invalid && warn}
function create_if_block_4$4(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--select__invalid-icon bx--select__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (225:6) {#if !invalid && helperText}
function create_if_block_3$7(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[4]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (233:6) {#if invalid}
function create_if_block_2$a(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[8]);
			attr(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 256) set_data(t, /*invalidText*/ ctx[8]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (238:6) {#if !invalid && warn}
function create_if_block_1$g(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[10]);
			attr(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 1024) set_data(t, /*warnText*/ ctx[10]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1p(ctx) {
	let div1;
	let div0;
	let t0;
	let t1;
	let current;
	let if_block0 = !/*noLabel*/ ctx[12] && create_if_block_10$2(ctx);
	let if_block1 = /*inline*/ ctx[2] && create_if_block_6$2(ctx);
	let if_block2 = !/*inline*/ ctx[2] && create_if_block$H(ctx);
	let div1_levels = [/*$$restProps*/ ctx[22]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			toggle_class(div0, "bx--select", true);
			toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			if (if_block2) if_block2.m(div0, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!/*noLabel*/ ctx[12]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*noLabel*/ 4096) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*inline*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 4) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_6$2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 4) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$H(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*inline*/ 4) {
				toggle_class(div0, "bx--select--inline", /*inline*/ ctx[2]);
			}

			if (dirty[0] & /*light*/ 8) {
				toggle_class(div0, "bx--select--light", /*light*/ ctx[3]);
			}

			if (dirty[0] & /*invalid*/ 128) {
				toggle_class(div0, "bx--select--invalid", /*invalid*/ ctx[7]);
			}

			if (dirty[0] & /*disabled*/ 16) {
				toggle_class(div0, "bx--select--disabled", /*disabled*/ ctx[4]);
			}

			if (dirty[0] & /*warn*/ 512) {
				toggle_class(div0, "bx--select--warning", /*warn*/ ctx[9]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] & /*$$restProps*/ 4194304 && /*$$restProps*/ ctx[22]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

function instance$1p($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"selected","size","inline","light","disabled","id","name","invalid","invalidText","warn","warnText","helperText","noLabel","labelText","hideLabel","ref","required"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $defaultValue;
	let $selectedValue;
	let $itemTypesByValue;
	let $defaultSelectId;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { size = undefined } = $$props;
	let { inline = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { helperText = "" } = $$props;
	let { noLabel = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(36, $selectedValue = value));
	const defaultSelectId = writable(null);
	component_subscribe($$self, defaultSelectId, value => $$invalidate(38, $defaultSelectId = value));
	const defaultValue = writable(null);
	component_subscribe($$self, defaultValue, value => $$invalidate(24, $defaultValue = value));
	const itemTypesByValue = writable({});
	component_subscribe($$self, itemTypesByValue, value => $$invalidate(37, $itemTypesByValue = value));

	setContext("Select", {
		selectedValue,
		setDefaultValue: (id, value) => {
			/**
 * Use the first `SelectItem` value as the
 * default value if `selected` is `undefined`.
 */
			if ($defaultValue === null) {
				defaultSelectId.set(id);
				defaultValue.set(value);
			} else {
				if ($defaultSelectId === id) {
					selectedValue.set(value);
				}
			}

			itemTypesByValue.update(types => ({ ...types, [value]: typeof value }));
		}
	});

	const handleChange = ({ target }) => {
		let value = target.value;

		if ($itemTypesByValue[value] === "number") {
			value = Number(value);
		}

		selectedValue.set(value);
	};

	let prevSelected = undefined;

	afterUpdate(() => {
		$$invalidate(23, selected = $selectedValue);

		if (prevSelected !== undefined && selected !== prevSelected) {
			dispatch("change", $selectedValue);
		}

		prevSelected = selected;
	});

	function input_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	function select_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(22, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(23, selected = $$new_props.selected);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('inline' in $$new_props) $$invalidate(2, inline = $$new_props.inline);
		if ('light' in $$new_props) $$invalidate(3, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ('invalid' in $$new_props) $$invalidate(7, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(8, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(9, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(10, warnText = $$new_props.warnText);
		if ('helperText' in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ('noLabel' in $$new_props) $$invalidate(12, noLabel = $$new_props.noLabel);
		if ('labelText' in $$new_props) $$invalidate(13, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(14, hideLabel = $$new_props.hideLabel);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('required' in $$new_props) $$invalidate(15, required = $$new_props.required);
		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 32) {
			$$invalidate(16, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*selected, $defaultValue*/ 25165824) {
			selectedValue.set(selected ?? $defaultValue);
		}
	};

	return [
		ref,
		size,
		inline,
		light,
		disabled,
		id,
		name,
		invalid,
		invalidText,
		warn,
		warnText,
		helperText,
		noLabel,
		labelText,
		hideLabel,
		required,
		errorId,
		selectedValue,
		defaultSelectId,
		defaultValue,
		itemTypesByValue,
		handleChange,
		$$restProps,
		selected,
		$defaultValue,
		$$scope,
		slots,
		input_handler_1,
		focus_handler_1,
		blur_handler_1,
		input_handler,
		focus_handler,
		blur_handler,
		select_binding,
		select_binding_1
	];
}

class Select extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1p,
			create_fragment$1p,
			safe_not_equal,
			{
				selected: 23,
				size: 1,
				inline: 2,
				light: 3,
				disabled: 4,
				id: 5,
				name: 6,
				invalid: 7,
				invalidText: 8,
				warn: 9,
				warnText: 10,
				helperText: 11,
				noLabel: 12,
				labelText: 13,
				hideLabel: 14,
				ref: 0,
				required: 15
			},
			null,
			[-1, -1]
		);
	}
}

var Select$1 = Select;

/* src/Select/SelectItem.svelte generated by Svelte v3.49.0 */

function create_fragment$1o(ctx) {
	let option;
	let t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "";
	let t;
	let option_class_value;
	let option_style_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = /*value*/ ctx[0];
			option.value = option.__value;
			option.disabled = /*disabled*/ ctx[3];
			option.hidden = /*hidden*/ ctx[2];
			option.selected = /*selected*/ ctx[4];
			attr(option, "class", option_class_value = /*$$restProps*/ ctx[5].class);
			attr(option, "style", option_style_value = /*$$restProps*/ ctx[5].style);
			toggle_class(option, "bx--select-option", true);
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, [dirty]) {
			if (dirty & /*text, value*/ 3 && t_value !== (t_value = (/*text*/ ctx[1] || /*value*/ ctx[0]) + "")) set_data(t, t_value);

			if (dirty & /*value*/ 1) {
				option.__value = /*value*/ ctx[0];
				option.value = option.__value;
			}

			if (dirty & /*disabled*/ 8) {
				option.disabled = /*disabled*/ ctx[3];
			}

			if (dirty & /*hidden*/ 4) {
				option.hidden = /*hidden*/ ctx[2];
			}

			if (dirty & /*selected*/ 16) {
				option.selected = /*selected*/ ctx[4];
			}

			if (dirty & /*$$restProps*/ 32 && option_class_value !== (option_class_value = /*$$restProps*/ ctx[5].class)) {
				attr(option, "class", option_class_value);
			}

			if (dirty & /*$$restProps*/ 32 && option_style_value !== (option_style_value = /*$$restProps*/ ctx[5].style)) {
				attr(option, "style", option_style_value);
			}

			if (dirty & /*$$restProps*/ 32) {
				toggle_class(option, "bx--select-option", true);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function instance$1o($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","text","hidden","disabled"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { value = "" } = $$props;
	let { text = "" } = $$props;
	let { hidden = false } = $$props;
	let { disabled = false } = $$props;
	const id = "ccs-" + Math.random().toString(36);
	const ctx = getContext("Select") || getContext("TimePickerSelect");
	let selected = false;

	const unsubscribe = ctx.selectedValue.subscribe(currentValue => {
		$$invalidate(4, selected = currentValue === value);
	});

	onMount(() => {
		return () => unsubscribe();
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
		if ('hidden' in $$new_props) $$invalidate(2, hidden = $$new_props.hidden);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			ctx?.setDefaultValue?.(id, value);
		}
	};

	return [value, text, hidden, disabled, selected, $$restProps];
}

class SelectItem extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1o, create_fragment$1o, safe_not_equal, {
			value: 0,
			text: 1,
			hidden: 2,
			disabled: 3
		});
	}
}

var SelectItem$1 = SelectItem;

/* src/Pagination/Pagination.svelte generated by Svelte v3.49.0 */

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

// (98:4) {#if !pageSizeInputDisabled}
function create_if_block_3$6(ctx) {
	let label;
	let t0;
	let label_id_value;
	let label_for_value;
	let t1;
	let select;
	let updating_selected;
	let current;

	function select_selected_binding(value) {
		/*select_selected_binding*/ ctx[22](value);
	}

	let select_props = {
		id: "bx--pagination-select-" + /*id*/ ctx[14],
		class: "bx--select__item-count",
		hideLabel: true,
		noLabel: true,
		inline: true,
		$$slots: { default: [create_default_slot_1$2] },
		$$scope: { ctx }
	};

	if (/*pageSize*/ ctx[1] !== void 0) {
		select_props.selected = /*pageSize*/ ctx[1];
	}

	select = new Select$1({ props: select_props });
	binding_callbacks.push(() => bind(select, 'selected', select_selected_binding));

	return {
		c() {
			label = element("label");
			t0 = text(/*itemsPerPageText*/ ctx[5]);
			t1 = space();
			create_component(select.$$.fragment);
			attr(label, "id", label_id_value = "bx--pagination-select-" + /*id*/ ctx[14] + "-count-label");
			attr(label, "for", label_for_value = "bx--pagination-select-" + /*id*/ ctx[14]);
			toggle_class(label, "bx--pagination__text", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, t0);
			insert(target, t1, anchor);
			mount_component(select, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*itemsPerPageText*/ 32) set_data(t0, /*itemsPerPageText*/ ctx[5]);

			if (!current || dirty & /*id*/ 16384 && label_id_value !== (label_id_value = "bx--pagination-select-" + /*id*/ ctx[14] + "-count-label")) {
				attr(label, "id", label_id_value);
			}

			if (!current || dirty & /*id*/ 16384 && label_for_value !== (label_for_value = "bx--pagination-select-" + /*id*/ ctx[14])) {
				attr(label, "for", label_for_value);
			}

			const select_changes = {};
			if (dirty & /*id*/ 16384) select_changes.id = "bx--pagination-select-" + /*id*/ ctx[14];

			if (dirty & /*$$scope, pageSizes*/ 1073742848) {
				select_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*pageSize*/ 2) {
				updating_selected = true;
				select_changes.selected = /*pageSize*/ ctx[1];
				add_flush_callback(() => updating_selected = false);
			}

			select.$set(select_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (detaching) detach(t1);
			destroy_component(select, detaching);
		}
	};
}

// (114:8) {#each pageSizes as size, i (size)}
function create_each_block_1$1(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem$1({
			props: {
				value: /*size*/ ctx[26],
				text: /*size*/ ctx[26].toString()
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*pageSizes*/ 1024) selectitem_changes.value = /*size*/ ctx[26];
			if (dirty & /*pageSizes*/ 1024) selectitem_changes.text = /*size*/ ctx[26].toString();
			selectitem.$set(selectitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(selectitem, detaching);
		}
	};
}

// (106:6) <Select         id="bx--pagination-select-{id}"         class="bx--select__item-count"         hideLabel         noLabel         inline         bind:selected="{pageSize}"       >
function create_default_slot_1$2(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value_1 = /*pageSizes*/ ctx[10];
	const get_key = ctx => /*size*/ ctx[26];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$1(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*pageSizes*/ 1024) {
				each_value_1 = /*pageSizes*/ ctx[10];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block_1$1, each_1_anchor, get_each_context_1$1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (122:6) {:else}
function create_else_block_1$2(ctx) {
	let t_value = /*itemRangeText*/ ctx[7](Math.min(/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*totalItems*/ ctx[2]), Math.min(/*page*/ ctx[0] * /*pageSize*/ ctx[1], /*totalItems*/ ctx[2]), /*totalItems*/ ctx[2]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*itemRangeText, pageSize, page, totalItems*/ 135 && t_value !== (t_value = /*itemRangeText*/ ctx[7](Math.min(/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*totalItems*/ ctx[2]), Math.min(/*page*/ ctx[0] * /*pageSize*/ ctx[1], /*totalItems*/ ctx[2]), /*totalItems*/ ctx[2]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (120:6) {#if pagesUnknown}
function create_if_block_2$9(ctx) {
	let t_value = /*itemText*/ ctx[6](/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*page*/ ctx[0] * /*pageSize*/ ctx[1]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*itemText, pageSize, page*/ 67 && t_value !== (t_value = /*itemText*/ ctx[6](/*pageSize*/ ctx[1] * (/*page*/ ctx[0] - 1) + 1, /*page*/ ctx[0] * /*pageSize*/ ctx[1]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (132:4) {#if !pageInputDisabled}
function create_if_block$G(ctx) {
	let select;
	let updating_selected;
	let t;
	let span;
	let current;

	function select_selected_binding_1(value) {
		/*select_selected_binding_1*/ ctx[23](value);
	}

	let select_props = {
		id: "bx--pagination-select-" + (/*id*/ ctx[14] + 2),
		class: "bx--select__page-number",
		labelText: "Page number, of " + /*totalPages*/ ctx[15] + " pages",
		inline: true,
		hideLabel: true,
		$$slots: { default: [create_default_slot$6] },
		$$scope: { ctx }
	};

	if (/*page*/ ctx[0] !== void 0) {
		select_props.selected = /*page*/ ctx[0];
	}

	select = new Select$1({ props: select_props });
	binding_callbacks.push(() => bind(select, 'selected', select_selected_binding_1));

	function select_block_type_1(ctx, dirty) {
		if (/*pagesUnknown*/ ctx[11]) return create_if_block_1$f;
		return create_else_block$8;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			create_component(select.$$.fragment);
			t = space();
			span = element("span");
			if_block.c();
			toggle_class(span, "bx--pagination__text", true);
		},
		m(target, anchor) {
			mount_component(select, target, anchor);
			insert(target, t, anchor);
			insert(target, span, anchor);
			if_block.m(span, null);
			current = true;
		},
		p(ctx, dirty) {
			const select_changes = {};
			if (dirty & /*id*/ 16384) select_changes.id = "bx--pagination-select-" + (/*id*/ ctx[14] + 2);
			if (dirty & /*totalPages*/ 32768) select_changes.labelText = "Page number, of " + /*totalPages*/ ctx[15] + " pages";

			if (dirty & /*$$scope, selectItems*/ 1074003968) {
				select_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*page*/ 1) {
				updating_selected = true;
				select_changes.selected = /*page*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			select.$set(select_changes);

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(select, detaching);
			if (detaching) detach(t);
			if (detaching) detach(span);
			if_block.d();
		}
	};
}

// (141:8) {#each selectItems as size, i (size)}
function create_each_block$9(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem$1({
			props: {
				value: /*size*/ ctx[26] + 1,
				text: (/*size*/ ctx[26] + 1).toString()
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*selectItems*/ 262144) selectitem_changes.value = /*size*/ ctx[26] + 1;
			if (dirty & /*selectItems*/ 262144) selectitem_changes.text = (/*size*/ ctx[26] + 1).toString();
			selectitem.$set(selectitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(selectitem, detaching);
		}
	};
}

// (133:6) <Select         id="bx--pagination-select-{id + 2}"         class="bx--select__page-number"         labelText="Page number, of {totalPages} pages"         inline         hideLabel         bind:selected="{page}"       >
function create_default_slot$6(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*selectItems*/ ctx[18];
	const get_key = ctx => /*size*/ ctx[26];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$9(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$9(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*selectItems*/ 262144) {
				each_value = /*selectItems*/ ctx[18];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$9, each_1_anchor, get_each_context$9);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (148:8) {:else}
function create_else_block$8(ctx) {
	let t_value = /*pageRangeText*/ ctx[13](/*page*/ ctx[0], /*totalPages*/ ctx[15]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pageRangeText, page, totalPages*/ 40961 && t_value !== (t_value = /*pageRangeText*/ ctx[13](/*page*/ ctx[0], /*totalPages*/ ctx[15]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (146:8) {#if pagesUnknown}
function create_if_block_1$f(ctx) {
	let t_value = /*pageText*/ ctx[12](/*page*/ ctx[0]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pageText, page*/ 4097 && t_value !== (t_value = /*pageText*/ ctx[12](/*page*/ ctx[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1n(ctx) {
	let div2;
	let div0;
	let t0;
	let span;
	let t1;
	let div1;
	let t2;
	let button0;
	let t3;
	let button1;
	let current;
	let if_block0 = !/*pageSizeInputDisabled*/ ctx[9] && create_if_block_3$6(ctx);

	function select_block_type(ctx, dirty) {
		if (/*pagesUnknown*/ ctx[11]) return create_if_block_2$9;
		return create_else_block_1$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = !/*pageInputDisabled*/ ctx[8] && create_if_block$G(ctx);

	button0 = new Button$1({
			props: {
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "top",
				icon: CaretLeft$1,
				iconDescription: /*backwardText*/ ctx[4],
				disabled: /*backButtonDisabled*/ ctx[17],
				class: "bx--pagination__button bx--pagination__button--backward " + (/*backButtonDisabled*/ ctx[17]
				? 'bx--pagination__button--no-index'
				: '')
			}
		});

	button0.$on("click", /*click_handler*/ ctx[24]);

	button1 = new Button$1({
			props: {
				kind: "ghost",
				tooltipAlignment: "end",
				tooltipPosition: "top",
				icon: CaretRight$1,
				iconDescription: /*forwardText*/ ctx[3],
				disabled: /*forwardButtonDisabled*/ ctx[16],
				class: "bx--pagination__button bx--pagination__button--forward " + (/*forwardButtonDisabled*/ ctx[16]
				? 'bx--pagination__button--no-index'
				: '')
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[25]);
	let div2_levels = [{ id: /*id*/ ctx[14] }, /*$$restProps*/ ctx[20]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			span = element("span");
			if_block1.c();
			t1 = space();
			div1 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			create_component(button0.$$.fragment);
			t3 = space();
			create_component(button1.$$.fragment);
			toggle_class(span, "bx--pagination__text", !/*pageSizeInputDisabled*/ ctx[9]);
			toggle_class(div0, "bx--pagination__left", true);
			toggle_class(div1, "bx--pagination__right", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--pagination", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			append(div0, span);
			if_block1.m(span, null);
			append(div2, t1);
			append(div2, div1);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t2);
			mount_component(button0, div1, null);
			append(div1, t3);
			mount_component(button1, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!/*pageSizeInputDisabled*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*pageSizeInputDisabled*/ 512) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$6(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(span, null);
				}
			}

			if (dirty & /*pageSizeInputDisabled*/ 512) {
				toggle_class(span, "bx--pagination__text", !/*pageSizeInputDisabled*/ ctx[9]);
			}

			if (!/*pageInputDisabled*/ ctx[8]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*pageInputDisabled*/ 256) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block$G(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div1, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			const button0_changes = {};
			if (dirty & /*backwardText*/ 16) button0_changes.iconDescription = /*backwardText*/ ctx[4];
			if (dirty & /*backButtonDisabled*/ 131072) button0_changes.disabled = /*backButtonDisabled*/ ctx[17];

			if (dirty & /*backButtonDisabled*/ 131072) button0_changes.class = "bx--pagination__button bx--pagination__button--backward " + (/*backButtonDisabled*/ ctx[17]
			? 'bx--pagination__button--no-index'
			: '');

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*forwardText*/ 8) button1_changes.iconDescription = /*forwardText*/ ctx[3];
			if (dirty & /*forwardButtonDisabled*/ 65536) button1_changes.disabled = /*forwardButtonDisabled*/ ctx[16];

			if (dirty & /*forwardButtonDisabled*/ 65536) button1_changes.class = "bx--pagination__button bx--pagination__button--forward " + (/*forwardButtonDisabled*/ ctx[16]
			? 'bx--pagination__button--no-index'
			: '');

			button1.$set(button1_changes);

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [
				(!current || dirty & /*id*/ 16384) && { id: /*id*/ ctx[14] },
				dirty & /*$$restProps*/ 1048576 && /*$$restProps*/ ctx[20]
			]));

			toggle_class(div2, "bx--pagination", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block2);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block2);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

function instance$1n($$self, $$props, $$invalidate) {
	let totalPages;
	let selectItems;
	let backButtonDisabled;
	let forwardButtonDisabled;

	const omit_props_names = [
		"page","totalItems","disabled","forwardText","backwardText","itemsPerPageText","itemText","itemRangeText","pageInputDisabled","pageSizeInputDisabled","pageSize","pageSizes","pagesUnknown","pageText","pageRangeText","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { page = 1 } = $$props;
	let { totalItems = 0 } = $$props;
	let { disabled = false } = $$props;
	let { forwardText = "Next page" } = $$props;
	let { backwardText = "Previous page" } = $$props;
	let { itemsPerPageText = "Items per page:" } = $$props;
	let { itemText = (min, max) => `${min}–${max} item${max === 1 ? "" : "s"}` } = $$props;
	let { itemRangeText = (min, max, total) => `${min}–${max} of ${total} item${max === 1 ? "" : "s"}` } = $$props;
	let { pageInputDisabled = false } = $$props;
	let { pageSizeInputDisabled = false } = $$props;
	let { pageSize = 10 } = $$props;
	let { pageSizes = [10] } = $$props;
	let { pagesUnknown = false } = $$props;
	let { pageText = page => `page ${page}` } = $$props;
	let { pageRangeText = (current, total) => `of ${total} page${total === 1 ? "" : "s"}` } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const dispatch = createEventDispatcher();

	afterUpdate(() => {
		if (page > totalPages) {
			$$invalidate(0, page = totalPages);
		}
	});

	function select_selected_binding(value) {
		pageSize = value;
		$$invalidate(1, pageSize);
	}

	function select_selected_binding_1(value) {
		page = value;
		$$invalidate(0, page);
	}

	const click_handler = () => {
		$$invalidate(0, page--, page);
		dispatch('click:button--previous', { page });
	};

	const click_handler_1 = () => {
		$$invalidate(0, page++, page);
		dispatch('click:button--next', { page });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(20, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('page' in $$new_props) $$invalidate(0, page = $$new_props.page);
		if ('totalItems' in $$new_props) $$invalidate(2, totalItems = $$new_props.totalItems);
		if ('disabled' in $$new_props) $$invalidate(21, disabled = $$new_props.disabled);
		if ('forwardText' in $$new_props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ('backwardText' in $$new_props) $$invalidate(4, backwardText = $$new_props.backwardText);
		if ('itemsPerPageText' in $$new_props) $$invalidate(5, itemsPerPageText = $$new_props.itemsPerPageText);
		if ('itemText' in $$new_props) $$invalidate(6, itemText = $$new_props.itemText);
		if ('itemRangeText' in $$new_props) $$invalidate(7, itemRangeText = $$new_props.itemRangeText);
		if ('pageInputDisabled' in $$new_props) $$invalidate(8, pageInputDisabled = $$new_props.pageInputDisabled);
		if ('pageSizeInputDisabled' in $$new_props) $$invalidate(9, pageSizeInputDisabled = $$new_props.pageSizeInputDisabled);
		if ('pageSize' in $$new_props) $$invalidate(1, pageSize = $$new_props.pageSize);
		if ('pageSizes' in $$new_props) $$invalidate(10, pageSizes = $$new_props.pageSizes);
		if ('pagesUnknown' in $$new_props) $$invalidate(11, pagesUnknown = $$new_props.pagesUnknown);
		if ('pageText' in $$new_props) $$invalidate(12, pageText = $$new_props.pageText);
		if ('pageRangeText' in $$new_props) $$invalidate(13, pageRangeText = $$new_props.pageRangeText);
		if ('id' in $$new_props) $$invalidate(14, id = $$new_props.id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*pageSize, page*/ 3) {
			dispatch("update", { pageSize, page });
		}

		if ($$self.$$.dirty & /*totalItems, pageSize*/ 6) {
			$$invalidate(15, totalPages = Math.max(Math.ceil(totalItems / pageSize), 1));
		}

		if ($$self.$$.dirty & /*totalPages*/ 32768) {
			$$invalidate(18, selectItems = Array.from({ length: totalPages }, (_, i) => i));
		}

		if ($$self.$$.dirty & /*disabled, page*/ 2097153) {
			$$invalidate(17, backButtonDisabled = disabled || page === 1);
		}

		if ($$self.$$.dirty & /*disabled, page, totalPages*/ 2129921) {
			$$invalidate(16, forwardButtonDisabled = disabled || page === totalPages);
		}
	};

	return [
		page,
		pageSize,
		totalItems,
		forwardText,
		backwardText,
		itemsPerPageText,
		itemText,
		itemRangeText,
		pageInputDisabled,
		pageSizeInputDisabled,
		pageSizes,
		pagesUnknown,
		pageText,
		pageRangeText,
		id,
		totalPages,
		forwardButtonDisabled,
		backButtonDisabled,
		selectItems,
		dispatch,
		$$restProps,
		disabled,
		select_selected_binding,
		select_selected_binding_1,
		click_handler,
		click_handler_1
	];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1n, create_fragment$1n, safe_not_equal, {
			page: 0,
			totalItems: 2,
			disabled: 21,
			forwardText: 3,
			backwardText: 4,
			itemsPerPageText: 5,
			itemText: 6,
			itemRangeText: 7,
			pageInputDisabled: 8,
			pageSizeInputDisabled: 9,
			pageSize: 1,
			pageSizes: 10,
			pagesUnknown: 11,
			pageText: 12,
			pageRangeText: 13,
			id: 14
		});
	}
}

var Pagination$1 = Pagination;

/* src/Pagination/PaginationSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$1m(ctx) {
	let div2;
	let div0;
	let skeletontext0;
	let t0;
	let skeletontext1;
	let t1;
	let skeletontext2;
	let t2;
	let div1;
	let skeletontext3;
	let current;
	let mounted;
	let dispose;
	skeletontext0 = new SkeletonText$1({ props: { width: "70px" } });
	skeletontext1 = new SkeletonText$1({ props: { width: "35px" } });
	skeletontext2 = new SkeletonText$1({ props: { width: "105px" } });
	skeletontext3 = new SkeletonText$1({ props: { width: "70px" } });
	let div2_levels = [/*$$restProps*/ ctx[0]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			create_component(skeletontext0.$$.fragment);
			t0 = space();
			create_component(skeletontext1.$$.fragment);
			t1 = space();
			create_component(skeletontext2.$$.fragment);
			t2 = space();
			div1 = element("div");
			create_component(skeletontext3.$$.fragment);
			toggle_class(div0, "bx--pagination__left", true);
			toggle_class(div1, "bx--pagination__right", true);
			toggle_class(div1, "bx--pagination--inline", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--pagination", true);
			toggle_class(div2, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			mount_component(skeletontext0, div0, null);
			append(div0, t0);
			mount_component(skeletontext1, div0, null);
			append(div0, t1);
			mount_component(skeletontext2, div0, null);
			append(div2, t2);
			append(div2, div1);
			mount_component(skeletontext3, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler*/ ctx[1]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div2, "bx--pagination", true);
			toggle_class(div2, "bx--skeleton", true);
		},
		i(local) {
			if (current) return;
			transition_in(skeletontext0.$$.fragment, local);
			transition_in(skeletontext1.$$.fragment, local);
			transition_in(skeletontext2.$$.fragment, local);
			transition_in(skeletontext3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(skeletontext0.$$.fragment, local);
			transition_out(skeletontext1.$$.fragment, local);
			transition_out(skeletontext2.$$.fragment, local);
			transition_out(skeletontext3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(skeletontext0);
			destroy_component(skeletontext1);
			destroy_component(skeletontext2);
			destroy_component(skeletontext3);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1m($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class PaginationSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1m, create_fragment$1m, safe_not_equal, {});
	}
}

var PaginationSkeleton$1 = PaginationSkeleton;

/* src/PaginationNav/PaginationItem.svelte generated by Svelte v3.49.0 */

function create_fragment$1l(ctx) {
	let li;
	let button;
	let span;
	let t0;
	let t1;
	let button_aria_current_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			li = element("li");
			button = element("button");
			span = element("span");
			if (default_slot) default_slot.c();
			t0 = space();
			t1 = text(/*page*/ ctx[0]);
			toggle_class(span, "bx--pagination-nav__accessibility-label", true);
			attr(button, "data-page", /*page*/ ctx[0]);
			attr(button, "aria-current", button_aria_current_value = /*active*/ ctx[1] ? 'page' : undefined);
			toggle_class(button, "bx--pagination-nav__page", true);
			toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			toggle_class(li, "bx--pagination-nav__list-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			append(button, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			append(button, t0);
			append(button, t1);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*page*/ 1) set_data(t1, /*page*/ ctx[0]);

			if (!current || dirty & /*page*/ 1) {
				attr(button, "data-page", /*page*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 2 && button_aria_current_value !== (button_aria_current_value = /*active*/ ctx[1] ? 'page' : undefined)) {
				attr(button, "aria-current", button_aria_current_value);
			}

			if (dirty & /*active*/ 2) {
				toggle_class(button, "bx--pagination-nav__page--active", /*active*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$1l($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { page = 0 } = $$props;
	let { active = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('page' in $$props) $$invalidate(0, page = $$props.page);
		if ('active' in $$props) $$invalidate(1, active = $$props.active);
		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [page, active, $$scope, slots, click_handler];
}

class PaginationItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1l, create_fragment$1l, safe_not_equal, { page: 0, active: 1 });
	}
}

var PaginationItem$1 = PaginationItem;

/* src/PaginationNav/PaginationOverflow.svelte generated by Svelte v3.49.0 */

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (47:22) 
function create_if_block_1$e(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem$1({
			props: {
				page: /*fromIndex*/ ctx[0] + 1,
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler*/ ctx[5]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*fromIndex*/ 1) paginationitem_changes.page = /*fromIndex*/ ctx[0] + 1;

			if (dirty & /*$$scope*/ 512) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (21:0) {#if count > 1}
function create_if_block$F(ctx) {
	let li;
	let div1;
	let select;
	let option;
	let t;
	let div0;
	let overflowmenuhorizontal;
	let current;
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$3);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
	}

	overflowmenuhorizontal = new OverflowMenuHorizontal$1({
			props: { class: "bx--pagination-nav__select-icon" }
		});

	return {
		c() {
			li = element("li");
			div1 = element("div");
			select = element("select");
			option = element("option");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div0 = element("div");
			create_component(overflowmenuhorizontal.$$.fragment);
			option.__value = "";
			option.value = option.__value;
			option.hidden = true;
			attr(select, "aria-label", "Select Page number");
			toggle_class(select, "bx--pagination-nav__page", true);
			toggle_class(select, "bx--pagination-nav__page--select", true);
			toggle_class(div0, "bx--pagination-nav__select-icon-wrapper", true);
			toggle_class(div1, "bx--pagination-nav__select", true);
			toggle_class(li, "bx--pagination-nav__list-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div1);
			append(div1, select);
			append(select, option);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*value*/ ctx[2]);
			append(div1, t);
			append(div1, div0);
			mount_component(overflowmenuhorizontal, div0, null);
			current = true;

			if (!mounted) {
				dispose = listen(select, "change", /*change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*fromIndex, Array, count*/ 3) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$3);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$8(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$8(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*value, fromIndex, Array, count*/ 7) {
				select_option(select, /*value*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(overflowmenuhorizontal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overflowmenuhorizontal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_each(each_blocks, detaching);
			destroy_component(overflowmenuhorizontal);
			mounted = false;
			dispose();
		}
	};
}

// (48:2) <PaginationItem     page="{fromIndex + 1}"     on:click="{() => {       dispatch('select', { index: fromIndex });     }}"   >
function create_default_slot$5(ctx) {
	let t;

	return {
		c() {
			t = text("Page");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (36:8) {#each Array.from({ length: count }, (_, i) => i) as i}
function create_each_block$8(ctx) {
	let option;
	let t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "";
	let t0;
	let t1;
	let option_value_value;
	let option_data_page_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6];
			option.value = option.__value;
			attr(option, "data-page", option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1);
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*fromIndex, count*/ 3 && t0_value !== (t0_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1 + "")) set_data(t0, t0_value);

			if (dirty & /*fromIndex, count*/ 3 && option_value_value !== (option_value_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}

			if (dirty & /*fromIndex, count*/ 3 && option_data_page_value !== (option_data_page_value = /*fromIndex*/ ctx[0] + /*i*/ ctx[6] + 1)) {
				attr(option, "data-page", option_data_page_value);
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment$1k(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$F, create_if_block_1$e];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*count*/ ctx[1] > 1) return 0;
		if (/*count*/ ctx[1] === 1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

const func$3 = (_, i) => i;

function instance$1k($$self, $$props, $$invalidate) {
	let { fromIndex = 0 } = $$props;
	let { count = 0 } = $$props;
	const dispatch = createEventDispatcher();
	let value = "";

	const change_handler = ({ target }) => {
		$$invalidate(2, value = '');
		dispatch('select', { index: Number(target.value) });
	};

	const click_handler = () => {
		dispatch('select', { index: fromIndex });
	};

	$$self.$$set = $$props => {
		if ('fromIndex' in $$props) $$invalidate(0, fromIndex = $$props.fromIndex);
		if ('count' in $$props) $$invalidate(1, count = $$props.count);
	};

	return [fromIndex, count, value, dispatch, change_handler, click_handler];
}

class PaginationOverflow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1k, create_fragment$1k, safe_not_equal, { fromIndex: 0, count: 1 });
	}
}

var PaginationOverflow$1 = PaginationOverflow;

/* src/PaginationNav/PaginationNav.svelte generated by Svelte v3.49.0 */

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (90:4) {#if fit > MIN || (fit <= MIN && page <= 1)}
function create_if_block_1$d(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem$1({
			props: {
				page: 1,
				active: /*page*/ ctx[0] === 0,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler_1*/ ctx[14]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*page*/ 1) paginationitem_changes.active = /*page*/ ctx[0] === 0;

			if (dirty & /*$$scope, page*/ 8388609) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (91:6) <PaginationItem         page="{1}"         active="{page === 0}"         on:click="{() => (page = 0)}"       >
function create_default_slot_2(ctx) {
	let t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page*/ 1 && t_value !== (t_value = (/*page*/ ctx[0] === 0 ? "Active, Page" : "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (105:6) <PaginationItem         page="{item + 1}"         active="{page === item}"         on:click="{() => (page = item)}"       >
function create_default_slot_1$1(ctx) {
	let t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
	? "Active, Page"
	: "Page") + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page, items*/ 513 && t_value !== (t_value = (/*page*/ ctx[0] === /*item*/ ctx[20]
			? "Active, Page"
			: "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (104:4) {#each items as item}
function create_each_block$7(ctx) {
	let paginationitem;
	let current;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[16](/*item*/ ctx[20]);
	}

	paginationitem = new PaginationItem$1({
			props: {
				page: /*item*/ ctx[20] + 1,
				active: /*page*/ ctx[0] === /*item*/ ctx[20],
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", click_handler_2);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const paginationitem_changes = {};
			if (dirty & /*items*/ 512) paginationitem_changes.page = /*item*/ ctx[20] + 1;
			if (dirty & /*page, items*/ 513) paginationitem_changes.active = /*page*/ ctx[0] === /*item*/ ctx[20];

			if (dirty & /*$$scope, page, items*/ 8389121) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (120:4) {#if total > 1}
function create_if_block$E(ctx) {
	let paginationitem;
	let current;

	paginationitem = new PaginationItem$1({
			props: {
				page: /*total*/ ctx[1],
				active: /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			}
		});

	paginationitem.$on("click", /*click_handler_3*/ ctx[18]);

	return {
		c() {
			create_component(paginationitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paginationitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paginationitem_changes = {};
			if (dirty & /*total*/ 2) paginationitem_changes.page = /*total*/ ctx[1];
			if (dirty & /*page, total*/ 3) paginationitem_changes.active = /*page*/ ctx[0] === /*total*/ ctx[1] - 1;

			if (dirty & /*$$scope, page, total*/ 8388611) {
				paginationitem_changes.$$scope = { dirty, ctx };
			}

			paginationitem.$set(paginationitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paginationitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paginationitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paginationitem, detaching);
		}
	};
}

// (121:6) <PaginationItem         page="{total}"         active="{page === total - 1}"         on:click="{() => (page = total - 1)}"       >
function create_default_slot$4(ctx) {
	let t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
	? "Active, Page"
	: "Page") + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*page, total*/ 3 && t_value !== (t_value = (/*page*/ ctx[0] === /*total*/ ctx[1] - 1
			? "Active, Page"
			: "Page") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$1j(ctx) {
	let nav;
	let ul;
	let li0;
	let button0;
	let t0;
	let t1;
	let paginationoverflow0;
	let t2;
	let t3;
	let paginationoverflow1;
	let t4;
	let t5;
	let li1;
	let button1;
	let t6;
	let div;
	let t7;
	let t8_value = /*page*/ ctx[0] + 1 + "";
	let t8;
	let t9;
	let t10;
	let current;

	button0 = new Button$1({
			props: {
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*backwardText*/ ctx[4],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0,
				icon: CaretLeft$1
			}
		});

	button0.$on("click", /*click_handler*/ ctx[13]);
	let if_block0 = (/*fit*/ ctx[8] > MIN || /*fit*/ ctx[8] <= MIN && /*page*/ ctx[0] <= 1) && create_if_block_1$d(ctx);

	paginationoverflow0 = new PaginationOverflow$1({
			props: {
				fromIndex: /*startOffset*/ ctx[7],
				count: /*front*/ ctx[5]
			}
		});

	paginationoverflow0.$on("select", /*select_handler*/ ctx[15]);
	let each_value = /*items*/ ctx[9];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	paginationoverflow1 = new PaginationOverflow$1({
			props: {
				fromIndex: /*total*/ ctx[1] - /*back*/ ctx[6] - 1,
				count: /*back*/ ctx[6]
			}
		});

	paginationoverflow1.$on("select", /*select_handler_1*/ ctx[17]);
	let if_block1 = /*total*/ ctx[1] > 1 && create_if_block$E(ctx);

	button1 = new Button$1({
			props: {
				kind: "ghost",
				tooltipAlignment: "center",
				tooltipPosition: "bottom",
				iconDescription: /*forwardText*/ ctx[3],
				disabled: !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1,
				icon: CaretRight$1
			}
		});

	button1.$on("click", /*click_handler_4*/ ctx[19]);
	let nav_levels = [{ "aria-label": "pagination" }, /*$$restProps*/ ctx[11]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			create_component(button0.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			create_component(paginationoverflow0.$$.fragment);
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			create_component(paginationoverflow1.$$.fragment);
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			li1 = element("li");
			create_component(button1.$$.fragment);
			t6 = space();
			div = element("div");
			t7 = text("Page\n    ");
			t8 = text(t8_value);
			t9 = text("\n    of\n    ");
			t10 = text(/*total*/ ctx[1]);
			toggle_class(li0, "bx--pagination-nav__list-item", true);
			toggle_class(li1, "bx--pagination-nav__list-item", true);
			toggle_class(ul, "bx--pagination-nav__list", true);
			attr(div, "aria-live", "polite");
			attr(div, "aria-atomic", "true");
			toggle_class(div, "bx--pagination-nav__accessibility-label", true);
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--pagination-nav", true);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);
			append(ul, li0);
			mount_component(button0, li0, null);
			append(ul, t0);
			if (if_block0) if_block0.m(ul, null);
			append(ul, t1);
			mount_component(paginationoverflow0, ul, null);
			append(ul, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(ul, t3);
			mount_component(paginationoverflow1, ul, null);
			append(ul, t4);
			if (if_block1) if_block1.m(ul, null);
			append(ul, t5);
			append(ul, li1);
			mount_component(button1, li1, null);
			append(nav, t6);
			append(nav, div);
			append(div, t7);
			append(div, t8);
			append(div, t9);
			append(div, t10);
			current = true;
		},
		p(ctx, [dirty]) {
			const button0_changes = {};
			if (dirty & /*backwardText*/ 16) button0_changes.iconDescription = /*backwardText*/ ctx[4];
			if (dirty & /*loop, page*/ 5) button0_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === 0;
			button0.$set(button0_changes);

			if (/*fit*/ ctx[8] > MIN || /*fit*/ ctx[8] <= MIN && /*page*/ ctx[0] <= 1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*fit, page*/ 257) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$d(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(ul, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const paginationoverflow0_changes = {};
			if (dirty & /*startOffset*/ 128) paginationoverflow0_changes.fromIndex = /*startOffset*/ ctx[7];
			if (dirty & /*front*/ 32) paginationoverflow0_changes.count = /*front*/ ctx[5];
			paginationoverflow0.$set(paginationoverflow0_changes);

			if (dirty & /*items, page*/ 513) {
				each_value = /*items*/ ctx[9];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, t3);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const paginationoverflow1_changes = {};
			if (dirty & /*total, back*/ 66) paginationoverflow1_changes.fromIndex = /*total*/ ctx[1] - /*back*/ ctx[6] - 1;
			if (dirty & /*back*/ 64) paginationoverflow1_changes.count = /*back*/ ctx[6];
			paginationoverflow1.$set(paginationoverflow1_changes);

			if (/*total*/ ctx[1] > 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*total*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$E(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const button1_changes = {};
			if (dirty & /*forwardText*/ 8) button1_changes.iconDescription = /*forwardText*/ ctx[3];
			if (dirty & /*loop, page, total*/ 7) button1_changes.disabled = !/*loop*/ ctx[2] && /*page*/ ctx[0] === /*total*/ ctx[1] - 1;
			button1.$set(button1_changes);
			if ((!current || dirty & /*page*/ 1) && t8_value !== (t8_value = /*page*/ ctx[0] + 1 + "")) set_data(t8, t8_value);
			if (!current || dirty & /*total*/ 2) set_data(t10, /*total*/ ctx[1]);

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				{ "aria-label": "pagination" },
				dirty & /*$$restProps*/ 2048 && /*$$restProps*/ ctx[11]
			]));

			toggle_class(nav, "bx--pagination-nav", true);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(if_block0);
			transition_in(paginationoverflow0.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(paginationoverflow1.$$.fragment, local);
			transition_in(if_block1);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(if_block0);
			transition_out(paginationoverflow0.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(paginationoverflow1.$$.fragment, local);
			transition_out(if_block1);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			destroy_component(button0);
			if (if_block0) if_block0.d();
			destroy_component(paginationoverflow0);
			destroy_each(each_blocks, detaching);
			destroy_component(paginationoverflow1);
			if (if_block1) if_block1.d();
			destroy_component(button1);
		}
	};
}

const MIN = 4;

function instance$1j($$self, $$props, $$invalidate) {
	let fit;
	let startOffset;
	let items;
	const omit_props_names = ["page","total","shown","loop","forwardText","backwardText"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { page = 0 } = $$props;
	let { total = 10 } = $$props;
	let { shown = 10 } = $$props;
	let { loop = false } = $$props;
	let { forwardText = "Next page" } = $$props;
	let { backwardText = "Previous page" } = $$props;
	const dispatch = createEventDispatcher();

	afterUpdate(() => {
		dispatch("change", { page });
	});

	let front = 0;
	let back = 0;

	const click_handler = () => {
		if (page - 1 < 0) {
			if (loop) $$invalidate(0, page = total - 1);
		} else {
			$$invalidate(0, page--, page);
		}

		dispatch('click:button--previous', { page });
	};

	const click_handler_1 = () => $$invalidate(0, page = 0);
	const select_handler = ({ detail }) => $$invalidate(0, page = detail.index);
	const click_handler_2 = item => $$invalidate(0, page = item);

	const select_handler_1 = ({ detail }) => {
		$$invalidate(0, page = detail.index);
	};

	const click_handler_3 = () => $$invalidate(0, page = total - 1);

	const click_handler_4 = () => {
		if (page + 1 >= total) {
			if (loop) $$invalidate(0, page = 0);
		} else {
			$$invalidate(0, page++, page);
		}

		dispatch('click:button--next', { page });
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(11, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('page' in $$new_props) $$invalidate(0, page = $$new_props.page);
		if ('total' in $$new_props) $$invalidate(1, total = $$new_props.total);
		if ('shown' in $$new_props) $$invalidate(12, shown = $$new_props.shown);
		if ('loop' in $$new_props) $$invalidate(2, loop = $$new_props.loop);
		if ('forwardText' in $$new_props) $$invalidate(3, forwardText = $$new_props.forwardText);
		if ('backwardText' in $$new_props) $$invalidate(4, backwardText = $$new_props.backwardText);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*shown*/ 4096) {
			$$invalidate(8, fit = shown >= MIN ? shown : MIN);
		}

		if ($$self.$$.dirty & /*fit, page*/ 257) {
			$$invalidate(7, startOffset = fit <= MIN && page > 1 ? 0 : 1);
		}

		if ($$self.$$.dirty & /*fit, total*/ 258) {
			if (fit >= total) {
				$$invalidate(5, front = 0);
				$$invalidate(6, back = 0);
			}
		}

		if ($$self.$$.dirty & /*fit, total, page, front, back*/ 355) {
			if (fit < total) {
				const split = Math.ceil(fit / 2) - 1;
				$$invalidate(5, front = page - split + 1);
				$$invalidate(6, back = total - page - (fit - split) + 1);

				if (front <= 1) {
					$$invalidate(6, back -= front <= 0 ? Math.abs(front) + 1 : 0);
					$$invalidate(5, front = 0);
				}

				if (back <= 1) {
					$$invalidate(5, front -= back <= 0 ? Math.abs(back) + 1 : 0);
					$$invalidate(6, back = 0);
				}
			}
		}

		if ($$self.$$.dirty & /*total, startOffset, front, back*/ 226) {
			$$invalidate(9, items = Array.from({ length: total }).map((e, i) => i).slice(startOffset + front, (back + 1) * -1));
		}
	};

	return [
		page,
		total,
		loop,
		forwardText,
		backwardText,
		front,
		back,
		startOffset,
		fit,
		items,
		dispatch,
		$$restProps,
		shown,
		click_handler,
		click_handler_1,
		select_handler,
		click_handler_2,
		select_handler_1,
		click_handler_3,
		click_handler_4
	];
}

class PaginationNav extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1j, create_fragment$1j, safe_not_equal, {
			page: 0,
			total: 1,
			shown: 12,
			loop: 2,
			forwardText: 3,
			backwardText: 4
		});
	}
}

var PaginationNav$1 = PaginationNav;

/* src/Popover/Popover.svelte generated by Svelte v3.49.0 */

function create_fragment$1i(ctx) {
	let div1;
	let div0;
	let div1_style_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	let div1_levels = [
		/*$$restProps*/ ctx[9],
		{
			style: div1_style_value = "" + (/*$$restProps*/ ctx[9].style + "; " + (/*relative*/ ctx[6] && 'position: relative'))
		}
	];

	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div0, "bx--popover-contents", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--popover", true);
			toggle_class(div1, "bx--popover--caret", /*caret*/ ctx[2]);
			toggle_class(div1, "bx--popover--light", /*light*/ ctx[4]);
			toggle_class(div1, "bx--popover--high-contrast", /*highContrast*/ ctx[5]);
			toggle_class(div1, "bx--popover--top", /*align*/ ctx[3] === 'top');
			toggle_class(div1, "bx--popover--top-left", /*align*/ ctx[3] === 'top-left');
			toggle_class(div1, "bx--popover--top-right", /*align*/ ctx[3] === 'top-right');
			toggle_class(div1, "bx--popover--bottom", /*align*/ ctx[3] === 'bottom');
			toggle_class(div1, "bx--popover--bottom-left", /*align*/ ctx[3] === 'bottom-left');
			toggle_class(div1, "bx--popover--bottom-right", /*align*/ ctx[3] === 'bottom-right');
			toggle_class(div1, "bx--popover--left", /*align*/ ctx[3] === 'left');
			toggle_class(div1, "bx--popover--left-bottom", /*align*/ ctx[3] === 'left-bottom');
			toggle_class(div1, "bx--popover--left-top", /*align*/ ctx[3] === 'left-top');
			toggle_class(div1, "bx--popover--right", /*align*/ ctx[3] === 'right');
			toggle_class(div1, "bx--popover--right-bottom", /*align*/ ctx[3] === 'right-bottom');
			toggle_class(div1, "bx--popover--right-top", /*align*/ ctx[3] === 'right-top');
			toggle_class(div1, "bx--popover--open", /*open*/ ctx[0]);
			toggle_class(div1, "bx--popover--relative", /*relative*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[13](div1);
			current = true;

			if (!mounted) {
				dispose = listen(window, "click", /*click_handler*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9],
				(!current || dirty & /*$$restProps, relative*/ 576 && div1_style_value !== (div1_style_value = "" + (/*$$restProps*/ ctx[9].style + "; " + (/*relative*/ ctx[6] && 'position: relative')))) && { style: div1_style_value }
			]));

			toggle_class(div1, "bx--popover", true);
			toggle_class(div1, "bx--popover--caret", /*caret*/ ctx[2]);
			toggle_class(div1, "bx--popover--light", /*light*/ ctx[4]);
			toggle_class(div1, "bx--popover--high-contrast", /*highContrast*/ ctx[5]);
			toggle_class(div1, "bx--popover--top", /*align*/ ctx[3] === 'top');
			toggle_class(div1, "bx--popover--top-left", /*align*/ ctx[3] === 'top-left');
			toggle_class(div1, "bx--popover--top-right", /*align*/ ctx[3] === 'top-right');
			toggle_class(div1, "bx--popover--bottom", /*align*/ ctx[3] === 'bottom');
			toggle_class(div1, "bx--popover--bottom-left", /*align*/ ctx[3] === 'bottom-left');
			toggle_class(div1, "bx--popover--bottom-right", /*align*/ ctx[3] === 'bottom-right');
			toggle_class(div1, "bx--popover--left", /*align*/ ctx[3] === 'left');
			toggle_class(div1, "bx--popover--left-bottom", /*align*/ ctx[3] === 'left-bottom');
			toggle_class(div1, "bx--popover--left-top", /*align*/ ctx[3] === 'left-top');
			toggle_class(div1, "bx--popover--right", /*align*/ ctx[3] === 'right');
			toggle_class(div1, "bx--popover--right-bottom", /*align*/ ctx[3] === 'right-bottom');
			toggle_class(div1, "bx--popover--right-top", /*align*/ ctx[3] === 'right-top');
			toggle_class(div1, "bx--popover--open", /*open*/ ctx[0]);
			toggle_class(div1, "bx--popover--relative", /*relative*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding*/ ctx[13](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$1i($$self, $$props, $$invalidate) {
	const omit_props_names = ["open","closeOnOutsideClick","caret","align","light","highContrast","relative"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { open = false } = $$props;
	let { closeOnOutsideClick = false } = $$props;
	let { caret = false } = $$props;
	let { align = "top" } = $$props;
	let { light = false } = $$props;
	let { highContrast = false } = $$props;
	let { relative = false } = $$props;
	const dispatch = createEventDispatcher();
	let ref = null;

	const click_handler = e => {
		if (!open) return;

		if (e.target.contains(ref)) {
			dispatch('click:outside');
			if (closeOnOutsideClick) $$invalidate(0, open = false);
		}
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(7, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('closeOnOutsideClick' in $$new_props) $$invalidate(1, closeOnOutsideClick = $$new_props.closeOnOutsideClick);
		if ('caret' in $$new_props) $$invalidate(2, caret = $$new_props.caret);
		if ('align' in $$new_props) $$invalidate(3, align = $$new_props.align);
		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ('highContrast' in $$new_props) $$invalidate(5, highContrast = $$new_props.highContrast);
		if ('relative' in $$new_props) $$invalidate(6, relative = $$new_props.relative);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		open,
		closeOnOutsideClick,
		caret,
		align,
		light,
		highContrast,
		relative,
		ref,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		div1_binding
	];
}

class Popover extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1i, create_fragment$1i, safe_not_equal, {
			open: 0,
			closeOnOutsideClick: 1,
			caret: 2,
			align: 3,
			light: 4,
			highContrast: 5,
			relative: 6
		});
	}
}

var Popover$1 = Popover;

/* src/ProgressBar/ProgressBar.svelte generated by Svelte v3.49.0 */

const get_labelText_slot_changes$9 = dirty => ({});
const get_labelText_slot_context$9 = ctx => ({});

// (55:27)        
function fallback_block$p(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 8) set_data(t, /*labelText*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (73:2) {#if helperText}
function create_if_block$D(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[5]);
			attr(div, "id", /*helperId*/ ctx[9]);
			toggle_class(div, "bx--progress-bar__helper-text", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*helperText*/ 32) set_data(t, /*helperText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$1h(ctx) {
	let div2;
	let label;
	let t0;
	let div1;
	let div0;
	let div1_aria_valuemin_value;
	let div1_aria_valuemax_value;
	let div1_aria_valuenow_value;
	let div1_aria_describedby_value;
	let t1;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[13].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[12], get_labelText_slot_context$9);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$p(ctx);
	let if_block = /*helperText*/ ctx[5] && create_if_block$D(ctx);
	let div2_levels = [/*$$restProps*/ ctx[10]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			t1 = space();
			if (if_block) if_block.c();
			attr(label, "for", /*id*/ ctx[6]);
			toggle_class(label, "bx--progress-bar__label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[4]);
			set_style(div0, "transform", "scaleX(" + /*capped*/ ctx[7] / /*max*/ ctx[0] + ")");
			toggle_class(div0, "bx--progress-bar__bar", true);
			attr(div1, "role", "progressbar");
			attr(div1, "id", /*id*/ ctx[6]);
			attr(div1, "aria-valuemin", div1_aria_valuemin_value = /*indeterminate*/ ctx[8] ? undefined : 0);
			attr(div1, "aria-valuemax", div1_aria_valuemax_value = /*indeterminate*/ ctx[8] ? undefined : /*max*/ ctx[0]);
			attr(div1, "aria-valuenow", div1_aria_valuenow_value = /*indeterminate*/ ctx[8] ? undefined : /*capped*/ ctx[7]);
			attr(div1, "aria-describedby", div1_aria_describedby_value = /*helperText*/ ctx[5] ? /*helperId*/ ctx[9] : null);
			toggle_class(div1, "bx--progress-bar__track", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--progress-bar", true);
			toggle_class(div2, "bx--progress-bar--indeterminate", /*indeterminate*/ ctx[8]);
			toggle_class(div2, "bx--progress-bar--big", /*size*/ ctx[2] === 'md');
			toggle_class(div2, "bx--progress-bar--small", /*size*/ ctx[2] === 'sm');
			toggle_class(div2, "bx--progress-bar--inline", /*kind*/ ctx[1] === 'inline');
			toggle_class(div2, "bx--progress-bar--indented", /*kind*/ ctx[1] === 'indented');
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div2, t0);
			append(div2, div1);
			append(div1, div0);
			append(div2, t1);
			if (if_block) if_block.m(div2, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[12], dirty, get_labelText_slot_changes$9),
						get_labelText_slot_context$9
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 8)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 64) {
				attr(label, "for", /*id*/ ctx[6]);
			}

			if (dirty & /*hideLabel*/ 16) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[4]);
			}

			if (!current || dirty & /*capped, max*/ 129) {
				set_style(div0, "transform", "scaleX(" + /*capped*/ ctx[7] / /*max*/ ctx[0] + ")");
			}

			if (!current || dirty & /*id*/ 64) {
				attr(div1, "id", /*id*/ ctx[6]);
			}

			if (!current || dirty & /*indeterminate*/ 256 && div1_aria_valuemin_value !== (div1_aria_valuemin_value = /*indeterminate*/ ctx[8] ? undefined : 0)) {
				attr(div1, "aria-valuemin", div1_aria_valuemin_value);
			}

			if (!current || dirty & /*indeterminate, max*/ 257 && div1_aria_valuemax_value !== (div1_aria_valuemax_value = /*indeterminate*/ ctx[8] ? undefined : /*max*/ ctx[0])) {
				attr(div1, "aria-valuemax", div1_aria_valuemax_value);
			}

			if (!current || dirty & /*indeterminate, capped*/ 384 && div1_aria_valuenow_value !== (div1_aria_valuenow_value = /*indeterminate*/ ctx[8] ? undefined : /*capped*/ ctx[7])) {
				attr(div1, "aria-valuenow", div1_aria_valuenow_value);
			}

			if (!current || dirty & /*helperText*/ 32 && div1_aria_describedby_value !== (div1_aria_describedby_value = /*helperText*/ ctx[5] ? /*helperId*/ ctx[9] : null)) {
				attr(div1, "aria-describedby", div1_aria_describedby_value);
			}

			if (/*helperText*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$D(ctx);
					if_block.c();
					if_block.m(div2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]]));
			toggle_class(div2, "bx--progress-bar", true);
			toggle_class(div2, "bx--progress-bar--indeterminate", /*indeterminate*/ ctx[8]);
			toggle_class(div2, "bx--progress-bar--big", /*size*/ ctx[2] === 'md');
			toggle_class(div2, "bx--progress-bar--small", /*size*/ ctx[2] === 'sm');
			toggle_class(div2, "bx--progress-bar--inline", /*kind*/ ctx[1] === 'inline');
			toggle_class(div2, "bx--progress-bar--indented", /*kind*/ ctx[1] === 'indented');
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

function instance$1h($$self, $$props, $$invalidate) {
	let indeterminate;
	let capped;
	const omit_props_names = ["value","max","kind","size","labelText","hideLabel","helperText","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = undefined } = $$props;
	let { max = 100 } = $$props;
	let { kind = "default" } = $$props;
	let { size = "md" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let helperId = "ccs-" + Math.random().toString(36);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(11, value = $$new_props.value);
		if ('max' in $$new_props) $$invalidate(0, max = $$new_props.max);
		if ('kind' in $$new_props) $$invalidate(1, kind = $$new_props.kind);
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('labelText' in $$new_props) $$invalidate(3, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(4, hideLabel = $$new_props.hideLabel);
		if ('helperText' in $$new_props) $$invalidate(5, helperText = $$new_props.helperText);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 2048) {
			$$invalidate(8, indeterminate = value === undefined);
		}

		if ($$self.$$.dirty & /*value, max*/ 2049) {
			$$invalidate(7, capped = value > max ? max : value < 0 ? 0 : value);
		}
	};

	return [
		max,
		kind,
		size,
		labelText,
		hideLabel,
		helperText,
		id,
		capped,
		indeterminate,
		helperId,
		$$restProps,
		value,
		$$scope,
		slots
	];
}

class ProgressBar extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1h, create_fragment$1h, safe_not_equal, {
			value: 11,
			max: 0,
			kind: 1,
			size: 2,
			labelText: 3,
			hideLabel: 4,
			helperText: 5,
			id: 6
		});
	}
}

var ProgressBar$1 = ProgressBar;

/* src/ProgressIndicator/ProgressIndicator.svelte generated by Svelte v3.49.0 */

function create_fragment$1g(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let ul_levels = [/*$$restProps*/ ctx[3]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--progress--space-equal", /*spaceEqually*/ ctx[1] && !/*vertical*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[8]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--progress--space-equal", /*spaceEqually*/ ctx[1] && !/*vertical*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1g($$self, $$props, $$invalidate) {
	const omit_props_names = ["currentIndex","vertical","spaceEqually","preventChangeOnClick"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $stepsById;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { currentIndex = 0 } = $$props;
	let { vertical = false } = $$props;
	let { spaceEqually = false } = $$props;
	let { preventChangeOnClick = false } = $$props;
	const dispatch = createEventDispatcher();
	const steps = writable([]);
	const stepsById = derived(steps, $ => $.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	component_subscribe($$self, stepsById, value => $$invalidate(12, $stepsById = value));

	setContext("ProgressIndicator", {
		steps,
		stepsById,
		add: step => {
			steps.update(_ => {
				if (step.id in $stepsById) {
					return _.map(_step => {
						if (_step.id === step.id) return { ..._step, ...step };
						return _step;
					});
				}

				return [
					..._,
					{
						...step,
						index: _.length,
						current: _.length === currentIndex,
						complete: step.complete
					}
				];
			});
		},
		change: index => {
			if (preventChangeOnClick) return;
			$$invalidate(4, currentIndex = index);

			/** @event {number} change */
			dispatch("change", index);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('currentIndex' in $$new_props) $$invalidate(4, currentIndex = $$new_props.currentIndex);
		if ('vertical' in $$new_props) $$invalidate(0, vertical = $$new_props.vertical);
		if ('spaceEqually' in $$new_props) $$invalidate(1, spaceEqually = $$new_props.spaceEqually);
		if ('preventChangeOnClick' in $$new_props) $$invalidate(5, preventChangeOnClick = $$new_props.preventChangeOnClick);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentIndex*/ 16) {
			steps.update(_ => _.map((step, i) => ({ ...step, current: i === currentIndex })));
		}
	};

	return [
		vertical,
		spaceEqually,
		stepsById,
		$$restProps,
		currentIndex,
		preventChangeOnClick,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ProgressIndicator extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, {
			currentIndex: 4,
			vertical: 0,
			spaceEqually: 1,
			preventChangeOnClick: 5
		});
	}
}

var ProgressIndicator$1 = ProgressIndicator;

/* src/ProgressIndicator/ProgressIndicatorSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (20:2) {#each Array.from({ length: count }, (_, i) => i) as item, i (item)}
function create_each_block$6(key_1, ctx) {
	let li;
	let div;
	let svg;
	let path;
	let t0;
	let p;
	let t1;
	let span;
	let t2;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			p = element("p");
			t1 = space();
			span = element("span");
			t2 = space();
			attr(path, "d", "M 7, 7 m -7, 0 a 7,7 0 1,0 14,0 a 7,7 0 1,0 -14,0");
			toggle_class(p, "bx--progress-label", true);
			toggle_class(span, "bx--progress-line", true);
			toggle_class(div, "bx--progress-step-button", true);
			toggle_class(div, "bx--progress-step-button--unclickable", true);
			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--incomplete", true);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, svg);
			append(svg, path);
			append(div, t0);
			append(div, p);
			append(div, t1);
			append(div, span);
			append(li, t2);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment$1f(ctx) {
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[1] }, func$2);
	const get_key = ctx => /*item*/ ctx[7];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$6(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$6(key));
	}

	let ul_levels = [/*$$restProps*/ ctx[2]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[3]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 2) {
				each_value = Array.from({ length: /*count*/ ctx[1] }, func$2);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, destroy_block, create_each_block$6, null, get_each_context$6);
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(ul, "bx--progress", true);
			toggle_class(ul, "bx--progress--vertical", /*vertical*/ ctx[0]);
			toggle_class(ul, "bx--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$2 = (_, i) => i;

function instance$1f($$self, $$props, $$invalidate) {
	const omit_props_names = ["vertical","count"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { vertical = false } = $$props;
	let { count = 4 } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('vertical' in $$new_props) $$invalidate(0, vertical = $$new_props.vertical);
		if ('count' in $$new_props) $$invalidate(1, count = $$new_props.count);
	};

	return [
		vertical,
		count,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ProgressIndicatorSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, { vertical: 0, count: 1 });
	}
}

var ProgressIndicatorSkeleton$1 = ProgressIndicatorSkeleton;

/* src/icons/CheckmarkOutline.svelte generated by Svelte v3.49.0 */

function create_if_block$C(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1e(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$C(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M14 21.414L9 16.413 10.413 15 14 18.586 21.585 11 23 12.415 14 21.414z");
			attr(path1, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,26A12,12,0,1,1,28,16,12,12,0,0,1,16,28Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$C(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1e($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CheckmarkOutline extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, { size: 0, title: 1 });
	}
}

var CheckmarkOutline$1 = CheckmarkOutline;

/* src/icons/Warning.svelte generated by Svelte v3.49.0 */

function create_if_block$B(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1d(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$B(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M16,2A14,14,0,1,0,30,16,14,14,0,0,0,16,2Zm0,26A12,12,0,1,1,28,16,12,12,0,0,1,16,28Z");
			attr(path1, "d", "M15 8H17V19H15zM16 22a1.5 1.5 0 101.5 1.5A1.5 1.5 0 0016 22z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$B(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1d($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Warning extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, { size: 0, title: 1 });
	}
}

var Warning$1 = Warning;

/* src/icons/CircleDash.svelte generated by Svelte v3.49.0 */

function create_if_block$A(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1c(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$A(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M7.7 4.7a14.7 14.7 0 00-3 3.1L6.3 9A13.26 13.26 0 018.9 6.3zM4.6 12.3l-1.9-.6A12.51 12.51 0 002 16H4A11.48 11.48 0 014.6 12.3zM2.7 20.4a14.4 14.4 0 002 3.9l1.6-1.2a12.89 12.89 0 01-1.7-3.3zM7.8 27.3a14.4 14.4 0 003.9 2l.6-1.9A12.89 12.89 0 019 25.7zM11.7 2.7l.6 1.9A11.48 11.48 0 0116 4V2A12.51 12.51 0 0011.7 2.7zM24.2 27.3a15.18 15.18 0 003.1-3.1L25.7 23A11.53 11.53 0 0123 25.7zM27.4 19.7l1.9.6A15.47 15.47 0 0030 16H28A11.48 11.48 0 0127.4 19.7zM29.2 11.6a14.4 14.4 0 00-2-3.9L25.6 8.9a12.89 12.89 0 011.7 3.3zM24.1 4.6a14.4 14.4 0 00-3.9-2l-.6 1.9a12.89 12.89 0 013.3 1.7zM20.3 29.3l-.6-1.9A11.48 11.48 0 0116 28v2A21.42 21.42 0 0020.3 29.3z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$A(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1c($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CircleDash extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, { size: 0, title: 1 });
	}
}

var CircleDash$1 = CircleDash;

/* src/icons/Incomplete.svelte generated by Svelte v3.49.0 */

function create_if_block$z(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$1b(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$z(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M23.7642 6.8593l1.2851-1.5315A13.976 13.976 0 0020.8672 2.887l-.6836 1.8776A11.9729 11.9729 0 0123.7642 6.8593zM27.81 14l1.9677-.4128A13.8888 13.8888 0 0028.14 9.0457L26.4087 10A12.52 12.52 0 0127.81 14zM20.1836 27.2354l.6836 1.8776a13.976 13.976 0 004.1821-2.4408l-1.2851-1.5315A11.9729 11.9729 0 0120.1836 27.2354zM26.4087 22L28.14 23a14.14 14.14 0 001.6382-4.5872L27.81 18.0659A12.1519 12.1519 0 0126.4087 22zM16 30V2a14 14 0 000 28z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$z(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$1b($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Incomplete extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, { size: 0, title: 1 });
	}
}

var Incomplete$1 = Incomplete;

/* src/ProgressIndicator/ProgressStep.svelte generated by Svelte v3.49.0 */
const get_default_slot_changes$3 = dirty => ({});
const get_default_slot_context$3 = ctx => ({ props: { class: 'bx--progress-label' } });

// (92:4) {:else}
function create_else_block$7(ctx) {
	let circledash;
	let current;
	circledash = new CircleDash$1({ props: { title: /*description*/ ctx[4] } });

	return {
		c() {
			create_component(circledash.$$.fragment);
		},
		m(target, anchor) {
			mount_component(circledash, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const circledash_changes = {};
			if (dirty & /*description*/ 16) circledash_changes.title = /*description*/ ctx[4];
			circledash.$set(circledash_changes);
		},
		i(local) {
			if (current) return;
			transition_in(circledash.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(circledash.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(circledash, detaching);
		}
	};
}

// (90:23) 
function create_if_block_3$5(ctx) {
	let checkmarkoutline;
	let current;
	checkmarkoutline = new CheckmarkOutline$1({ props: { title: /*description*/ ctx[4] } });

	return {
		c() {
			create_component(checkmarkoutline.$$.fragment);
		},
		m(target, anchor) {
			mount_component(checkmarkoutline, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const checkmarkoutline_changes = {};
			if (dirty & /*description*/ 16) checkmarkoutline_changes.title = /*description*/ ctx[4];
			checkmarkoutline.$set(checkmarkoutline_changes);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkoutline.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkoutline.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(checkmarkoutline, detaching);
		}
	};
}

// (88:22) 
function create_if_block_2$8(ctx) {
	let incomplete;
	let current;
	incomplete = new Incomplete$1({ props: { title: /*description*/ ctx[4] } });

	return {
		c() {
			create_component(incomplete.$$.fragment);
		},
		m(target, anchor) {
			mount_component(incomplete, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const incomplete_changes = {};
			if (dirty & /*description*/ 16) incomplete_changes.title = /*description*/ ctx[4];
			incomplete.$set(incomplete_changes);
		},
		i(local) {
			if (current) return;
			transition_in(incomplete.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(incomplete.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(incomplete, detaching);
		}
	};
}

// (86:4) {#if invalid}
function create_if_block_1$c(ctx) {
	let warning;
	let current;

	warning = new Warning$1({
			props: {
				class: "bx--progress__warning",
				title: /*description*/ ctx[4]
			}
		});

	return {
		c() {
			create_component(warning.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warning, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const warning_changes = {};
			if (dirty & /*description*/ 16) warning_changes.title = /*description*/ ctx[4];
			warning.$set(warning_changes);
		},
		i(local) {
			if (current) return;
			transition_in(warning.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warning.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warning, detaching);
		}
	};
}

// (95:52)        
function fallback_block$o(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*label*/ ctx[5]);
			toggle_class(p, "bx--progress-label", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 32) set_data(t, /*label*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (98:4) {#if secondaryLabel}
function create_if_block$y(ctx) {
	let p;
	let t;

	return {
		c() {
			p = element("p");
			t = text(/*secondaryLabel*/ ctx[6]);
			toggle_class(p, "bx--progress-optional", true);
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t);
		},
		p(ctx, dirty) {
			if (dirty & /*secondaryLabel*/ 64) set_data(t, /*secondaryLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

function create_fragment$1a(ctx) {
	let li;
	let button;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let t2;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$c, create_if_block_2$8, create_if_block_3$5, create_else_block$7];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*invalid*/ ctx[3]) return 0;
		if (/*current*/ ctx[1]) return 1;
		if (/*complete*/ ctx[0]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context$3);
	const default_slot_or_fallback = default_slot || fallback_block$o(ctx);
	let if_block1 = /*secondaryLabel*/ ctx[6] && create_if_block$y(ctx);

	let li_levels = [
		{ "aria-disabled": /*disabled*/ ctx[2] },
		{ id: /*id*/ ctx[7] },
		/*$$restProps*/ ctx[10]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			button = element("button");
			if_block0.c();
			t0 = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			span = element("span");
			toggle_class(span, "bx--progress-line", true);
			button.disabled = /*disabled*/ ctx[2];
			attr(button, "aria-disabled", /*disabled*/ ctx[2]);
			attr(button, "tabindex", button_tabindex_value = !/*current*/ ctx[1] && !/*disabled*/ ctx[2] ? '0' : '-1');
			toggle_class(button, "bx--progress-step-button", true);
			toggle_class(button, "bx--progress-step-button--unclickable", /*current*/ ctx[1]);
			set_attributes(li, li_data);
			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--current", /*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--complete", /*complete*/ ctx[0]);
			toggle_class(li, "bx--progress-step--incomplete", !/*complete*/ ctx[0] && !/*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			if_blocks[current_block_type_index].m(button, null);
			append(button, t0);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			append(button, t1);
			if (if_block1) if_block1.m(button, null);
			append(button, t2);
			append(button, span);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[13]),
					listen(button, "click", /*click_handler_1*/ ctx[18]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[16]),
					listen(button, "keydown", /*keydown_handler*/ ctx[17]),
					listen(button, "keydown", /*keydown_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(button, t0);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, get_default_slot_changes$3),
						get_default_slot_context$3
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*label*/ 32)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (/*secondaryLabel*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$y(ctx);
					if_block1.c();
					if_block1.m(button, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!current || dirty & /*disabled*/ 4) {
				button.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(button, "aria-disabled", /*disabled*/ ctx[2]);
			}

			if (!current || dirty & /*current, disabled*/ 6 && button_tabindex_value !== (button_tabindex_value = !/*current*/ ctx[1] && !/*disabled*/ ctx[2] ? '0' : '-1')) {
				attr(button, "tabindex", button_tabindex_value);
			}

			if (dirty & /*current*/ 2) {
				toggle_class(button, "bx--progress-step-button--unclickable", /*current*/ ctx[1]);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty & /*disabled*/ 4) && { "aria-disabled": /*disabled*/ ctx[2] },
				(!current || dirty & /*id*/ 128) && { id: /*id*/ ctx[7] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(li, "bx--progress-step", true);
			toggle_class(li, "bx--progress-step--current", /*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--complete", /*complete*/ ctx[0]);
			toggle_class(li, "bx--progress-step--incomplete", !/*complete*/ ctx[0] && !/*current*/ ctx[1]);
			toggle_class(li, "bx--progress-step--disabled", /*disabled*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if_blocks[current_block_type_index].d();
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1a($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"complete","current","disabled","invalid","description","label","secondaryLabel","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { complete = false } = $$props;
	let { current = false } = $$props;
	let { disabled = false } = $$props;
	let { invalid = false } = $$props;
	let { description = "" } = $$props;
	let { label = "" } = $$props;
	let { secondaryLabel = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let step = {};
	const { stepsById, add, change } = getContext("ProgressIndicator");

	const unsubscribe = stepsById.subscribe(value => {
		if (value[id]) {
			$$invalidate(8, step = value[id]);
			$$invalidate(1, current = step.current);
			$$invalidate(0, complete = step.complete);
		}
	});

	onMount(() => {
		return () => {
			unsubscribe();
		};
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		if (!step.complete) return;
		change(step.index);
	};

	const keydown_handler_1 = e => {
		if (!step.complete) return;

		if (e.key === ' ' || e.key === 'Enter') {
			change(step.index);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('complete' in $$new_props) $$invalidate(0, complete = $$new_props.complete);
		if ('current' in $$new_props) $$invalidate(1, current = $$new_props.current);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('invalid' in $$new_props) $$invalidate(3, invalid = $$new_props.invalid);
		if ('description' in $$new_props) $$invalidate(4, description = $$new_props.description);
		if ('label' in $$new_props) $$invalidate(5, label = $$new_props.label);
		if ('secondaryLabel' in $$new_props) $$invalidate(6, secondaryLabel = $$new_props.secondaryLabel);
		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, complete, disabled*/ 133) {
			add({ id, complete, disabled });
		}
	};

	return [
		complete,
		current,
		disabled,
		invalid,
		description,
		label,
		secondaryLabel,
		id,
		step,
		change,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		keydown_handler_1
	];
}

class ProgressStep extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, {
			complete: 0,
			current: 1,
			disabled: 2,
			invalid: 3,
			description: 4,
			label: 5,
			secondaryLabel: 6,
			id: 7
		});
	}
}

var ProgressStep$1 = ProgressStep;

/* src/RadioButton/RadioButtonSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$19(ctx) {
	let div1;
	let div0;
	let t;
	let span;
	let mounted;
	let dispose;
	let div1_levels = [/*$$restProps*/ ctx[0]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t = space();
			span = element("span");
			toggle_class(div0, "bx--radio-button", true);
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(span, "bx--radio-button__label", true);
			toggle_class(span, "bx--skeleton", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--radio-button-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div1, t);
			append(div1, span);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[1]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div1, "bx--radio-button-wrapper", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$19($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class RadioButtonSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$19, create_fragment$19, safe_not_equal, {});
	}
}

var RadioButtonSkeleton$1 = RadioButtonSkeleton;

/* src/RadioButtonGroup/RadioButtonGroup.svelte generated by Svelte v3.49.0 */
const get_legendText_slot_changes = dirty => ({});
const get_legendText_slot_context = ctx => ({});

// (89:4) {#if legendText || $$slots.legendText}
function create_if_block$x(ctx) {
	let legend;
	let current;
	const legendText_slot_template = /*#slots*/ ctx[11].legendText;
	const legendText_slot = create_slot(legendText_slot_template, ctx, /*$$scope*/ ctx[10], get_legendText_slot_context);
	const legendText_slot_or_fallback = legendText_slot || fallback_block$n(ctx);

	return {
		c() {
			legend = element("legend");
			if (legendText_slot_or_fallback) legendText_slot_or_fallback.c();
			toggle_class(legend, "bx--label", true);
			toggle_class(legend, "bx--visually-hidden", /*hideLegend*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, legend, anchor);

			if (legendText_slot_or_fallback) {
				legendText_slot_or_fallback.m(legend, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (legendText_slot) {
				if (legendText_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						legendText_slot,
						legendText_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(legendText_slot_template, /*$$scope*/ ctx[10], dirty, get_legendText_slot_changes),
						get_legendText_slot_context
					);
				}
			} else {
				if (legendText_slot_or_fallback && legendText_slot_or_fallback.p && (!current || dirty & /*legendText*/ 2)) {
					legendText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLegend*/ 4) {
				toggle_class(legend, "bx--visually-hidden", /*hideLegend*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(legendText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(legendText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(legend);
			if (legendText_slot_or_fallback) legendText_slot_or_fallback.d(detaching);
		}
	};
}

// (91:32) {legendText}
function fallback_block$n(ctx) {
	let t;

	return {
		c() {
			t = text(/*legendText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*legendText*/ 2) set_data(t, /*legendText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$18(ctx) {
	let div;
	let fieldset;
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*legendText*/ ctx[1] || /*$$slots*/ ctx[8].legendText) && create_if_block$x(ctx);
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let div_levels = [{ id: /*id*/ ctx[5] }, /*$$restProps*/ ctx[7]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			fieldset = element("fieldset");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			fieldset.disabled = /*disabled*/ ctx[0];
			toggle_class(fieldset, "bx--radio-button-group", true);
			toggle_class(fieldset, "bx--radio-button-group--vertical", /*orientation*/ ctx[4] === 'vertical');
			toggle_class(fieldset, "bx--radio-button-group--label-left", /*labelPosition*/ ctx[3] === 'left');
			toggle_class(fieldset, "bx--radio-button-group--label-right", /*labelPosition*/ ctx[3] === 'right');
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, fieldset);
			if (if_block) if_block.m(fieldset, null);
			append(fieldset, t);

			if (default_slot) {
				default_slot.m(fieldset, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[12]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*legendText*/ ctx[1] || /*$$slots*/ ctx[8].legendText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*legendText, $$slots*/ 258) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$x(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(fieldset, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*disabled*/ 1) {
				fieldset.disabled = /*disabled*/ ctx[0];
			}

			if (dirty & /*orientation*/ 16) {
				toggle_class(fieldset, "bx--radio-button-group--vertical", /*orientation*/ ctx[4] === 'vertical');
			}

			if (dirty & /*labelPosition*/ 8) {
				toggle_class(fieldset, "bx--radio-button-group--label-left", /*labelPosition*/ ctx[3] === 'left');
			}

			if (dirty & /*labelPosition*/ 8) {
				toggle_class(fieldset, "bx--radio-button-group--label-right", /*labelPosition*/ ctx[3] === 'right');
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*id*/ 32) && { id: /*id*/ ctx[5] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$18($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"selected","disabled","legendText","hideLegend","labelPosition","orientation","id"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { selected = undefined } = $$props;
	let { disabled = false } = $$props;
	let { legendText = "" } = $$props;
	let { hideLegend = false } = $$props;
	let { labelPosition = "right" } = $$props;
	let { orientation = "horizontal" } = $$props;
	let { id = undefined } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(16, $selectedValue = value));

	setContext("RadioButtonGroup", {
		selectedValue,
		add: ({ checked, value }) => {
			if (checked) {
				selectedValue.set(value);
			}
		},
		update: value => {
			$$invalidate(9, selected = value);
		}
	});

	onMount(() => {
		set_store_value(selectedValue, $selectedValue = selected, $selectedValue);
	});

	beforeUpdate(() => {
		set_store_value(selectedValue, $selectedValue = selected, $selectedValue);
	});

	selectedValue.subscribe(value => {
		$$invalidate(9, selected = value);
		dispatch("change", value);
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(9, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ('legendText' in $$new_props) $$invalidate(1, legendText = $$new_props.legendText);
		if ('hideLegend' in $$new_props) $$invalidate(2, hideLegend = $$new_props.hideLegend);
		if ('labelPosition' in $$new_props) $$invalidate(3, labelPosition = $$new_props.labelPosition);
		if ('orientation' in $$new_props) $$invalidate(4, orientation = $$new_props.orientation);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	return [
		disabled,
		legendText,
		hideLegend,
		labelPosition,
		orientation,
		id,
		selectedValue,
		$$restProps,
		$$slots,
		selected,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class RadioButtonGroup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$18, create_fragment$18, safe_not_equal, {
			selected: 9,
			disabled: 0,
			legendText: 1,
			hideLegend: 2,
			labelPosition: 3,
			orientation: 4,
			id: 5
		});
	}
}

var RadioButtonGroup$1 = RadioButtonGroup;

/* src/UnorderedList/UnorderedList.svelte generated by Svelte v3.49.0 */

function create_fragment$17(ctx) {
	let ul;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	let ul_levels = [/*$$restProps*/ ctx[2]];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--list--unordered", true);
			toggle_class(ul, "bx--list--nested", /*nested*/ ctx[0]);
			toggle_class(ul, "bx--list--expressive", /*expressive*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "click", /*click_handler*/ ctx[5]),
					listen(ul, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(ul, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(ul, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(ul, "bx--list--unordered", true);
			toggle_class(ul, "bx--list--nested", /*nested*/ ctx[0]);
			toggle_class(ul, "bx--list--expressive", /*expressive*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$17($$self, $$props, $$invalidate) {
	const omit_props_names = ["nested","expressive"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { nested = false } = $$props;
	let { expressive = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('nested' in $$new_props) $$invalidate(0, nested = $$new_props.nested);
		if ('expressive' in $$new_props) $$invalidate(1, expressive = $$new_props.expressive);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		nested,
		expressive,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class UnorderedList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$17, create_fragment$17, safe_not_equal, { nested: 0, expressive: 1 });
	}
}

var UnorderedList$1 = UnorderedList;

/* src/RecursiveList/RecursiveListItem.svelte generated by Svelte v3.49.0 */

function create_if_block_2$7(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 1) set_data(t, /*text*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (16:2) {#if href}
function create_if_block_1$b(ctx) {
	let a;
	let t_value = (/*text*/ ctx[0] || /*href*/ ctx[1]) + "";
	let t;

	return {
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "href", /*href*/ ctx[1]);
			toggle_class(a, "bx--link", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text, href*/ 3 && t_value !== (t_value = (/*text*/ ctx[0] || /*href*/ ctx[1]) + "")) set_data(t, t_value);

			if (dirty & /*href*/ 2) {
				attr(a, "href", /*href*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (17:2) {#if !text && html}
function create_if_block$w(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag(false);
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(/*html*/ ctx[2], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*html*/ 4) html_tag.p(/*html*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (14:0) <ListItem>
function create_default_slot$3(ctx) {
	let t0;
	let t1;
	let t2;
	let current;
	let if_block0 = /*text*/ ctx[0] && !/*href*/ ctx[1] && create_if_block_2$7(ctx);
	let if_block1 = /*href*/ ctx[1] && create_if_block_1$b(ctx);
	let if_block2 = !/*text*/ ctx[0] && /*html*/ ctx[2] && create_if_block$w(ctx);
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*text*/ ctx[0] && !/*href*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2$7(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*href*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$b(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (!/*text*/ ctx[0] && /*html*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block$w(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$16(ctx) {
	let listitem;
	let current;

	listitem = new ListItem$1({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(listitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const listitem_changes = {};

			if (dirty & /*$$scope, html, text, href*/ 23) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(listitem, detaching);
		}
	};
}

function instance$16($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { text = "" } = $$props;
	let { href = "" } = $$props;
	let { html = "" } = $$props;

	$$self.$$set = $$props => {
		if ('text' in $$props) $$invalidate(0, text = $$props.text);
		if ('href' in $$props) $$invalidate(1, href = $$props.href);
		if ('html' in $$props) $$invalidate(2, html = $$props.html);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [text, href, html, slots, $$scope];
}

class RecursiveListItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$16, create_fragment$16, safe_not_equal, { text: 0, href: 1, html: 2 });
	}
}

var RecursiveListItem$1 = RecursiveListItem;

/* src/RecursiveList/RecursiveList.svelte generated by Svelte v3.49.0 */

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (34:4) {:else}
function create_else_block$6(ctx) {
	let recursivelistitem;
	let current;
	const recursivelistitem_spread_levels = [/*child*/ ctx[3]];
	let recursivelistitem_props = {};

	for (let i = 0; i < recursivelistitem_spread_levels.length; i += 1) {
		recursivelistitem_props = assign(recursivelistitem_props, recursivelistitem_spread_levels[i]);
	}

	recursivelistitem = new RecursiveListItem$1({ props: recursivelistitem_props });

	return {
		c() {
			create_component(recursivelistitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(recursivelistitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const recursivelistitem_changes = (dirty & /*children*/ 1)
			? get_spread_update(recursivelistitem_spread_levels, [get_spread_object(/*child*/ ctx[3])])
			: {};

			recursivelistitem.$set(recursivelistitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recursivelistitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recursivelistitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(recursivelistitem, detaching);
		}
	};
}

// (30:4) {#if Array.isArray(child.children)}
function create_if_block$v(ctx) {
	let recursivelistitem;
	let current;
	const recursivelistitem_spread_levels = [/*child*/ ctx[3]];

	let recursivelistitem_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < recursivelistitem_spread_levels.length; i += 1) {
		recursivelistitem_props = assign(recursivelistitem_props, recursivelistitem_spread_levels[i]);
	}

	recursivelistitem = new RecursiveListItem$1({ props: recursivelistitem_props });

	return {
		c() {
			create_component(recursivelistitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(recursivelistitem, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const recursivelistitem_changes = (dirty & /*children*/ 1)
			? get_spread_update(recursivelistitem_spread_levels, [get_spread_object(/*child*/ ctx[3])])
			: {};

			if (dirty & /*$$scope, children, type*/ 67) {
				recursivelistitem_changes.$$scope = { dirty, ctx };
			}

			recursivelistitem.$set(recursivelistitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recursivelistitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recursivelistitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(recursivelistitem, detaching);
		}
	};
}

// (31:6) <RecursiveListItem {...child}>
function create_default_slot_1(ctx) {
	let recursivelist;
	let t;
	let current;
	const recursivelist_spread_levels = [/*child*/ ctx[3], { type: /*type*/ ctx[1] }, { nested: true }];
	let recursivelist_props = {};

	for (let i = 0; i < recursivelist_spread_levels.length; i += 1) {
		recursivelist_props = assign(recursivelist_props, recursivelist_spread_levels[i]);
	}

	recursivelist = new RecursiveList({ props: recursivelist_props });

	return {
		c() {
			create_component(recursivelist.$$.fragment);
			t = space();
		},
		m(target, anchor) {
			mount_component(recursivelist, target, anchor);
			insert(target, t, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const recursivelist_changes = (dirty & /*children, type*/ 3)
			? get_spread_update(recursivelist_spread_levels, [
					dirty & /*children*/ 1 && get_spread_object(/*child*/ ctx[3]),
					dirty & /*type*/ 2 && { type: /*type*/ ctx[1] },
					recursivelist_spread_levels[2]
				])
			: {};

			recursivelist.$set(recursivelist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recursivelist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recursivelist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(recursivelist, detaching);
			if (detaching) detach(t);
		}
	};
}

// (29:2) {#each children as child}
function create_each_block$5(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$v, create_else_block$6];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*children*/ 1) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*child*/ ctx[3].children);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (24:0) <svelte:component   this="{type === 'unordered' ? UnorderedList : OrderedList}"   native="{type === 'ordered-native'}"   {...$$restProps} >
function create_default_slot$2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*children*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*children, type, Array*/ 3) {
				each_value = /*children*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment$15(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	const switch_instance_spread_levels = [
		{
			native: /*type*/ ctx[1] === 'ordered-native'
		},
		/*$$restProps*/ ctx[2]
	];

	var switch_value = /*type*/ ctx[1] === 'unordered'
	? UnorderedList$1
	: OrderedList$1;

	function switch_props(ctx) {
		let switch_instance_props = {
			$$slots: { default: [create_default_slot$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = (dirty & /*type, $$restProps*/ 6)
			? get_spread_update(switch_instance_spread_levels, [
					dirty & /*type*/ 2 && {
						native: /*type*/ ctx[1] === 'ordered-native'
					},
					dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
				])
			: {};

			if (dirty & /*$$scope, children, type*/ 67) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (switch_value !== (switch_value = /*type*/ ctx[1] === 'unordered'
			? UnorderedList$1
			: OrderedList$1)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance$15($$self, $$props, $$invalidate) {
	const omit_props_names = ["children","type"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { children = [] } = $$props;
	let { type = "unordered" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('children' in $$new_props) $$invalidate(0, children = $$new_props.children);
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
	};

	return [children, type, $$restProps];
}

class RecursiveList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$15, create_fragment$15, safe_not_equal, { children: 0, type: 1 });
	}
}

var RecursiveList$1 = RecursiveList;

/* src/Select/SelectSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block$u(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$14(ctx) {
	let div2;
	let t;
	let div1;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$u();
	let div2_levels = [/*$$restProps*/ ctx[1]];
	let div2_data = {};

	for (let i = 0; i < div2_levels.length; i += 1) {
		div2_data = assign(div2_data, div2_levels[i]);
	}

	return {
		c() {
			div2 = element("div");
			if (if_block) if_block.c();
			t = space();
			div1 = element("div");
			div0 = element("div");
			toggle_class(div0, "bx--select-input", true);
			toggle_class(div1, "bx--select", true);
			toggle_class(div1, "bx--skeleton", true);
			set_attributes(div2, div2_data);
			toggle_class(div2, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block) if_block.m(div2, null);
			append(div2, t);
			append(div2, div1);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div2, "click", /*click_handler*/ ctx[2]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$u();
					if_block.c();
					if_block.m(div2, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div2, div2_data = get_spread_update(div2_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div2, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$14($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SelectSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$14, create_fragment$14, safe_not_equal, { hideLabel: 0 });
	}
}

var SelectSkeleton$1 = SelectSkeleton;

/* src/Select/SelectItemGroup.svelte generated by Svelte v3.49.0 */

function create_fragment$13(ctx) {
	let optgroup;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let optgroup_levels = [
		{ label: /*label*/ ctx[1] },
		{ disabled: /*disabled*/ ctx[0] },
		/*$$restProps*/ ctx[2]
	];

	let optgroup_data = {};

	for (let i = 0; i < optgroup_levels.length; i += 1) {
		optgroup_data = assign(optgroup_data, optgroup_levels[i]);
	}

	return {
		c() {
			optgroup = element("optgroup");
			if (default_slot) default_slot.c();
			set_attributes(optgroup, optgroup_data);
			toggle_class(optgroup, "bx--select-optgroup", true);
		},
		m(target, anchor) {
			insert(target, optgroup, anchor);

			if (default_slot) {
				default_slot.m(optgroup, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(optgroup, optgroup_data = get_spread_update(optgroup_levels, [
				(!current || dirty & /*label*/ 2) && { label: /*label*/ ctx[1] },
				(!current || dirty & /*disabled*/ 1) && { disabled: /*disabled*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(optgroup, "bx--select-optgroup", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(optgroup);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$13($$self, $$props, $$invalidate) {
	const omit_props_names = ["disabled","label"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { disabled = false } = $$props;
	let { label = "Provide label" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('disabled' in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ('label' in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [disabled, label, $$restProps, $$scope, slots];
}

class SelectItemGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$13, create_fragment$13, safe_not_equal, { disabled: 0, label: 1 });
	}
}

var SelectItemGroup$1 = SelectItemGroup;

/* src/SkeletonPlaceholder/SkeletonPlaceholder.svelte generated by Svelte v3.49.0 */

function create_fragment$12(ctx) {
	let div;
	let mounted;
	let dispose;
	let div_levels = [/*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			set_attributes(div, div_data);
			toggle_class(div, "bx--skeleton__placeholder", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[1]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[2]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[3]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--skeleton__placeholder", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$12($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SkeletonPlaceholder extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$12, create_fragment$12, safe_not_equal, {});
	}
}

var SkeletonPlaceholder$1 = SkeletonPlaceholder;

/* src/Slider/Slider.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$8 = dirty => ({});
const get_labelText_slot_context$8 = ctx => ({});

// (148:27)        
function fallback_block$m(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 65536) set_data(t, /*labelText*/ ctx[16]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$11(ctx) {
	let div5;
	let label;
	let t0;
	let div4;
	let span0;
	let t1_value = (/*minLabel*/ ctx[5] || /*min*/ ctx[4]) + "";
	let t1;
	let t2;
	let div3;
	let div0;
	let t3;
	let div1;
	let t4;
	let div2;
	let t5;
	let input0;
	let div3_style_value;
	let t6;
	let span1;
	let t7_value = (/*maxLabel*/ ctx[3] || /*max*/ ctx[2]) + "";
	let t7;
	let t8;
	let input1;
	let input1_type_value;
	let input1_style_value;
	let input1_id_value;
	let input1_aria_labelledby_value;
	let input1_aria_label_value;
	let input1_data_invalid_value;
	let input1_aria_invalid_value;
	let div4_style_value;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[31].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[30], get_labelText_slot_context$8);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$m(ctx);
	let div5_levels = [/*$$restProps*/ ctx[26]];
	let div5_data = {};

	for (let i = 0; i < div5_levels.length; i += 1) {
		div5_data = assign(div5_data, div5_levels[i]);
	}

	return {
		c() {
			div5 = element("div");
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t0 = space();
			div4 = element("div");
			span0 = element("span");
			t1 = text(t1_value);
			t2 = space();
			div3 = element("div");
			div0 = element("div");
			t3 = space();
			div1 = element("div");
			t4 = space();
			div2 = element("div");
			t5 = space();
			input0 = element("input");
			t6 = space();
			span1 = element("span");
			t7 = text(t7_value);
			t8 = space();
			input1 = element("input");
			attr(label, "for", /*id*/ ctx[14]);
			attr(label, "id", /*labelId*/ ctx[21]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			toggle_class(span0, "bx--slider__range-label", true);
			attr(div0, "role", "slider");
			attr(div0, "tabindex", "0");
			set_style(div0, "left", /*left*/ ctx[20] + "%");
			attr(div0, "aria-valuemax", /*max*/ ctx[2]);
			attr(div0, "aria-valuemin", /*min*/ ctx[4]);
			attr(div0, "aria-valuenow", /*value*/ ctx[0]);
			attr(div0, "aria-labelledby", /*labelId*/ ctx[21]);
			attr(div0, "id", /*id*/ ctx[14]);
			toggle_class(div0, "bx--slider__thumb", true);
			toggle_class(div1, "bx--slider__track", true);
			set_style(div2, "transform", "translate(0, -50%) scaleX(" + /*left*/ ctx[20] / 100 + ")");
			toggle_class(div2, "bx--slider__filled-track", true);
			attr(input0, "type", "hidden");
			attr(input0, "name", /*name*/ ctx[17]);
			input0.value = /*value*/ ctx[0];
			input0.required = /*required*/ ctx[8];
			attr(input0, "min", /*min*/ ctx[4]);
			attr(input0, "max", /*max*/ ctx[2]);
			attr(input0, "step", /*step*/ ctx[6]);
			toggle_class(input0, "bx--slider__input", true);
			attr(div3, "role", "presentation");
			attr(div3, "tabindex", "-1");
			attr(div3, "style", div3_style_value = /*fullWidth*/ ctx[13] ? 'max-width: none' : undefined);
			toggle_class(div3, "bx--slider", true);
			toggle_class(div3, "bx--slider--disabled", /*disabled*/ ctx[10]);
			toggle_class(span1, "bx--slider__range-label", true);

			attr(input1, "type", input1_type_value = /*hideTextInput*/ ctx[12]
			? 'hidden'
			: /*inputType*/ ctx[9]);

			attr(input1, "style", input1_style_value = /*hideTextInput*/ ctx[12] ? 'display: none' : undefined);
			attr(input1, "id", input1_id_value = "input-" + /*id*/ ctx[14]);
			attr(input1, "name", /*name*/ ctx[17]);
			input1.value = /*value*/ ctx[0];

			attr(input1, "aria-labelledby", input1_aria_labelledby_value = /*$$props*/ ctx[27]['aria-label']
			? undefined
			: /*labelId*/ ctx[21]);

			attr(input1, "aria-label", input1_aria_label_value = /*$$props*/ ctx[27]['aria-label'] || 'Slider number input');
			input1.disabled = /*disabled*/ ctx[10];
			input1.required = /*required*/ ctx[8];
			attr(input1, "min", /*min*/ ctx[4]);
			attr(input1, "max", /*max*/ ctx[2]);
			attr(input1, "step", /*step*/ ctx[6]);
			attr(input1, "data-invalid", input1_data_invalid_value = /*invalid*/ ctx[15] || null);
			attr(input1, "aria-invalid", input1_aria_invalid_value = /*invalid*/ ctx[15] || null);
			toggle_class(input1, "bx--text-input", true);
			toggle_class(input1, "bx--slider-text-input", true);
			toggle_class(input1, "bx--text-input--light", /*light*/ ctx[11]);
			toggle_class(input1, "bx--text-input--invalid", /*invalid*/ ctx[15]);
			attr(div4, "style", div4_style_value = /*fullWidth*/ ctx[13] ? 'width: 100%' : undefined);
			toggle_class(div4, "bx--slider-container", true);
			set_attributes(div5, div5_data);
			toggle_class(div5, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div5, t0);
			append(div5, div4);
			append(div4, span0);
			append(span0, t1);
			append(div4, t2);
			append(div4, div3);
			append(div3, div0);
			append(div3, t3);
			append(div3, div1);
			/*div1_binding*/ ctx[36](div1);
			append(div3, t4);
			append(div3, div2);
			append(div3, t5);
			append(div3, input0);
			/*div3_binding*/ ctx[37](div3);
			append(div4, t6);
			append(div4, span1);
			append(span1, t7);
			append(div4, t8);
			append(div4, input1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mousemove", /*move*/ ctx[25]),
					listen(window, "touchmove", /*move*/ ctx[25]),
					listen(window, "mouseup", /*stopHolding*/ ctx[24]),
					listen(window, "touchend", /*stopHolding*/ ctx[24]),
					listen(window, "touchcancel", /*stopHolding*/ ctx[24]),
					listen(div3, "mousedown", /*startDragging*/ ctx[22]),
					listen(div3, "mousedown", /*startHolding*/ ctx[23]),
					listen(div3, "touchstart", /*startHolding*/ ctx[23], { passive: true }),
					listen(div3, "keydown", /*keydown_handler*/ ctx[38]),
					listen(input1, "change", /*change_handler*/ ctx[39]),
					listen(div5, "click", /*click_handler*/ ctx[32]),
					listen(div5, "mouseover", /*mouseover_handler*/ ctx[33]),
					listen(div5, "mouseenter", /*mouseenter_handler*/ ctx[34]),
					listen(div5, "mouseleave", /*mouseleave_handler*/ ctx[35])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 1073741824)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[30],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[30])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[30], dirty, get_labelText_slot_changes$8),
						get_labelText_slot_context$8
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 65536)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(label, "for", /*id*/ ctx[14]);
			}

			if (!current || dirty[0] & /*labelId*/ 2097152) {
				attr(label, "id", /*labelId*/ ctx[21]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			}

			if ((!current || dirty[0] & /*minLabel, min*/ 48) && t1_value !== (t1_value = (/*minLabel*/ ctx[5] || /*min*/ ctx[4]) + "")) set_data(t1, t1_value);

			if (!current || dirty[0] & /*left*/ 1048576) {
				set_style(div0, "left", /*left*/ ctx[20] + "%");
			}

			if (!current || dirty[0] & /*max*/ 4) {
				attr(div0, "aria-valuemax", /*max*/ ctx[2]);
			}

			if (!current || dirty[0] & /*min*/ 16) {
				attr(div0, "aria-valuemin", /*min*/ ctx[4]);
			}

			if (!current || dirty[0] & /*value*/ 1) {
				attr(div0, "aria-valuenow", /*value*/ ctx[0]);
			}

			if (!current || dirty[0] & /*labelId*/ 2097152) {
				attr(div0, "aria-labelledby", /*labelId*/ ctx[21]);
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(div0, "id", /*id*/ ctx[14]);
			}

			if (!current || dirty[0] & /*left*/ 1048576) {
				set_style(div2, "transform", "translate(0, -50%) scaleX(" + /*left*/ ctx[20] / 100 + ")");
			}

			if (!current || dirty[0] & /*name*/ 131072) {
				attr(input0, "name", /*name*/ ctx[17]);
			}

			if (!current || dirty[0] & /*value*/ 1) {
				input0.value = /*value*/ ctx[0];
			}

			if (!current || dirty[0] & /*required*/ 256) {
				input0.required = /*required*/ ctx[8];
			}

			if (!current || dirty[0] & /*min*/ 16) {
				attr(input0, "min", /*min*/ ctx[4]);
			}

			if (!current || dirty[0] & /*max*/ 4) {
				attr(input0, "max", /*max*/ ctx[2]);
			}

			if (!current || dirty[0] & /*step*/ 64) {
				attr(input0, "step", /*step*/ ctx[6]);
			}

			if (!current || dirty[0] & /*fullWidth*/ 8192 && div3_style_value !== (div3_style_value = /*fullWidth*/ ctx[13] ? 'max-width: none' : undefined)) {
				attr(div3, "style", div3_style_value);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div3, "bx--slider--disabled", /*disabled*/ ctx[10]);
			}

			if ((!current || dirty[0] & /*maxLabel, max*/ 12) && t7_value !== (t7_value = (/*maxLabel*/ ctx[3] || /*max*/ ctx[2]) + "")) set_data(t7, t7_value);

			if (!current || dirty[0] & /*hideTextInput, inputType*/ 4608 && input1_type_value !== (input1_type_value = /*hideTextInput*/ ctx[12]
			? 'hidden'
			: /*inputType*/ ctx[9])) {
				attr(input1, "type", input1_type_value);
			}

			if (!current || dirty[0] & /*hideTextInput*/ 4096 && input1_style_value !== (input1_style_value = /*hideTextInput*/ ctx[12] ? 'display: none' : undefined)) {
				attr(input1, "style", input1_style_value);
			}

			if (!current || dirty[0] & /*id*/ 16384 && input1_id_value !== (input1_id_value = "input-" + /*id*/ ctx[14])) {
				attr(input1, "id", input1_id_value);
			}

			if (!current || dirty[0] & /*name*/ 131072) {
				attr(input1, "name", /*name*/ ctx[17]);
			}

			if (!current || dirty[0] & /*value*/ 1 && input1.value !== /*value*/ ctx[0]) {
				input1.value = /*value*/ ctx[0];
			}

			if (!current || dirty[0] & /*$$props, labelId*/ 136314880 && input1_aria_labelledby_value !== (input1_aria_labelledby_value = /*$$props*/ ctx[27]['aria-label']
			? undefined
			: /*labelId*/ ctx[21])) {
				attr(input1, "aria-labelledby", input1_aria_labelledby_value);
			}

			if (!current || dirty[0] & /*$$props*/ 134217728 && input1_aria_label_value !== (input1_aria_label_value = /*$$props*/ ctx[27]['aria-label'] || 'Slider number input')) {
				attr(input1, "aria-label", input1_aria_label_value);
			}

			if (!current || dirty[0] & /*disabled*/ 1024) {
				input1.disabled = /*disabled*/ ctx[10];
			}

			if (!current || dirty[0] & /*required*/ 256) {
				input1.required = /*required*/ ctx[8];
			}

			if (!current || dirty[0] & /*min*/ 16) {
				attr(input1, "min", /*min*/ ctx[4]);
			}

			if (!current || dirty[0] & /*max*/ 4) {
				attr(input1, "max", /*max*/ ctx[2]);
			}

			if (!current || dirty[0] & /*step*/ 64) {
				attr(input1, "step", /*step*/ ctx[6]);
			}

			if (!current || dirty[0] & /*invalid*/ 32768 && input1_data_invalid_value !== (input1_data_invalid_value = /*invalid*/ ctx[15] || null)) {
				attr(input1, "data-invalid", input1_data_invalid_value);
			}

			if (!current || dirty[0] & /*invalid*/ 32768 && input1_aria_invalid_value !== (input1_aria_invalid_value = /*invalid*/ ctx[15] || null)) {
				attr(input1, "aria-invalid", input1_aria_invalid_value);
			}

			if (dirty[0] & /*light*/ 2048) {
				toggle_class(input1, "bx--text-input--light", /*light*/ ctx[11]);
			}

			if (dirty[0] & /*invalid*/ 32768) {
				toggle_class(input1, "bx--text-input--invalid", /*invalid*/ ctx[15]);
			}

			if (!current || dirty[0] & /*fullWidth*/ 8192 && div4_style_value !== (div4_style_value = /*fullWidth*/ ctx[13] ? 'width: 100%' : undefined)) {
				attr(div4, "style", div4_style_value);
			}

			set_attributes(div5, div5_data = get_spread_update(div5_levels, [dirty[0] & /*$$restProps*/ 67108864 && /*$$restProps*/ ctx[26]]));
			toggle_class(div5, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			/*div1_binding*/ ctx[36](null);
			/*div3_binding*/ ctx[37](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$11($$self, $$props, $$invalidate) {
	let labelId;
	let range;
	let left;

	const omit_props_names = [
		"value","max","maxLabel","min","minLabel","step","stepMultiplier","required","inputType","disabled","light","hideTextInput","fullWidth","id","invalid","labelText","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = 0 } = $$props;
	let { max = 100 } = $$props;
	let { maxLabel = "" } = $$props;
	let { min = 0 } = $$props;
	let { minLabel = "" } = $$props;
	let { step = 1 } = $$props;
	let { stepMultiplier = 4 } = $$props;
	let { required = false } = $$props;
	let { inputType = "number" } = $$props;
	let { disabled = false } = $$props;
	let { light = false } = $$props;
	let { hideTextInput = false } = $$props;
	let { fullWidth = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { invalid = false } = $$props;
	let { labelText = "" } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	let trackRef = null;
	let dragging = false;
	let holding = false;

	function startDragging() {
		$$invalidate(28, dragging = true);
	}

	function startHolding() {
		$$invalidate(29, holding = true);
	}

	function stopHolding() {
		$$invalidate(29, holding = false);
		$$invalidate(28, dragging = false);
	}

	function move() {
		if (holding) {
			startDragging();
		}
	}

	function calcValue(e) {
		if (disabled) return;
		const offsetX = e.touches ? e.touches[0].clientX : e.clientX;
		const { left, width } = trackRef.getBoundingClientRect();
		let nextValue = min + Math.round((max - min) * ((offsetX - left) / width) / step) * step;

		if (nextValue <= min) {
			nextValue = min;
		} else if (nextValue >= max) {
			nextValue = max;
		}

		$$invalidate(0, value = nextValue);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			trackRef = $$value;
			$$invalidate(19, trackRef);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler = ({ shiftKey, key }) => {
		const keys = {
			ArrowDown: -1,
			ArrowLeft: -1,
			ArrowRight: 1,
			ArrowUp: 1
		};

		if (keys[key]) {
			$$invalidate(0, value += step * (shiftKey ? range / step / stepMultiplier : 1) * keys[key]);
		}
	};

	const change_handler = ({ target }) => {
		$$invalidate(0, value = Number(target.value));
	};

	$$self.$$set = $$new_props => {
		$$invalidate(27, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(26, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('max' in $$new_props) $$invalidate(2, max = $$new_props.max);
		if ('maxLabel' in $$new_props) $$invalidate(3, maxLabel = $$new_props.maxLabel);
		if ('min' in $$new_props) $$invalidate(4, min = $$new_props.min);
		if ('minLabel' in $$new_props) $$invalidate(5, minLabel = $$new_props.minLabel);
		if ('step' in $$new_props) $$invalidate(6, step = $$new_props.step);
		if ('stepMultiplier' in $$new_props) $$invalidate(7, stepMultiplier = $$new_props.stepMultiplier);
		if ('required' in $$new_props) $$invalidate(8, required = $$new_props.required);
		if ('inputType' in $$new_props) $$invalidate(9, inputType = $$new_props.inputType);
		if ('disabled' in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
		if ('light' in $$new_props) $$invalidate(11, light = $$new_props.light);
		if ('hideTextInput' in $$new_props) $$invalidate(12, hideTextInput = $$new_props.hideTextInput);
		if ('fullWidth' in $$new_props) $$invalidate(13, fullWidth = $$new_props.fullWidth);
		if ('id' in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ('invalid' in $$new_props) $$invalidate(15, invalid = $$new_props.invalid);
		if ('labelText' in $$new_props) $$invalidate(16, labelText = $$new_props.labelText);
		if ('name' in $$new_props) $$invalidate(17, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(30, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 16384) {
			$$invalidate(21, labelId = `label-${id}`);
		}

		if ($$self.$$.dirty[0] & /*max, min*/ 20) {
			$$invalidate(18, range = max - min);
		}

		if ($$self.$$.dirty[0] & /*value, min, max, dragging, holding, disabled*/ 805307413) {
			{
				if (value <= min) {
					$$invalidate(0, value = min);
				} else if (value >= max) {
					$$invalidate(0, value = max);
				}

				if (dragging) {
					calcValue(event);
					$$invalidate(28, dragging = false);
				}

				if (!holding && !disabled) {
					dispatch("change", value);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*value, min, range*/ 262161) {
			$$invalidate(20, left = (value - min) / range * 100);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		ref,
		max,
		maxLabel,
		min,
		minLabel,
		step,
		stepMultiplier,
		required,
		inputType,
		disabled,
		light,
		hideTextInput,
		fullWidth,
		id,
		invalid,
		labelText,
		name,
		range,
		trackRef,
		left,
		labelId,
		startDragging,
		startHolding,
		stopHolding,
		move,
		$$restProps,
		$$props,
		dragging,
		holding,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div1_binding,
		div3_binding,
		keydown_handler,
		change_handler
	];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$11,
			create_fragment$11,
			safe_not_equal,
			{
				value: 0,
				max: 2,
				maxLabel: 3,
				min: 4,
				minLabel: 5,
				step: 6,
				stepMultiplier: 7,
				required: 8,
				inputType: 9,
				disabled: 10,
				light: 11,
				hideTextInput: 12,
				fullWidth: 13,
				id: 14,
				invalid: 15,
				labelText: 16,
				name: 17,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var Slider$1 = Slider;

/* src/Slider/SliderSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block$t(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$10(ctx) {
	let div5;
	let t0;
	let div4;
	let span0;
	let t1;
	let div3;
	let div0;
	let t2;
	let div1;
	let t3;
	let div2;
	let t4;
	let span1;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$t();
	let div5_levels = [/*$$restProps*/ ctx[1]];
	let div5_data = {};

	for (let i = 0; i < div5_levels.length; i += 1) {
		div5_data = assign(div5_data, div5_levels[i]);
	}

	return {
		c() {
			div5 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div4 = element("div");
			span0 = element("span");
			t1 = space();
			div3 = element("div");
			div0 = element("div");
			t2 = space();
			div1 = element("div");
			t3 = space();
			div2 = element("div");
			t4 = space();
			span1 = element("span");
			toggle_class(span0, "bx--slider__range-label", true);
			toggle_class(div0, "bx--slider__track", true);
			toggle_class(div1, "bx--slider__filled-track", true);
			toggle_class(div2, "bx--slider__thumb", true);
			toggle_class(div3, "bx--slider", true);
			toggle_class(span1, "bx--slider__range-label", true);
			toggle_class(div4, "bx--slider-container", true);
			toggle_class(div4, "bx--skeleton", true);
			set_attributes(div5, div5_data);
			toggle_class(div5, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			if (if_block) if_block.m(div5, null);
			append(div5, t0);
			append(div5, div4);
			append(div4, span0);
			append(div4, t1);
			append(div4, div3);
			append(div3, div0);
			append(div3, t2);
			append(div3, div1);
			append(div3, t3);
			append(div3, div2);
			append(div4, t4);
			append(div4, span1);

			if (!mounted) {
				dispose = [
					listen(div5, "click", /*click_handler*/ ctx[2]),
					listen(div5, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div5, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div5, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$t();
					if_block.c();
					if_block.m(div5, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div5, div5_data = get_spread_update(div5_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div5, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$10($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class SliderSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$10, create_fragment$10, safe_not_equal, { hideLabel: 0 });
	}
}

var SliderSkeleton$1 = SliderSkeleton;

/* src/StructuredList/StructuredList.svelte generated by Svelte v3.49.0 */

function create_fragment$$(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	let div_levels = [{ role: "table" }, /*$$restProps*/ ctx[4]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list", true);
			toggle_class(div, "bx--structured-list--selection", /*selection*/ ctx[2]);
			toggle_class(div, "bx--structured-list--condensed", /*condensed*/ ctx[0]);
			toggle_class(div, "bx--structured-list--flush", /*flush*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[9]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[10]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[11]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "table" }, dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]]));
			toggle_class(div, "bx--structured-list", true);
			toggle_class(div, "bx--structured-list--selection", /*selection*/ ctx[2]);
			toggle_class(div, "bx--structured-list--condensed", /*condensed*/ ctx[0]);
			toggle_class(div, "bx--structured-list--flush", /*flush*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$$($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","condensed","flush","selection"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { condensed = false } = $$props;
	let { flush = false } = $$props;
	let { selection = false } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(6, $selectedValue = value));

	setContext("StructuredListWrapper", {
		selectedValue,
		update: value => {
			selectedValue.set(value);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(5, selected = $$new_props.selected);
		if ('condensed' in $$new_props) $$invalidate(0, condensed = $$new_props.condensed);
		if ('flush' in $$new_props) $$invalidate(1, flush = $$new_props.flush);
		if ('selection' in $$new_props) $$invalidate(2, selection = $$new_props.selection);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 64) {
			$$invalidate(5, selected = $selectedValue);
		}

		if ($$self.$$.dirty & /*$selectedValue*/ 64) {
			dispatch("change", $selectedValue);
		}
	};

	return [
		condensed,
		flush,
		selection,
		selectedValue,
		$$restProps,
		selected,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredList extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
			selected: 5,
			condensed: 0,
			flush: 1,
			selection: 2
		});
	}
}

var StructuredList$1 = StructuredList;

/* src/StructuredList/StructuredListSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[8] = i;
	return child_ctx;
}

// (27:4) {#each Array.from({ length: rows }, (_, i) => i) as row, i (row)}
function create_each_block$4(key_1, ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;

	return {
		key: key_1,
		first: null,
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			t2 = space();
			toggle_class(div0, "bx--structured-list-td", true);
			toggle_class(div1, "bx--structured-list-td", true);
			toggle_class(div2, "bx--structured-list-td", true);
			toggle_class(div3, "bx--structured-list-row", true);
			this.first = div3;
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div3, t1);
			append(div3, div2);
			append(div3, t2);
		},
		p(new_ctx, dirty) {
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

function create_fragment$_(ctx) {
	let div6;
	let div4;
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;
	let t2;
	let div5;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*rows*/ ctx[0] }, func$1);
	const get_key = ctx => /*row*/ ctx[6];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$4(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$4(key));
	}

	let div6_levels = [/*$$restProps*/ ctx[1]];
	let div6_data = {};

	for (let i = 0; i < div6_levels.length; i += 1) {
		div6_data = assign(div6_data, div6_levels[i]);
	}

	return {
		c() {
			div6 = element("div");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<span></span>`;
			t0 = space();
			div1 = element("div");
			div1.innerHTML = `<span></span>`;
			t1 = space();
			div2 = element("div");
			div2.innerHTML = `<span></span>`;
			t2 = space();
			div5 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(div0, "bx--structured-list-th", true);
			toggle_class(div1, "bx--structured-list-th", true);
			toggle_class(div2, "bx--structured-list-th", true);
			toggle_class(div3, "bx--structured-list-row", true);
			toggle_class(div3, "bx--structured-list-row--header-row", true);
			toggle_class(div4, "bx--structured-list-thead", true);
			toggle_class(div5, "bx--structured-list-tbody", true);
			set_attributes(div6, div6_data);
			toggle_class(div6, "bx--skeleton", true);
			toggle_class(div6, "bx--structured-list", true);
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div4);
			append(div4, div3);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div3, t1);
			append(div3, div2);
			append(div6, t2);
			append(div6, div5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div5, null);
			}

			if (!mounted) {
				dispose = [
					listen(div6, "click", /*click_handler*/ ctx[2]),
					listen(div6, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div6, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div6, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*rows*/ 1) {
				each_value = Array.from({ length: /*rows*/ ctx[0] }, func$1);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div5, destroy_block, create_each_block$4, null, get_each_context$4);
			}

			set_attributes(div6, div6_data = get_spread_update(div6_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div6, "bx--skeleton", true);
			toggle_class(div6, "bx--structured-list", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div6);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

const func$1 = (_, i) => i;

function instance$_($$self, $$props, $$invalidate) {
	const omit_props_names = ["rows"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { rows = 5 } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('rows' in $$new_props) $$invalidate(0, rows = $$new_props.rows);
	};

	return [
		rows,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$_, create_fragment$_, safe_not_equal, { rows: 0 });
	}
}

var StructuredListSkeleton$1 = StructuredListSkeleton;

/* src/StructuredList/StructuredListBody.svelte generated by Svelte v3.49.0 */

function create_fragment$Z(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [{ role: "rowgroup" }, /*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-tbody", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "rowgroup" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--structured-list-tbody", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Z($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListBody extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {});
	}
}

var StructuredListBody$1 = StructuredListBody;

/* src/StructuredList/StructuredListHead.svelte generated by Svelte v3.49.0 */

function create_fragment$Y(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	let div_levels = [{ role: "rowgroup" }, /*$$restProps*/ ctx[0]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-thead", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "rowgroup" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(div, "bx--structured-list-thead", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Y($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(1, $$scope = $$new_props.$$scope);
	};

	return [
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListHead extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {});
	}
}

var StructuredListHead$1 = StructuredListHead;

/* src/StructuredList/StructuredListCell.svelte generated by Svelte v3.49.0 */

function create_fragment$X(ctx) {
	let div;
	let div_role_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let div_levels = [
		{
			role: div_role_value = /*head*/ ctx[0] ? 'columnheader' : 'cell'
		},
		/*$$restProps*/ ctx[2]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-th", /*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-td", !/*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-content--nowrap", /*noWrap*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[5]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[6]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[7]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*head*/ 1 && div_role_value !== (div_role_value = /*head*/ ctx[0] ? 'columnheader' : 'cell')) && { role: div_role_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(div, "bx--structured-list-th", /*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-td", !/*head*/ ctx[0]);
			toggle_class(div, "bx--structured-list-content--nowrap", /*noWrap*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$X($$self, $$props, $$invalidate) {
	const omit_props_names = ["head","noWrap"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { head = false } = $$props;
	let { noWrap = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('head' in $$new_props) $$invalidate(0, head = $$new_props.head);
		if ('noWrap' in $$new_props) $$invalidate(1, noWrap = $$new_props.noWrap);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [
		head,
		noWrap,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class StructuredListCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$X, create_fragment$X, safe_not_equal, { head: 0, noWrap: 1 });
	}
}

var StructuredListCell$1 = StructuredListCell;

/* src/StructuredList/StructuredListRow.svelte generated by Svelte v3.49.0 */

function create_else_block$5(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let div_levels = [{ role: "row" }, /*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--structured-list-row", true);
			toggle_class(div, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_1*/ ctx[11]),
					listen(div, "mouseover", /*mouseover_handler_1*/ ctx[12]),
					listen(div, "mouseenter", /*mouseenter_handler_1*/ ctx[13]),
					listen(div, "mouseleave", /*mouseleave_handler_1*/ ctx[14])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [{ role: "row" }, dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--structured-list-row", true);
			toggle_class(div, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (13:0) {#if label}
function create_if_block$s(ctx) {
	let label_1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	let label_1_levels = [{ tabindex: /*tabindex*/ ctx[2] }, /*$$restProps*/ ctx[3]];
	let label_1_data = {};

	for (let i = 0; i < label_1_levels.length; i += 1) {
		label_1_data = assign(label_1_data, label_1_levels[i]);
	}

	return {
		c() {
			label_1 = element("label");
			if (default_slot) default_slot.c();
			set_attributes(label_1, label_1_data);
			toggle_class(label_1, "bx--structured-list-row", true);
			toggle_class(label_1, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, label_1, anchor);

			if (default_slot) {
				default_slot.m(label_1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label_1, "click", /*click_handler*/ ctx[6]),
					listen(label_1, "mouseover", /*mouseover_handler*/ ctx[7]),
					listen(label_1, "mouseenter", /*mouseenter_handler*/ ctx[8]),
					listen(label_1, "mouseleave", /*mouseleave_handler*/ ctx[9]),
					listen(label_1, "keydown", /*keydown_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(label_1, label_1_data = get_spread_update(label_1_levels, [
				(!current || dirty & /*tabindex*/ 4) && { tabindex: /*tabindex*/ ctx[2] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(label_1, "bx--structured-list-row", true);
			toggle_class(label_1, "bx--structured-list-row--header-row", /*head*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label_1);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$W(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$s, create_else_block$5];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*label*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$W($$self, $$props, $$invalidate) {
	const omit_props_names = ["head","label","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { head = false } = $$props;
	let { label = false } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('head' in $$new_props) $$invalidate(0, head = $$new_props.head);
		if ('label' in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ('tabindex' in $$new_props) $$invalidate(2, tabindex = $$new_props.tabindex);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		head,
		label,
		tabindex,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1
	];
}

class StructuredListRow extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$W, create_fragment$W, safe_not_equal, { head: 0, label: 1, tabindex: 2 });
	}
}

var StructuredListRow$1 = StructuredListRow;

/* src/StructuredList/StructuredListInput.svelte generated by Svelte v3.49.0 */

function create_fragment$V(ctx) {
	let input;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "radio" },
		{ tabindex: "-1" },
		{ checked: /*checked*/ ctx[0] },
		{ id: /*id*/ ctx[4] },
		{ name: /*name*/ ctx[5] },
		{ title: /*title*/ ctx[2] },
		{ value: /*value*/ ctx[3] },
		/*$$restProps*/ ctx[8]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	return {
		c() {
			input = element("input");
			set_attributes(input, input_data);
			toggle_class(input, "bx--structured-list-input", true);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[10](input);

			if (!mounted) {
				dispose = listen(input, "change", /*change_handler*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "radio" },
				{ tabindex: "-1" },
				dirty & /*checked*/ 1 && { checked: /*checked*/ ctx[0] },
				dirty & /*id*/ 16 && { id: /*id*/ ctx[4] },
				dirty & /*name*/ 32 && { name: /*name*/ ctx[5] },
				dirty & /*title*/ 4 && { title: /*title*/ ctx[2] },
				dirty & /*value*/ 8 && { value: /*value*/ ctx[3] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(input, "bx--structured-list-input", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$V($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","title","value","id","name","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { checked = false } = $$props;
	let { title = "title" } = $$props;
	let { value = "value" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const { selectedValue, update } = getContext("StructuredListWrapper");
	component_subscribe($$self, selectedValue, value => $$invalidate(9, $selectedValue = value));

	if (checked) {
		update(value);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler = () => {
		update(value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('title' in $$new_props) $$invalidate(2, title = $$new_props.title);
		if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ('id' in $$new_props) $$invalidate(4, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(5, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue, value*/ 520) {
			$$invalidate(0, checked = $selectedValue === value);
		}
	};

	return [
		checked,
		ref,
		title,
		value,
		id,
		name,
		selectedValue,
		update,
		$$restProps,
		$selectedValue,
		input_binding,
		change_handler
	];
}

class StructuredListInput extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$V, create_fragment$V, safe_not_equal, {
			checked: 0,
			title: 2,
			value: 3,
			id: 4,
			name: 5,
			ref: 1
		});
	}
}

var StructuredListInput$1 = StructuredListInput;

/* src/Tabs/Tabs.svelte generated by Svelte v3.49.0 */
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});

// (150:6) {#if currentTab}
function create_if_block$r(ctx) {
	let t_value = /*currentTab*/ ctx[3].label + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*currentTab*/ 8 && t_value !== (t_value = /*currentTab*/ ctx[3].label + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$U(ctx) {
	let div1;
	let div0;
	let a;
	let t0;
	let chevrondown;
	let div0_aria_label_value;
	let t1;
	let ul;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block = /*currentTab*/ ctx[3] && create_if_block$r(ctx);

	chevrondown = new ChevronDown$1({
			props: {
				"aria-hidden": "true",
				title: /*iconDescription*/ ctx[1]
			}
		});

	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);
	let div1_levels = [{ role: "navigation" }, /*$$restProps*/ ctx[10]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	const content_slot_template = /*#slots*/ ctx[20].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[19], get_content_slot_context);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			a = element("a");
			if (if_block) if_block.c();
			t0 = space();
			create_component(chevrondown.$$.fragment);
			t1 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			t2 = space();
			if (content_slot) content_slot.c();
			attr(a, "tabindex", "-1");
			attr(a, "href", /*triggerHref*/ ctx[2]);
			toggle_class(a, "bx--tabs-trigger-text", true);
			attr(div0, "role", "listbox");
			attr(div0, "tabindex", "0");
			attr(div0, "aria-label", div0_aria_label_value = /*$$props*/ ctx[11]['aria-label'] || 'listbox');
			toggle_class(div0, "bx--tabs-trigger", true);
			attr(ul, "role", "tablist");
			toggle_class(ul, "bx--tabs__nav", true);
			toggle_class(ul, "bx--tabs__nav--hidden", /*dropdownHidden*/ ctx[5]);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--tabs", true);
			toggle_class(div1, "bx--tabs--container", /*type*/ ctx[0] === 'container');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, a);
			if (if_block) if_block.m(a, null);
			append(div0, t0);
			mount_component(chevrondown, div0, null);
			append(div1, t1);
			append(div1, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[26](ul);
			insert(target, t2, anchor);

			if (content_slot) {
				content_slot.m(target, anchor);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(a, "click", prevent_default(/*click_handler*/ ctx[22])),
					listen(a, "click", stop_propagation(prevent_default(/*click_handler_1*/ ctx[23]))),
					listen(div0, "click", /*click_handler_2*/ ctx[24]),
					listen(div0, "keypress", /*keypress_handler*/ ctx[21]),
					listen(div0, "keypress", /*keypress_handler_1*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*currentTab*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$r(ctx);
					if_block.c();
					if_block.m(a, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty[0] & /*triggerHref*/ 4) {
				attr(a, "href", /*triggerHref*/ ctx[2]);
			}

			const chevrondown_changes = {};
			if (dirty[0] & /*iconDescription*/ 2) chevrondown_changes.title = /*iconDescription*/ ctx[1];
			chevrondown.$set(chevrondown_changes);

			if (!current || dirty[0] & /*$$props*/ 2048 && div0_aria_label_value !== (div0_aria_label_value = /*$$props*/ ctx[11]['aria-label'] || 'listbox')) {
				attr(div0, "aria-label", div0_aria_label_value);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
						null
					);
				}
			}

			if (dirty[0] & /*dropdownHidden*/ 32) {
				toggle_class(ul, "bx--tabs__nav--hidden", /*dropdownHidden*/ ctx[5]);
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [
				{ role: "navigation" },
				dirty[0] & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div1, "bx--tabs", true);
			toggle_class(div1, "bx--tabs--container", /*type*/ ctx[0] === 'container');

			if (content_slot) {
				if (content_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[19], dirty, get_content_slot_changes),
						get_content_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown.$$.fragment, local);
			transition_in(default_slot, local);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown.$$.fragment, local);
			transition_out(default_slot, local);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			destroy_component(chevrondown);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[26](null);
			if (detaching) detach(t2);
			if (content_slot) content_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$U($$self, $$props, $$invalidate) {
	let currentTab;
	let currentContent;
	const omit_props_names = ["selected","type","autoWidth","iconDescription","triggerHref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedTab;
	let $content;
	let $tabs;
	let $tabsById;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = 0 } = $$props;
	let { type = "default" } = $$props;
	let { autoWidth = false } = $$props;
	let { iconDescription = "Show menu options" } = $$props;
	let { triggerHref = "#" } = $$props;
	const dispatch = createEventDispatcher();
	const tabs = writable([]);
	component_subscribe($$self, tabs, value => $$invalidate(18, $tabs = value));
	const tabsById = derived(tabs, _ => _.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	component_subscribe($$self, tabsById, value => $$invalidate(28, $tabsById = value));
	const useAutoWidth = writable(autoWidth);
	const selectedTab = writable(undefined);
	component_subscribe($$self, selectedTab, value => $$invalidate(16, $selectedTab = value));
	const content = writable([]);
	component_subscribe($$self, content, value => $$invalidate(17, $content = value));
	const contentById = derived(content, _ => _.reduce((a, c) => ({ ...a, [c.id]: c }), {}));
	const selectedContent = writable(undefined);
	let refTabList = null;

	setContext("Tabs", {
		tabs,
		contentById,
		selectedTab,
		selectedContent,
		useAutoWidth,
		add: data => {
			tabs.update(_ => [..._, { ...data, index: _.length }]);
		},
		addContent: data => {
			content.update(_ => [..._, { ...data, index: _.length }]);
		},
		update: id => {
			$$invalidate(14, currentIndex = $tabsById[id].index);
		},
		change: async direction => {
			let index = currentIndex + direction;

			if (index < 0) {
				index = $tabs.length - 1;
			} else if (index >= $tabs.length) {
				index = 0;
			}

			let disabled = $tabs[index].disabled;

			while (disabled) {
				index = index + direction;

				if (index < 0) {
					index = $tabs.length - 1;
				} else if (index >= $tabs.length) {
					index = 0;
				}

				disabled = $tabs[index].disabled;
			}

			$$invalidate(14, currentIndex = index);
			await tick();
			const activeTab = refTabList?.querySelectorAll("[role='tab']")[currentIndex];
			activeTab?.focus();
		}
	});

	afterUpdate(() => {
		$$invalidate(12, selected = currentIndex);

		if (prevIndex > -1 && prevIndex !== currentIndex) {
			dispatch("change", currentIndex);
		}

		prevIndex = currentIndex;
	});

	let dropdownHidden = true;
	let currentIndex = selected;
	let prevIndex = -1;

	function keypress_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(5, dropdownHidden = !dropdownHidden);
	};

	const click_handler_2 = () => {
		$$invalidate(5, dropdownHidden = !dropdownHidden);
	};

	const keypress_handler_1 = () => {
		$$invalidate(5, dropdownHidden = !dropdownHidden);
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refTabList = $$value;
			$$invalidate(4, refTabList);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(12, selected = $$new_props.selected);
		if ('type' in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ('autoWidth' in $$new_props) $$invalidate(13, autoWidth = $$new_props.autoWidth);
		if ('iconDescription' in $$new_props) $$invalidate(1, iconDescription = $$new_props.iconDescription);
		if ('triggerHref' in $$new_props) $$invalidate(2, triggerHref = $$new_props.triggerHref);
		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*selected*/ 4096) {
			$$invalidate(14, currentIndex = selected);
		}

		if ($$self.$$.dirty[0] & /*$tabs, currentIndex*/ 278528) {
			$$invalidate(3, currentTab = $tabs[currentIndex] || undefined);
		}

		if ($$self.$$.dirty[0] & /*$content, currentIndex*/ 147456) {
			$$invalidate(15, currentContent = $content[currentIndex] || undefined);
		}

		if ($$self.$$.dirty[0] & /*currentTab, currentContent*/ 32776) {
			{
				if (currentTab) {
					selectedTab.set(currentTab.id);
				}

				if (currentContent) {
					selectedContent.set(currentContent.id);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*$selectedTab*/ 65536) {
			if ($selectedTab) {
				$$invalidate(5, dropdownHidden = true);
			}
		}

		if ($$self.$$.dirty[0] & /*autoWidth*/ 8192) {
			useAutoWidth.set(autoWidth);
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		type,
		iconDescription,
		triggerHref,
		currentTab,
		refTabList,
		dropdownHidden,
		tabs,
		tabsById,
		selectedTab,
		content,
		$$restProps,
		$$props,
		selected,
		autoWidth,
		currentIndex,
		currentContent,
		$selectedTab,
		$content,
		$tabs,
		$$scope,
		slots,
		keypress_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		keypress_handler_1,
		ul_binding
	];
}

class Tabs extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$U,
			create_fragment$U,
			safe_not_equal,
			{
				selected: 12,
				type: 0,
				autoWidth: 13,
				iconDescription: 1,
				triggerHref: 2
			},
			null,
			[-1, -1]
		);
	}
}

var Tabs$1 = Tabs;

/* src/Tabs/Tab.svelte generated by Svelte v3.49.0 */

function fallback_block$l(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$T(ctx) {
	let li;
	let a;
	let a_tabindex_value;
	let a_style_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[15].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
	const default_slot_or_fallback = default_slot || fallback_block$l(ctx);
	let li_levels = [{ tabindex: "-1" }, { role: "presentation" }, /*$$restProps*/ ctx[12]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(a, "role", "tab");
			attr(a, "tabindex", a_tabindex_value = /*disabled*/ ctx[3] ? '-1' : /*tabindex*/ ctx[4]);
			attr(a, "aria-selected", /*selected*/ ctx[6]);
			attr(a, "aria-disabled", /*disabled*/ ctx[3]);
			attr(a, "id", /*id*/ ctx[5]);
			attr(a, "href", /*href*/ ctx[2]);
			attr(a, "style", a_style_value = /*$useAutoWidth*/ ctx[7] ? 'width: auto' : undefined);
			toggle_class(a, "bx--tabs__nav-link", true);
			set_attributes(li, li_data);
			toggle_class(li, "bx--tabs__nav-item", true);
			toggle_class(li, "bx--tabs__nav-item--disabled", /*disabled*/ ctx[3]);
			toggle_class(li, "bx--tabs__nav-item--selected", /*selected*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[20](a);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", prevent_default(/*click_handler*/ ctx[16])),
					listen(li, "click", prevent_default(/*click_handler_1*/ ctx[21])),
					listen(li, "mouseover", /*mouseover_handler*/ ctx[17]),
					listen(li, "mouseenter", /*mouseenter_handler*/ ctx[18]),
					listen(li, "mouseleave", /*mouseleave_handler*/ ctx[19]),
					listen(li, "keydown", /*keydown_handler*/ ctx[22])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[14],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*label*/ 2)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*disabled, tabindex*/ 24 && a_tabindex_value !== (a_tabindex_value = /*disabled*/ ctx[3] ? '-1' : /*tabindex*/ ctx[4])) {
				attr(a, "tabindex", a_tabindex_value);
			}

			if (!current || dirty & /*selected*/ 64) {
				attr(a, "aria-selected", /*selected*/ ctx[6]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				attr(a, "aria-disabled", /*disabled*/ ctx[3]);
			}

			if (!current || dirty & /*id*/ 32) {
				attr(a, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*href*/ 4) {
				attr(a, "href", /*href*/ ctx[2]);
			}

			if (!current || dirty & /*$useAutoWidth*/ 128 && a_style_value !== (a_style_value = /*$useAutoWidth*/ ctx[7] ? 'width: auto' : undefined)) {
				attr(a, "style", a_style_value);
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				{ tabindex: "-1" },
				{ role: "presentation" },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
			]));

			toggle_class(li, "bx--tabs__nav-item", true);
			toggle_class(li, "bx--tabs__nav-item--disabled", /*disabled*/ ctx[3]);
			toggle_class(li, "bx--tabs__nav-item--selected", /*selected*/ ctx[6]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$T($$self, $$props, $$invalidate) {
	let selected;
	const omit_props_names = ["label","href","disabled","tabindex","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedTab;
	let $useAutoWidth;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { label = "" } = $$props;
	let { href = "#" } = $$props;
	let { disabled = false } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const { selectedTab, useAutoWidth, add, update, change } = getContext("Tabs");
	component_subscribe($$self, selectedTab, value => $$invalidate(13, $selectedTab = value));
	component_subscribe($$self, useAutoWidth, value => $$invalidate(7, $useAutoWidth = value));
	add({ id, label, disabled });

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const click_handler_1 = () => {
		if (!disabled) {
			update(id);
		}
	};

	const keydown_handler = ({ key }) => {
		if (!disabled) {
			if (key === 'ArrowRight') {
				change(1);
			} else if (key === 'ArrowLeft') {
				change(-1);
			} else if (key === ' ' || key === 'Enter') {
				update(id);
			}
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('label' in $$new_props) $$invalidate(1, label = $$new_props.label);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('tabindex' in $$new_props) $$invalidate(4, tabindex = $$new_props.tabindex);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedTab, id*/ 8224) {
			$$invalidate(6, selected = $selectedTab === id);
		}
	};

	return [
		ref,
		label,
		href,
		disabled,
		tabindex,
		id,
		selected,
		$useAutoWidth,
		selectedTab,
		useAutoWidth,
		update,
		change,
		$$restProps,
		$selectedTab,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		a_binding,
		click_handler_1,
		keydown_handler
	];
}

class Tab extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$T, create_fragment$T, safe_not_equal, {
			label: 1,
			href: 2,
			disabled: 3,
			tabindex: 4,
			id: 5,
			ref: 0
		});
	}
}

var Tab$1 = Tab;

/* src/Tabs/TabContent.svelte generated by Svelte v3.49.0 */

function create_fragment$S(ctx) {
	let div;
	let div_aria_hidden_value;
	let div_hidden_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let div_levels = [
		{ role: "tabpanel" },
		{ "aria-labelledby": /*tabId*/ ctx[1] },
		{
			"aria-hidden": div_aria_hidden_value = !/*selected*/ ctx[2]
		},
		{
			hidden: div_hidden_value = /*selected*/ ctx[2] ? undefined : ''
		},
		{ id: /*id*/ ctx[0] },
		/*$$restProps*/ ctx[6]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tab-content", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				{ role: "tabpanel" },
				(!current || dirty & /*tabId*/ 2) && { "aria-labelledby": /*tabId*/ ctx[1] },
				(!current || dirty & /*selected*/ 4 && div_aria_hidden_value !== (div_aria_hidden_value = !/*selected*/ ctx[2])) && { "aria-hidden": div_aria_hidden_value },
				(!current || dirty & /*selected*/ 4 && div_hidden_value !== (div_hidden_value = /*selected*/ ctx[2] ? undefined : '')) && { hidden: div_hidden_value },
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
			]));

			toggle_class(div, "bx--tab-content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$S($$self, $$props, $$invalidate) {
	let selected;
	let index;
	let tabId;
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $tabs;
	let $contentById;
	let $selectedContent;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const { selectedContent, addContent, tabs, contentById } = getContext("Tabs");
	component_subscribe($$self, selectedContent, value => $$invalidate(10, $selectedContent = value));
	component_subscribe($$self, tabs, value => $$invalidate(8, $tabs = value));
	component_subscribe($$self, contentById, value => $$invalidate(9, $contentById = value));
	addContent({ id });

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedContent, id*/ 1025) {
			$$invalidate(2, selected = $selectedContent === id);
		}

		if ($$self.$$.dirty & /*$contentById, id*/ 513) {
			$$invalidate(7, index = $contentById[id].index);
		}

		if ($$self.$$.dirty & /*$tabs, index*/ 384) {
			$$invalidate(1, tabId = $tabs[index].id);
		}
	};

	return [
		id,
		tabId,
		selected,
		selectedContent,
		tabs,
		contentById,
		$$restProps,
		index,
		$tabs,
		$contentById,
		$selectedContent,
		$$scope,
		slots
	];
}

class TabContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$S, create_fragment$S, safe_not_equal, { id: 0 });
	}
}

var TabContent$1 = TabContent;

/* src/Tabs/TabsSkeleton.svelte generated by Svelte v3.49.0 */

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (25:4) {#each Array.from({ length: count }, (_, i) => i) as item}
function create_each_block$3(ctx) {
	let li;
	let div;
	let t;

	return {
		c() {
			li = element("li");
			div = element("div");
			div.innerHTML = `<span></span>`;
			t = space();
			toggle_class(div, "bx--tabs__nav-link", true);
			toggle_class(li, "bx--tabs--scrollable__nav-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(li, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment$R(ctx) {
	let div;
	let ul;
	let mounted;
	let dispose;
	let each_value = Array.from({ length: /*count*/ ctx[0] }, func);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	let div_levels = [/*$$restProps*/ ctx[2]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			toggle_class(ul, "bx--tabs--scrollable__nav", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--tabs", true);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--tabs--scrollable", true);
			toggle_class(div, "bx--tabs--scrollable--container", /*type*/ ctx[1] === 'container');
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[3]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[4]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[5]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*count*/ 1) {
				each_value = Array.from({ length: /*count*/ ctx[0] }, func);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3();
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]]));
			toggle_class(div, "bx--tabs", true);
			toggle_class(div, "bx--skeleton", true);
			toggle_class(div, "bx--tabs--scrollable", true);
			toggle_class(div, "bx--tabs--scrollable--container", /*type*/ ctx[1] === 'container');
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

const func = (_, i) => i;

function instance$R($$self, $$props, $$invalidate) {
	const omit_props_names = ["count","type"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { count = 4 } = $$props;
	let { type = "default" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('count' in $$new_props) $$invalidate(0, count = $$new_props.count);
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
	};

	return [
		count,
		type,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TabsSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$R, create_fragment$R, safe_not_equal, { count: 0, type: 1 });
	}
}

var TabsSkeleton$1 = TabsSkeleton;

/* src/Tag/TagSkeleton.svelte generated by Svelte v3.49.0 */

function create_fragment$Q(ctx) {
	let span;
	let mounted;
	let dispose;
	let span_levels = [/*$$restProps*/ ctx[1]];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			set_attributes(span, span_data);
			toggle_class(span, "bx--tag", true);
			toggle_class(span, "bx--tag--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = [
					listen(span, "click", /*click_handler*/ ctx[2]),
					listen(span, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(span, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(span, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			set_attributes(span, span_data = get_spread_update(span_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(span, "bx--tag", true);
			toggle_class(span, "bx--tag--sm", /*size*/ ctx[0] === 'sm');
			toggle_class(span, "bx--skeleton", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$Q($$self, $$props, $$invalidate) {
	const omit_props_names = ["size"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = "default" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
	};

	return [
		size,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TagSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { size: 0 });
	}
}

var TagSkeleton$1 = TagSkeleton;

/* src/Tag/Tag.svelte generated by Svelte v3.49.0 */
const get_icon_slot_changes_1 = dirty => ({});
const get_icon_slot_context_1 = ctx => ({});
const get_icon_slot_changes$5 = dirty => ({});
const get_icon_slot_context$5 = ctx => ({ props: { class: 'bx--tag__label' } });
const get_default_slot_changes$2 = dirty => ({});
const get_default_slot_context$2 = ctx => ({ props: { class: 'bx--tag__label' } });

// (136:0) {:else}
function create_else_block$4(ctx) {
	let div;
	let t;
	let span;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*$$slots*/ ctx[11].icon || /*icon*/ ctx[7]) && create_if_block_4$3(ctx);
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let div_levels = [{ id: /*id*/ ctx[8] }, /*$$restProps*/ ctx[10]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(div, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t);
			append(div, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_3*/ ctx[22]),
					listen(div, "mouseover", /*mouseover_handler_3*/ ctx[23]),
					listen(div, "mouseenter", /*mouseenter_handler_3*/ ctx[24]),
					listen(div, "mouseleave", /*mouseleave_handler_3*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*$$slots*/ ctx[11].icon || /*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots, icon*/ 2176) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_4$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(div, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (96:22) 
function create_if_block_2$6(ctx) {
	let button;
	let t;
	let span;
	let button_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*$$slots*/ ctx[11].icon || /*icon*/ ctx[7]) && create_if_block_3$4(ctx);
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	let button_levels = [
		{ type: "button" },
		{ id: /*id*/ ctx[8] },
		{ disabled: /*disabled*/ ctx[3] },
		{ "aria-disabled": /*disabled*/ ctx[3] },
		{
			tabindex: button_tabindex_value = /*disabled*/ ctx[3] ? '-1' : undefined
		},
		/*$$restProps*/ ctx[10]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--tag", true);
			toggle_class(button, "bx--tag--interactive", true);
			toggle_class(button, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(button, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(button, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(button, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(button, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(button, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(button, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(button, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(button, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(button, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(button, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(button, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(button, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);
			append(button, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			if (button.autofocus) button.focus();
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler_2*/ ctx[18]),
					listen(button, "mouseover", /*mouseover_handler_2*/ ctx[19]),
					listen(button, "mouseenter", /*mouseenter_handler_2*/ ctx[20]),
					listen(button, "mouseleave", /*mouseleave_handler_2*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*$$slots*/ ctx[11].icon || /*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots, icon*/ 2176) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*disabled*/ 8) && { "aria-disabled": /*disabled*/ ctx[3] },
				(!current || dirty & /*disabled*/ 8 && button_tabindex_value !== (button_tabindex_value = /*disabled*/ ctx[3] ? '-1' : undefined)) && { tabindex: button_tabindex_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(button, "bx--tag", true);
			toggle_class(button, "bx--tag--interactive", true);
			toggle_class(button, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(button, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(button, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(button, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(button, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(button, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(button, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(button, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(button, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(button, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(button, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(button, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(button, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (54:17) 
function create_if_block_1$a(ctx) {
	let div;
	let t;
	let button;
	let close;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context$2);
	const default_slot_or_fallback = default_slot || fallback_block$k(ctx);
	close = new Close$1({});

	let div_levels = [
		{ "aria-label": /*title*/ ctx[6] },
		{ id: /*id*/ ctx[8] },
		/*$$restProps*/ ctx[10]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			button = element("button");
			create_component(close.$$.fragment);
			attr(button, "type", "button");
			attr(button, "aria-labelledby", /*id*/ ctx[8]);
			button.disabled = /*disabled*/ ctx[3];
			attr(button, "title", /*title*/ ctx[6]);
			toggle_class(button, "bx--tag__close-icon", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--filter", /*filter*/ ctx[2]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(div, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			append(div, t);
			append(div, button);
			mount_component(close, button, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", stop_propagation(/*click_handler_1*/ ctx[14])),
					listen(button, "click", stop_propagation(/*click_handler_4*/ ctx[30])),
					listen(button, "mouseover", /*mouseover_handler_1*/ ctx[15]),
					listen(button, "mouseenter", /*mouseenter_handler_1*/ ctx[16]),
					listen(button, "mouseleave", /*mouseleave_handler_1*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes$2),
						get_default_slot_context$2
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*type*/ 1)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 256) {
				attr(button, "aria-labelledby", /*id*/ ctx[8]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				button.disabled = /*disabled*/ ctx[3];
			}

			if (!current || dirty & /*title*/ 64) {
				attr(button, "title", /*title*/ ctx[6]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*title*/ 64) && { "aria-label": /*title*/ ctx[6] },
				(!current || dirty & /*id*/ 256) && { id: /*id*/ ctx[8] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(div, "bx--tag", true);
			toggle_class(div, "bx--tag--disabled", /*disabled*/ ctx[3]);
			toggle_class(div, "bx--tag--filter", /*filter*/ ctx[2]);
			toggle_class(div, "bx--tag--sm", /*size*/ ctx[1] === 'sm');
			toggle_class(div, "bx--tag--red", /*type*/ ctx[0] === 'red');
			toggle_class(div, "bx--tag--magenta", /*type*/ ctx[0] === 'magenta');
			toggle_class(div, "bx--tag--purple", /*type*/ ctx[0] === 'purple');
			toggle_class(div, "bx--tag--blue", /*type*/ ctx[0] === 'blue');
			toggle_class(div, "bx--tag--cyan", /*type*/ ctx[0] === 'cyan');
			toggle_class(div, "bx--tag--teal", /*type*/ ctx[0] === 'teal');
			toggle_class(div, "bx--tag--green", /*type*/ ctx[0] === 'green');
			toggle_class(div, "bx--tag--gray", /*type*/ ctx[0] === 'gray');
			toggle_class(div, "bx--tag--cool-gray", /*type*/ ctx[0] === 'cool-gray');
			toggle_class(div, "bx--tag--warm-gray", /*type*/ ctx[0] === 'warm-gray');
			toggle_class(div, "bx--tag--high-contrast", /*type*/ ctx[0] === 'high-contrast');
			toggle_class(div, "bx--tag--outline", /*type*/ ctx[0] === 'outline');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			transition_in(close.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			transition_out(close.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			destroy_component(close);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (45:0) {#if skeleton}
function create_if_block$q(ctx) {
	let tagskeleton;
	let current;
	const tagskeleton_spread_levels = [{ size: /*size*/ ctx[1] }, /*$$restProps*/ ctx[10]];
	let tagskeleton_props = {};

	for (let i = 0; i < tagskeleton_spread_levels.length; i += 1) {
		tagskeleton_props = assign(tagskeleton_props, tagskeleton_spread_levels[i]);
	}

	tagskeleton = new TagSkeleton$1({ props: tagskeleton_props });
	tagskeleton.$on("click", /*click_handler*/ ctx[26]);
	tagskeleton.$on("mouseover", /*mouseover_handler*/ ctx[27]);
	tagskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[28]);
	tagskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[29]);

	return {
		c() {
			create_component(tagskeleton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tagskeleton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tagskeleton_changes = (dirty & /*size, $$restProps*/ 1026)
			? get_spread_update(tagskeleton_spread_levels, [
					dirty & /*size*/ 2 && { size: /*size*/ ctx[1] },
					dirty & /*$$restProps*/ 1024 && get_spread_object(/*$$restProps*/ ctx[10])
				])
			: {};

			tagskeleton.$set(tagskeleton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tagskeleton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tagskeleton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tagskeleton, detaching);
		}
	};
}

// (160:4) {#if $$slots.icon || icon}
function create_if_block_4$3(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[13].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[12], get_icon_slot_context_1);
	const icon_slot_or_fallback = icon_slot || fallback_block_2$3(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--tag__custom-icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[12], dirty, get_icon_slot_changes_1),
						get_icon_slot_context_1
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 128)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (162:26)            
function fallback_block_2$3(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (125:4) {#if $$slots.icon || icon}
function create_if_block_3$4(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[13].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[12], get_icon_slot_context$5);
	const icon_slot_or_fallback = icon_slot || fallback_block_1$7(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--tag__custom-icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[12], dirty, get_icon_slot_changes$5),
						get_icon_slot_context$5
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 128)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (127:26)            
function fallback_block_1$7(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (76:48)        
function fallback_block$k(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*type*/ ctx[0]);
			toggle_class(span, "bx--tag__label", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*type*/ 1) set_data(t, /*type*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$P(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$q, create_if_block_1$a, create_if_block_2$6, create_else_block$4];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*skeleton*/ ctx[5]) return 0;
		if (/*filter*/ ctx[2]) return 1;
		if (/*interactive*/ ctx[4]) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$P($$self, $$props, $$invalidate) {
	const omit_props_names = ["type","size","filter","disabled","interactive","skeleton","title","icon","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { type = undefined } = $$props;
	let { size = "default" } = $$props;
	let { filter = false } = $$props;
	let { disabled = false } = $$props;
	let { interactive = false } = $$props;
	let { skeleton = false } = $$props;
	let { title = "Clear filter" } = $$props;
	let { icon = undefined } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_1(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_2(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler_3(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_4 = () => {
		dispatch('close');
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('type' in $$new_props) $$invalidate(0, type = $$new_props.type);
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('filter' in $$new_props) $$invalidate(2, filter = $$new_props.filter);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('interactive' in $$new_props) $$invalidate(4, interactive = $$new_props.interactive);
		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
		if ('title' in $$new_props) $$invalidate(6, title = $$new_props.title);
		if ('icon' in $$new_props) $$invalidate(7, icon = $$new_props.icon);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	return [
		type,
		size,
		filter,
		disabled,
		interactive,
		skeleton,
		title,
		icon,
		id,
		dispatch,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler_1,
		mouseover_handler_1,
		mouseenter_handler_1,
		mouseleave_handler_1,
		click_handler_2,
		mouseover_handler_2,
		mouseenter_handler_2,
		mouseleave_handler_2,
		click_handler_3,
		mouseover_handler_3,
		mouseenter_handler_3,
		mouseleave_handler_3,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		click_handler_4
	];
}

class Tag extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$P, create_fragment$P, safe_not_equal, {
			type: 0,
			size: 1,
			filter: 2,
			disabled: 3,
			interactive: 4,
			skeleton: 5,
			title: 6,
			icon: 7,
			id: 8
		});
	}
}

var Tag$1 = Tag;

/* src/TextArea/TextArea.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$7 = dirty => ({});
const get_labelText_slot_context$7 = ctx => ({});

// (69:2) {#if (labelText || $$slots.labelText) && !hideLabel}
function create_if_block_3$3(ctx) {
	let div;
	let label;
	let t;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[20].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[19], get_labelText_slot_context$7);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$j(ctx);
	let if_block = /*maxCount*/ ctx[5] && create_if_block_4$2(ctx);

	return {
		c() {
			div = element("div");
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t = space();
			if (if_block) if_block.c();
			attr(label, "for", /*id*/ ctx[14]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			toggle_class(div, "bx--text-area__label-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			append(div, t);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[19],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[19], dirty, get_labelText_slot_changes$7),
						get_labelText_slot_context$7
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 1024)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 16384) {
				attr(label, "for", /*id*/ ctx[14]);
			}

			if (dirty[0] & /*hideLabel*/ 2048) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[11]);
			}

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			}

			if (/*maxCount*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$2(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (if_block) if_block.d();
		}
	};
}

// (77:31)            
function fallback_block$j(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 1024) set_data(t, /*labelText*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (81:6) {#if maxCount}
function create_if_block_4$2(ctx) {
	let div;
	let t0_value = /*value*/ ctx[0].length + "";
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text("/");
			t2 = text(/*maxCount*/ ctx[5]);
			toggle_class(div, "bx--label", true);
			toggle_class(div, "bx--label--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].length + "")) set_data(t0, t0_value);
			if (dirty[0] & /*maxCount*/ 32) set_data(t2, /*maxCount*/ ctx[5]);

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(div, "bx--label--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (92:4) {#if invalid}
function create_if_block_2$5(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--text-area__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (120:2) {#if !invalid && helperText}
function create_if_block_1$9(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[9]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 512) set_data(t, /*helperText*/ ctx[9]);

			if (dirty[0] & /*disabled*/ 128) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[7]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (128:2) {#if invalid}
function create_if_block$p(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[13]);
			attr(div, "id", /*errorId*/ ctx[16]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 8192) set_data(t, /*invalidText*/ ctx[13]);

			if (dirty[0] & /*errorId*/ 65536) {
				attr(div, "id", /*errorId*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$O(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let textarea;
	let textarea_aria_invalid_value;
	let textarea_aria_describedby_value;
	let textarea_maxlength_value;
	let div0_data_invalid_value;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*labelText*/ ctx[10] || /*$$slots*/ ctx[17].labelText) && !/*hideLabel*/ ctx[11] && create_if_block_3$3(ctx);
	let if_block1 = /*invalid*/ ctx[12] && create_if_block_2$5();

	let textarea_levels = [
		{
			"aria-invalid": textarea_aria_invalid_value = /*invalid*/ ctx[12] || undefined
		},
		{
			"aria-describedby": textarea_aria_describedby_value = /*invalid*/ ctx[12] ? /*errorId*/ ctx[16] : undefined
		},
		{ disabled: /*disabled*/ ctx[7] },
		{ id: /*id*/ ctx[14] },
		{ name: /*name*/ ctx[15] },
		{ cols: /*cols*/ ctx[3] },
		{ rows: /*rows*/ ctx[4] },
		{ placeholder: /*placeholder*/ ctx[2] },
		{ readOnly: /*readonly*/ ctx[8] },
		{
			maxlength: textarea_maxlength_value = /*maxCount*/ ctx[5] ?? undefined
		},
		/*$$restProps*/ ctx[18]
	];

	let textarea_data = {};

	for (let i = 0; i < textarea_levels.length; i += 1) {
		textarea_data = assign(textarea_data, textarea_levels[i]);
	}

	let if_block2 = !/*invalid*/ ctx[12] && /*helperText*/ ctx[9] && create_if_block_1$9(ctx);
	let if_block3 = /*invalid*/ ctx[12] && create_if_block$p(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			textarea = element("textarea");
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			set_attributes(textarea, textarea_data);
			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[6]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[12]);
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[12] || undefined);
			toggle_class(div0, "bx--text-area__wrapper", true);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block0) if_block0.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, textarea);
			if (textarea.autofocus) textarea.focus();
			/*textarea_binding*/ ctx[32](textarea);
			set_input_value(textarea, /*value*/ ctx[0]);
			append(div1, t2);
			if (if_block2) if_block2.m(div1, null);
			append(div1, t3);
			if (if_block3) if_block3.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(textarea, "input", /*textarea_input_handler*/ ctx[33]),
					listen(textarea, "change", /*change_handler*/ ctx[25]),
					listen(textarea, "input", /*input_handler*/ ctx[26]),
					listen(textarea, "keydown", /*keydown_handler*/ ctx[27]),
					listen(textarea, "keyup", /*keyup_handler*/ ctx[28]),
					listen(textarea, "focus", /*focus_handler*/ ctx[29]),
					listen(textarea, "blur", /*blur_handler*/ ctx[30]),
					listen(textarea, "paste", /*paste_handler*/ ctx[31]),
					listen(div1, "click", /*click_handler*/ ctx[21]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[22]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[23]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((/*labelText*/ ctx[10] || /*$$slots*/ ctx[17].labelText) && !/*hideLabel*/ ctx[11]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*labelText, $$slots, hideLabel*/ 134144) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3$3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block1) {
					if (dirty[0] & /*invalid*/ 4096) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2$5();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
				(!current || dirty[0] & /*invalid*/ 4096 && textarea_aria_invalid_value !== (textarea_aria_invalid_value = /*invalid*/ ctx[12] || undefined)) && {
					"aria-invalid": textarea_aria_invalid_value
				},
				(!current || dirty[0] & /*invalid, errorId*/ 69632 && textarea_aria_describedby_value !== (textarea_aria_describedby_value = /*invalid*/ ctx[12] ? /*errorId*/ ctx[16] : undefined)) && {
					"aria-describedby": textarea_aria_describedby_value
				},
				(!current || dirty[0] & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
				(!current || dirty[0] & /*id*/ 16384) && { id: /*id*/ ctx[14] },
				(!current || dirty[0] & /*name*/ 32768) && { name: /*name*/ ctx[15] },
				(!current || dirty[0] & /*cols*/ 8) && { cols: /*cols*/ ctx[3] },
				(!current || dirty[0] & /*rows*/ 16) && { rows: /*rows*/ ctx[4] },
				(!current || dirty[0] & /*placeholder*/ 4) && { placeholder: /*placeholder*/ ctx[2] },
				(!current || dirty[0] & /*readonly*/ 256) && { readOnly: /*readonly*/ ctx[8] },
				(!current || dirty[0] & /*maxCount*/ 32 && textarea_maxlength_value !== (textarea_maxlength_value = /*maxCount*/ ctx[5] ?? undefined)) && { maxlength: textarea_maxlength_value },
				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
			]));

			if (dirty[0] & /*value*/ 1) {
				set_input_value(textarea, /*value*/ ctx[0]);
			}

			toggle_class(textarea, "bx--text-area", true);
			toggle_class(textarea, "bx--text-area--light", /*light*/ ctx[6]);
			toggle_class(textarea, "bx--text-area--invalid", /*invalid*/ ctx[12]);

			if (!current || dirty[0] & /*invalid*/ 4096 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[12] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!/*invalid*/ ctx[12] && /*helperText*/ ctx[9]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$9(ctx);
					if_block2.c();
					if_block2.m(div1, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*invalid*/ ctx[12]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block$p(ctx);
					if_block3.c();
					if_block3.m(div1, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*textarea_binding*/ ctx[32](null);
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$O($$self, $$props, $$invalidate) {
	let errorId;

	const omit_props_names = [
		"value","placeholder","cols","rows","maxCount","light","disabled","readonly","helperText","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { value = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { cols = 50 } = $$props;
	let { rows = 4 } = $$props;
	let { maxCount = undefined } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { readonly = false } = $$props;
	let { helperText = "" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function textarea_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function textarea_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('placeholder' in $$new_props) $$invalidate(2, placeholder = $$new_props.placeholder);
		if ('cols' in $$new_props) $$invalidate(3, cols = $$new_props.cols);
		if ('rows' in $$new_props) $$invalidate(4, rows = $$new_props.rows);
		if ('maxCount' in $$new_props) $$invalidate(5, maxCount = $$new_props.maxCount);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('readonly' in $$new_props) $$invalidate(8, readonly = $$new_props.readonly);
		if ('helperText' in $$new_props) $$invalidate(9, helperText = $$new_props.helperText);
		if ('labelText' in $$new_props) $$invalidate(10, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(11, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(12, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(13, invalidText = $$new_props.invalidText);
		if ('id' in $$new_props) $$invalidate(14, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(15, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 16384) {
			$$invalidate(16, errorId = `error-${id}`);
		}
	};

	return [
		value,
		ref,
		placeholder,
		cols,
		rows,
		maxCount,
		light,
		disabled,
		readonly,
		helperText,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		errorId,
		$$slots,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		textarea_binding,
		textarea_input_handler
	];
}

class TextArea extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$O,
			create_fragment$O,
			safe_not_equal,
			{
				value: 0,
				placeholder: 2,
				cols: 3,
				rows: 4,
				maxCount: 5,
				light: 6,
				disabled: 7,
				readonly: 8,
				helperText: 9,
				labelText: 10,
				hideLabel: 11,
				invalid: 12,
				invalidText: 13,
				id: 14,
				name: 15,
				ref: 1
			},
			null,
			[-1, -1]
		);
	}
}

var TextArea$1 = TextArea;

/* src/TextArea/TextAreaSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block$o(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$N(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$o();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--text-area", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$o();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$N($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TextAreaSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$N, create_fragment$N, safe_not_equal, { hideLabel: 0 });
	}
}

var TextAreaSkeleton$1 = TextAreaSkeleton;

/* src/TextInput/TextInput.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes_1$1 = dirty => ({});
const get_labelText_slot_context_1$1 = ctx => ({});
const get_labelText_slot_changes$6 = dirty => ({});
const get_labelText_slot_context$6 = ctx => ({});

// (114:2) {#if inline}
function create_if_block_10$1(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*labelText*/ ctx[9] && create_if_block_12$1(ctx);
	let if_block1 = !/*isFluid*/ ctx[20] && /*helperText*/ ctx[6] && create_if_block_11$1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			toggle_class(div, "bx--text-input__label-helper-wrapper", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*labelText*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*labelText*/ 512) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_12$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*isFluid*/ ctx[20] && /*helperText*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_11$1(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (116:6) {#if labelText}
function create_if_block_12$1(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context$6);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_1$6(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			toggle_class(label, "bx--label--inline--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(label, "bx--label--inline--xl", /*size*/ ctx[2] === 'xl');
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes$6),
						get_labelText_slot_context$6
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			if (dirty[0] & /*hideLabel*/ 1024) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(label, "bx--label--inline--sm", /*size*/ ctx[2] === 'sm');
			}

			if (dirty[0] & /*size*/ 4) {
				toggle_class(label, "bx--label--inline--xl", /*size*/ ctx[2] === 'xl');
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (126:33)              
function fallback_block_1$6(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (131:6) {#if !isFluid && helperText}
function create_if_block_11$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 64) set_data(t, /*helperText*/ ctx[6]);

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (142:2) {#if !inline && (labelText || $$slots.labelText)}
function create_if_block_9$1(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[26].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[25], get_labelText_slot_context_1$1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$i(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			toggle_class(label, "bx--label--inline-sm", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'sm');
			toggle_class(label, "bx--label--inline-xl", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'xl');
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 33554432)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[25], dirty, get_labelText_slot_changes_1$1),
						get_labelText_slot_context_1$1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			if (dirty[0] & /*hideLabel*/ 1024) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*inline, size*/ 65540) {
				toggle_class(label, "bx--label--inline-sm", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'sm');
			}

			if (dirty[0] & /*inline, size*/ 65540) {
				toggle_class(label, "bx--label--inline-xl", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'xl');
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (152:29)          
function fallback_block$i(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 512) set_data(t, /*labelText*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (167:6) {#if invalid}
function create_if_block_8$1(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (170:6) {#if !invalid && warn}
function create_if_block_7$1(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (176:6) {#if readonly}
function create_if_block_6$1(ctx) {
	let editoff;
	let current;

	editoff = new EditOff$1({
			props: { class: "bx--text-input__readonly-icon" }
		});

	return {
		c() {
			create_component(editoff.$$.fragment);
		},
		m(target, anchor) {
			mount_component(editoff, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(editoff.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(editoff.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(editoff, detaching);
		}
	};
}

// (207:6) {#if isFluid}
function create_if_block_5$1(ctx) {
	let hr;

	return {
		c() {
			hr = element("hr");
			toggle_class(hr, "bx--text-input__divider", true);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
		},
		d(detaching) {
			if (detaching) detach(hr);
		}
	};
}

// (210:6) {#if isFluid && !inline && invalid}
function create_if_block_4$1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (215:6) {#if isFluid && !inline && warn}
function create_if_block_3$2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*warnId*/ ctx[18]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*warnId*/ 262144) {
				attr(div, "id", /*warnId*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (219:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
function create_if_block_2$4(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[6]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 64) set_data(t, /*helperText*/ ctx[6]);

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (228:4) {#if !isFluid && invalid}
function create_if_block_1$8(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[12]);
			attr(div, "id", /*errorId*/ ctx[19]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 4096) set_data(t, /*invalidText*/ ctx[12]);

			if (dirty[0] & /*errorId*/ 524288) {
				attr(div, "id", /*errorId*/ ctx[19]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (233:4) {#if !isFluid && !invalid && warn}
function create_if_block$n(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[14]);
			attr(div, "id", /*warnId*/ ctx[18]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 16384) set_data(t, /*warnText*/ ctx[14]);

			if (dirty[0] & /*warnId*/ 262144) {
				attr(div, "id", /*warnId*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$M(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let t4;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_data_warn_value;
	let input_aria_describedby_value;
	let t5;
	let t6;
	let t7;
	let div0_data_invalid_value;
	let div0_data_warn_value;
	let t8;
	let t9;
	let t10;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[16] && create_if_block_10$1(ctx);
	let if_block1 = !/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[24].labelText) && create_if_block_9$1(ctx);
	let if_block2 = /*invalid*/ ctx[11] && create_if_block_8$1();
	let if_block3 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_7$1();
	let if_block4 = /*readonly*/ ctx[17] && create_if_block_6$1();

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[11] || undefined
		},
		{
			"data-warn": input_data_warn_value = /*warn*/ ctx[13] || undefined
		},
		{
			"aria-describedby": input_aria_describedby_value = /*invalid*/ ctx[11]
			? /*errorId*/ ctx[19]
			: /*warn*/ ctx[13] ? /*warnId*/ ctx[18] : undefined
		},
		{ disabled: /*disabled*/ ctx[5] },
		{ id: /*id*/ ctx[7] },
		{ name: /*name*/ ctx[8] },
		{ placeholder: /*placeholder*/ ctx[3] },
		{ required: /*required*/ ctx[15] },
		{ readOnly: /*readonly*/ ctx[17] },
		/*$$restProps*/ ctx[23]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block5 = /*isFluid*/ ctx[20] && create_if_block_5$1();
	let if_block6 = /*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11] && create_if_block_4$1(ctx);
	let if_block7 = /*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*warn*/ ctx[13] && create_if_block_3$2(ctx);
	let if_block8 = !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6] && create_if_block_2$4(ctx);
	let if_block9 = !/*isFluid*/ ctx[20] && /*invalid*/ ctx[11] && create_if_block_1$8(ctx);
	let if_block10 = !/*isFluid*/ ctx[20] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block$n(ctx);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			input = element("input");
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			t9 = space();
			if (if_block9) if_block9.c();
			t10 = space();
			if (if_block10) if_block10.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[13]);
			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[2] === 'xl');
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[11] || undefined);
			attr(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[13] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
			toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
			toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t3);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t4);
			append(div0, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[36](input);
			set_input_value(input, /*value*/ ctx[0]);
			append(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append(div0, t6);
			if (if_block6) if_block6.m(div0, null);
			append(div0, t7);
			if (if_block7) if_block7.m(div0, null);
			append(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			append(div1, t9);
			if (if_block9) if_block9.m(div1, null);
			append(div1, t10);
			if (if_block10) if_block10.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[37]),
					listen(input, "change", /*onChange*/ ctx[22]),
					listen(input, "input", /*onInput*/ ctx[21]),
					listen(input, "keydown", /*keydown_handler*/ ctx[31]),
					listen(input, "keyup", /*keyup_handler*/ ctx[32]),
					listen(input, "focus", /*focus_handler*/ ctx[33]),
					listen(input, "blur", /*blur_handler*/ ctx[34]),
					listen(input, "paste", /*paste_handler*/ ctx[35]),
					listen(div2, "click", /*click_handler*/ ctx[27]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[28]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[29]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[30])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*inline*/ ctx[16]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 65536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_10$1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[24].labelText)) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inline, labelText, $$slots*/ 16843264) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_9$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*invalid*/ ctx[11]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 2048) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_8$1();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 10240) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_7$1();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*readonly*/ ctx[17]) {
				if (if_block4) {
					if (dirty[0] & /*readonly*/ 131072) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block_6$1();
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(div0, t4);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 2048 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 2048 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[11] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*warn*/ 8192 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[13] || undefined)) && { "data-warn": input_data_warn_value },
				(!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 796672 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[11]
				? /*errorId*/ ctx[19]
				: /*warn*/ ctx[13] ? /*warnId*/ ctx[18] : undefined)) && {
					"aria-describedby": input_aria_describedby_value
				},
				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				(!current || dirty[0] & /*id*/ 128) && { id: /*id*/ ctx[7] },
				(!current || dirty[0] & /*name*/ 256) && { name: /*name*/ ctx[8] },
				(!current || dirty[0] & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
				(!current || dirty[0] & /*required*/ 32768) && { required: /*required*/ ctx[15] },
				(!current || dirty[0] & /*readonly*/ 131072) && { readOnly: /*readonly*/ ctx[17] },
				dirty[0] & /*$$restProps*/ 8388608 && /*$$restProps*/ ctx[23]
			]));

			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[11]);
			toggle_class(input, "bx--text-input--warn", /*warn*/ ctx[13]);
			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[2] === 'xl');

			if (/*isFluid*/ ctx[20]) {
				if (if_block5) ; else {
					if_block5 = create_if_block_5$1();
					if_block5.c();
					if_block5.m(div0, t6);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_4$1(ctx);
					if_block6.c();
					if_block6.m(div0, t7);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*warn*/ ctx[13]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_3$2(ctx);
					if_block7.c();
					if_block7.m(div0, null);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!current || dirty[0] & /*invalid*/ 2048 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[11] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (!current || dirty[0] & /*warn*/ 8192 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[13] || undefined)) {
				attr(div0, "data-warn", div0_data_warn_value);
			}

			if (dirty[0] & /*invalid, warn*/ 10240) {
				toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
			}

			if (!/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[20] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_2$4(ctx);
					if_block8.c();
					if_block8.m(div1, t9);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (!/*isFluid*/ ctx[20] && /*invalid*/ ctx[11]) {
				if (if_block9) {
					if_block9.p(ctx, dirty);
				} else {
					if_block9 = create_if_block_1$8(ctx);
					if_block9.c();
					if_block9.m(div1, t10);
				}
			} else if (if_block9) {
				if_block9.d(1);
				if_block9 = null;
			}

			if (!/*isFluid*/ ctx[20] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
				if (if_block10) {
					if_block10.p(ctx, dirty);
				} else {
					if_block10 = create_if_block$n(ctx);
					if_block10.c();
					if_block10.m(div1, null);
				}
			} else if (if_block10) {
				if_block10.d(1);
				if_block10 = null;
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*inline*/ 65536) {
				toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
			}

			if (dirty[0] & /*light*/ 16) {
				toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
			}

			if (dirty[0] & /*readonly*/ 131072) {
				toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			/*input_binding*/ ctx[36](null);
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			if (if_block9) if_block9.d();
			if (if_block10) if_block10.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$M($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;
	let warnId;

	const omit_props_names = [
		"size","value","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline","readonly"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { placeholder = "" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { ref = null } = $$props;
	let { required = false } = $$props;
	let { inline = false } = $$props;
	let { readonly = false } = $$props;
	const ctx = getContext("Form");
	const dispatch = createEventDispatcher();

	function parse(raw) {
		if ($$restProps.type !== "number") return raw;
		return raw != "" ? Number(raw) : null;
	}

	/** @type {(e: Event) => void} */
	const onInput = e => {
		$$invalidate(0, value = parse(e.target.value));
		dispatch("input", value);
	};

	/** @type {(e: Event) => void} */
	const onChange = e => {
		dispatch("change", parse(e.target.value));
	};

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(23, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('helperText' in $$new_props) $$invalidate(6, helperText = $$new_props.helperText);
		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ('labelText' in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('required' in $$new_props) $$invalidate(15, required = $$new_props.required);
		if ('inline' in $$new_props) $$invalidate(16, inline = $$new_props.inline);
		if ('readonly' in $$new_props) $$invalidate(17, readonly = $$new_props.readonly);
		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 128) {
			$$invalidate(19, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 128) {
			$$invalidate(18, warnId = `warn-${id}`);
		}
	};

	$$invalidate(20, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		ref,
		size,
		placeholder,
		light,
		disabled,
		helperText,
		id,
		name,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		required,
		inline,
		readonly,
		warnId,
		errorId,
		isFluid,
		onInput,
		onChange,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		input_binding,
		input_input_handler
	];
}

class TextInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$M,
			create_fragment$M,
			safe_not_equal,
			{
				size: 2,
				value: 0,
				placeholder: 3,
				light: 4,
				disabled: 5,
				helperText: 6,
				id: 7,
				name: 8,
				labelText: 9,
				hideLabel: 10,
				invalid: 11,
				invalidText: 12,
				warn: 13,
				warnText: 14,
				ref: 1,
				required: 15,
				inline: 16,
				readonly: 17
			},
			null,
			[-1, -1]
		);
	}
}

var TextInput$1 = TextInput;

/* src/TextInput/TextInputSkeleton.svelte generated by Svelte v3.49.0 */

function create_if_block$m(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			toggle_class(span, "bx--label", true);
			toggle_class(span, "bx--skeleton", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$L(ctx) {
	let div1;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$m();
	let div1_levels = [/*$$restProps*/ ctx[1]];
	let div1_data = {};

	for (let i = 0; i < div1_levels.length; i += 1) {
		div1_data = assign(div1_data, div1_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t = space();
			div0 = element("div");
			toggle_class(div0, "bx--skeleton", true);
			toggle_class(div0, "bx--text-input", true);
			set_attributes(div1, div1_data);
			toggle_class(div1, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*click_handler*/ ctx[2]),
					listen(div1, "mouseover", /*mouseover_handler*/ ctx[3]),
					listen(div1, "mouseenter", /*mouseenter_handler*/ ctx[4]),
					listen(div1, "mouseleave", /*mouseleave_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[0]) {
				if (if_block) ; else {
					if_block = create_if_block$m();
					if_block.c();
					if_block.m(div1, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div1, "bx--form-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$L($$self, $$props, $$invalidate) {
	const omit_props_names = ["hideLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { hideLabel = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
	};

	return [
		hideLabel,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class TextInputSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$L, create_fragment$L, safe_not_equal, { hideLabel: 0 });
	}
}

var TextInputSkeleton$1 = TextInputSkeleton;

/* src/icons/View.svelte generated by Svelte v3.49.0 */

function create_if_block$l(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$K(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$l(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M30.94,15.66A16.69,16.69,0,0,0,16,5,16.69,16.69,0,0,0,1.06,15.66a1,1,0,0,0,0,.68A16.69,16.69,0,0,0,16,27,16.69,16.69,0,0,0,30.94,16.34,1,1,0,0,0,30.94,15.66ZM16,25c-5.3,0-10.9-3.93-12.93-9C5.1,10.93,10.7,7,16,7s10.9,3.93,12.93,9C26.9,21.07,21.3,25,16,25Z");
			attr(path1, "d", "M16,10a6,6,0,1,0,6,6A6,6,0,0,0,16,10Zm0,10a4,4,0,1,1,4-4A4,4,0,0,1,16,20Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$l(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$K($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class View extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$K, create_fragment$K, safe_not_equal, { size: 0, title: 1 });
	}
}

var View$1 = View;

/* src/icons/ViewOff.svelte generated by Svelte v3.49.0 */

function create_if_block$k(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$J(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$k(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M5.24,22.51l1.43-1.42A14.06,14.06,0,0,1,3.07,16C5.1,10.93,10.7,7,16,7a12.38,12.38,0,0,1,4,.72l1.55-1.56A14.72,14.72,0,0,0,16,5,16.69,16.69,0,0,0,1.06,15.66a1,1,0,0,0,0,.68A16,16,0,0,0,5.24,22.51Z");
			attr(path1, "d", "M12 15.73a4 4 0 013.7-3.7l1.81-1.82a6 6 0 00-7.33 7.33zM30.94 15.66A16.4 16.4 0 0025.2 8.22L30 3.41 28.59 2 2 28.59 3.41 30l5.1-5.1A15.29 15.29 0 0016 27 16.69 16.69 0 0030.94 16.34 1 1 0 0030.94 15.66zM20 16a4 4 0 01-6 3.44L19.44 14A4 4 0 0120 16zm-4 9a13.05 13.05 0 01-6-1.58l2.54-2.54a6 6 0 008.35-8.35l2.87-2.87A14.54 14.54 0 0128.93 16C26.9 21.07 21.3 25 16 25z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$k(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$J($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class ViewOff extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$J, create_fragment$J, safe_not_equal, { size: 0, title: 1 });
	}
}

var ViewOff$1 = ViewOff;

/* src/TextInput/PasswordInput.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes_1 = dirty => ({});
const get_labelText_slot_context_1 = ctx => ({});
const get_labelText_slot_changes$5 = dirty => ({});
const get_labelText_slot_context$5 = ctx => ({});

// (108:2) {#if inline}
function create_if_block_11(ctx) {
	let label;
	let t;
	let if_block_anchor;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[27].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[26], get_labelText_slot_context$5);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_1$5(ctx);
	let if_block = !/*isFluid*/ ctx[23] && /*helperText*/ ctx[11] && create_if_block_12(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(label, "for", /*id*/ ctx[19]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[18]);
			toggle_class(label, "bx--label--inline--sm", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'sm');
			toggle_class(label, "bx--label--inline--xl", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'xl');
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 67108864)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[26],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[26], dirty, get_labelText_slot_changes$5),
						get_labelText_slot_context$5
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 4096)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 524288) {
				attr(label, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*hideLabel*/ 8192) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[18]);
			}

			if (dirty[0] & /*inline, size*/ 262152) {
				toggle_class(label, "bx--label--inline--sm", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'sm');
			}

			if (dirty[0] & /*inline, size*/ 262152) {
				toggle_class(label, "bx--label--inline--xl", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'xl');
			}

			if (!/*isFluid*/ ctx[23] && /*helperText*/ ctx[11]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_12(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (118:29)          
function fallback_block_1$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 4096) set_data(t, /*labelText*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (122:4) {#if !isFluid && helperText}
function create_if_block_12(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (132:2) {#if !inline && (labelText || $$slots.labelText)}
function create_if_block_10(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[27].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[26], get_labelText_slot_context_1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$h(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[19]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			toggle_class(label, "bx--label--inline", /*inline*/ ctx[18]);
			toggle_class(label, "bx--label--inline--sm", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'sm');
			toggle_class(label, "bx--label--inline--xl", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'xl');
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 67108864)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[26],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[26])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[26], dirty, get_labelText_slot_changes_1),
						get_labelText_slot_context_1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 4096)) {
					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*id*/ 524288) {
				attr(label, "for", /*id*/ ctx[19]);
			}

			if (dirty[0] & /*hideLabel*/ 8192) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[13]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(label, "bx--label--inline", /*inline*/ ctx[18]);
			}

			if (dirty[0] & /*inline, size*/ 262152) {
				toggle_class(label, "bx--label--inline--sm", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'sm');
			}

			if (dirty[0] & /*inline, size*/ 262152) {
				toggle_class(label, "bx--label--inline--xl", /*inline*/ ctx[18] && /*size*/ ctx[3] === 'xl');
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (142:29)          
function fallback_block$h(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*labelText*/ 4096) set_data(t, /*labelText*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (156:6) {#if invalid}
function create_if_block_9(ctx) {
	let warningfilled;
	let current;

	warningfilled = new WarningFilled$1({
			props: { class: "bx--text-input__invalid-icon" }
		});

	return {
		c() {
			create_component(warningfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningfilled, detaching);
		}
	};
}

// (159:6) {#if !invalid && warn}
function create_if_block_8(ctx) {
	let warningaltfilled;
	let current;

	warningaltfilled = new WarningAltFilled$1({
			props: {
				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
			}
		});

	return {
		c() {
			create_component(warningaltfilled.$$.fragment);
		},
		m(target, anchor) {
			mount_component(warningaltfilled, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(warningaltfilled.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(warningaltfilled.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(warningaltfilled, detaching);
		}
	};
}

// (195:6) {#if isFluid && invalid}
function create_if_block_7(ctx) {
	let hr;
	let t0;
	let div;
	let t1;

	return {
		c() {
			hr = element("hr");
			t0 = space();
			div = element("div");
			t1 = text(/*invalidText*/ ctx[15]);
			attr(hr, "class", "bx--text-input__divider");
			attr(div, "class", "bx--form-requirement");
			attr(div, "id", /*errorId*/ ctx[22]);
		},
		m(target, anchor) {
			insert(target, hr, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 32768) set_data(t1, /*invalidText*/ ctx[15]);

			if (dirty[0] & /*errorId*/ 4194304) {
				attr(div, "id", /*errorId*/ ctx[22]);
			}
		},
		d(detaching) {
			if (detaching) detach(hr);
			if (detaching) detach(t0);
			if (detaching) detach(div);
		}
	};
}

// (201:6) {#if !(isFluid && invalid)}
function create_if_block_3$1(ctx) {
	let button;
	let t;
	let current_block_type_index;
	let if_block1;
	let current;
	let mounted;
	let dispose;
	let if_block0 = !/*disabled*/ ctx[10] && create_if_block_5(ctx);
	const if_block_creators = [create_if_block_4, create_else_block$3];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*type*/ ctx[1] === "text") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			button = element("button");
			if (if_block0) if_block0.c();
			t = space();
			if_block1.c();
			attr(button, "type", "button");
			button.disabled = /*disabled*/ ctx[10];
			toggle_class(button, "bx--text-input--password__visibility__toggle", true);
			toggle_class(button, "bx--btn", true);
			toggle_class(button, "bx--btn--icon-only", true);
			toggle_class(button, "bx--btn--disabled", /*disabled*/ ctx[10]);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip--top", /*tooltipPosition*/ ctx[8] === 'top');
			toggle_class(button, "bx--tooltip--right", /*tooltipPosition*/ ctx[8] === 'right');
			toggle_class(button, "bx--tooltip--bottom", /*tooltipPosition*/ ctx[8] === 'bottom');
			toggle_class(button, "bx--tooltip--left", /*tooltipPosition*/ ctx[8] === 'left');
			toggle_class(button, "bx--tooltip--align-start", /*tooltipAlignment*/ ctx[7] === 'start');
			toggle_class(button, "bx--tooltip--align-center", /*tooltipAlignment*/ ctx[7] === 'center');
			toggle_class(button, "bx--tooltip--align-end", /*tooltipAlignment*/ ctx[7] === 'end');
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block0) if_block0.m(button, null);
			append(button, t);
			if_blocks[current_block_type_index].m(button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[41]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!/*disabled*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(button, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				}

				transition_in(if_block1, 1);
				if_block1.m(button, null);
			}

			if (!current || dirty[0] & /*disabled*/ 1024) {
				button.disabled = /*disabled*/ ctx[10];
			}

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(button, "bx--btn--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*tooltipPosition*/ 256) {
				toggle_class(button, "bx--tooltip--top", /*tooltipPosition*/ ctx[8] === 'top');
			}

			if (dirty[0] & /*tooltipPosition*/ 256) {
				toggle_class(button, "bx--tooltip--right", /*tooltipPosition*/ ctx[8] === 'right');
			}

			if (dirty[0] & /*tooltipPosition*/ 256) {
				toggle_class(button, "bx--tooltip--bottom", /*tooltipPosition*/ ctx[8] === 'bottom');
			}

			if (dirty[0] & /*tooltipPosition*/ 256) {
				toggle_class(button, "bx--tooltip--left", /*tooltipPosition*/ ctx[8] === 'left');
			}

			if (dirty[0] & /*tooltipAlignment*/ 128) {
				toggle_class(button, "bx--tooltip--align-start", /*tooltipAlignment*/ ctx[7] === 'start');
			}

			if (dirty[0] & /*tooltipAlignment*/ 128) {
				toggle_class(button, "bx--tooltip--align-center", /*tooltipAlignment*/ ctx[7] === 'center');
			}

			if (dirty[0] & /*tooltipAlignment*/ 128) {
				toggle_class(button, "bx--tooltip--align-end", /*tooltipAlignment*/ ctx[7] === 'end');
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

// (222:10) {#if !disabled}
function create_if_block_5(ctx) {
	let span;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[1] === "text") return create_if_block_6;
		return create_else_block_1$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			span = element("span");
			if_block.c();
			toggle_class(span, "bx--assistive-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if_block.m(span, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(span, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if_block.d();
		}
	};
}

// (226:14) {:else}
function create_else_block_1$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*showPasswordLabel*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*showPasswordLabel*/ 64) set_data(t, /*showPasswordLabel*/ ctx[6]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (224:14) {#if type === "text"}
function create_if_block_6(ctx) {
	let t;

	return {
		c() {
			t = text(/*hidePasswordLabel*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*hidePasswordLabel*/ 32) set_data(t, /*hidePasswordLabel*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (231:10) {:else}
function create_else_block$3(ctx) {
	let view;
	let current;

	view = new View$1({
			props: { class: "bx--icon-visibility-on" }
		});

	return {
		c() {
			create_component(view.$$.fragment);
		},
		m(target, anchor) {
			mount_component(view, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(view.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(view.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(view, detaching);
		}
	};
}

// (229:10) {#if type === "text"}
function create_if_block_4(ctx) {
	let viewoff;
	let current;

	viewoff = new ViewOff$1({
			props: { class: "bx--icon-visibility-off" }
		});

	return {
		c() {
			create_component(viewoff.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewoff, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(viewoff.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewoff.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewoff, detaching);
		}
	};
}

// (237:4) {#if !isFluid && invalid}
function create_if_block_2$3(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[15]);
			attr(div, "id", /*errorId*/ ctx[22]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*invalidText*/ 32768) set_data(t, /*invalidText*/ ctx[15]);

			if (dirty[0] & /*errorId*/ 4194304) {
				attr(div, "id", /*errorId*/ ctx[22]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (242:4) {#if !invalid && !warn && !isFluid && !inline}
function create_if_block_1$7(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*helperText*/ ctx[11]);
			toggle_class(div, "bx--form__helper-text", true);
			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*helperText*/ 2048) set_data(t, /*helperText*/ ctx[11]);

			if (dirty[0] & /*disabled*/ 1024) {
				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[18]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (251:4) {#if !isFluid && !invalid && warn}
function create_if_block$j(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*warnText*/ ctx[17]);
			attr(div, "id", /*warnId*/ ctx[21]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*warnText*/ 131072) set_data(t, /*warnText*/ ctx[17]);

			if (dirty[0] & /*warnId*/ 2097152) {
				attr(div, "id", /*warnId*/ ctx[21]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$I(ctx) {
	let div2;
	let t0;
	let t1;
	let div1;
	let div0;
	let t2;
	let t3;
	let input;
	let input_data_invalid_value;
	let input_aria_invalid_value;
	let input_aria_describedby_value;
	let input_value_value;
	let t4;
	let t5;
	let div0_data_invalid_value;
	let t6;
	let t7;
	let t8;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*inline*/ ctx[18] && create_if_block_11(ctx);
	let if_block1 = !/*inline*/ ctx[18] && (/*labelText*/ ctx[12] || /*$$slots*/ ctx[24].labelText) && create_if_block_10(ctx);
	let if_block2 = /*invalid*/ ctx[14] && create_if_block_9();
	let if_block3 = !/*invalid*/ ctx[14] && /*warn*/ ctx[16] && create_if_block_8();

	let input_levels = [
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[14] || undefined
		},
		{
			"aria-invalid": input_aria_invalid_value = /*invalid*/ ctx[14] || undefined
		},
		{
			"aria-describedby": input_aria_describedby_value = /*invalid*/ ctx[14]
			? /*errorId*/ ctx[22]
			: /*warn*/ ctx[16] ? /*warnId*/ ctx[21] : undefined
		},
		{ id: /*id*/ ctx[19] },
		{ name: /*name*/ ctx[20] },
		{ placeholder: /*placeholder*/ ctx[4] },
		{ type: /*type*/ ctx[1] },
		{
			value: input_value_value = /*value*/ ctx[0] ?? ''
		},
		{ disabled: /*disabled*/ ctx[10] },
		/*$$restProps*/ ctx[25]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block4 = /*isFluid*/ ctx[23] && /*invalid*/ ctx[14] && create_if_block_7(ctx);
	let if_block5 = !(/*isFluid*/ ctx[23] && /*invalid*/ ctx[14]) && create_if_block_3$1(ctx);
	let if_block6 = !/*isFluid*/ ctx[23] && /*invalid*/ ctx[14] && create_if_block_2$3(ctx);
	let if_block7 = !/*invalid*/ ctx[14] && !/*warn*/ ctx[16] && !/*isFluid*/ ctx[23] && !/*inline*/ ctx[18] && create_if_block_1$7(ctx);
	let if_block8 = !/*isFluid*/ ctx[23] && !/*invalid*/ ctx[14] && /*warn*/ ctx[16] && create_if_block$j(ctx);

	return {
		c() {
			div2 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			div1 = element("div");
			div0 = element("div");
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			input = element("input");
			t4 = space();
			if (if_block4) if_block4.c();
			t5 = space();
			if (if_block5) if_block5.c();
			t6 = space();
			if (if_block6) if_block6.c();
			t7 = space();
			if (if_block7) if_block7.c();
			t8 = space();
			if (if_block8) if_block8.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--password-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[9]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[14]);
			toggle_class(input, "bx--text-input--warning", /*warn*/ ctx[16]);
			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[3] === 'sm');
			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[3] === 'xl');
			attr(div0, "data-invalid", div0_data_invalid_value = /*invalid*/ ctx[14] || undefined);
			toggle_class(div0, "bx--text-input__field-wrapper", true);
			toggle_class(div0, "bx--text-input__field-wrapper--warning", /*warn*/ ctx[16]);
			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[18]);
			toggle_class(div2, "bx--form-item", true);
			toggle_class(div2, "bx--text-input-wrapper", true);
			toggle_class(div2, "bx--password-input-wrapper", !/*isFluid*/ ctx[23]);
			toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[9]);
			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t0);
			if (if_block1) if_block1.m(div2, null);
			append(div2, t1);
			append(div2, div1);
			append(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			append(div0, t3);
			append(div0, input);
			input.value = input_data.value;
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[39](input);
			append(div0, t4);
			if (if_block4) if_block4.m(div0, null);
			append(div0, t5);
			if (if_block5) if_block5.m(div0, null);
			append(div1, t6);
			if (if_block6) if_block6.m(div1, null);
			append(div1, t7);
			if (if_block7) if_block7.m(div1, null);
			append(div1, t8);
			if (if_block8) if_block8.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[32]),
					listen(input, "input", /*input_handler*/ ctx[33]),
					listen(input, "input", /*input_handler_1*/ ctx[40]),
					listen(input, "keydown", /*keydown_handler*/ ctx[34]),
					listen(input, "keyup", /*keyup_handler*/ ctx[35]),
					listen(input, "focus", /*focus_handler*/ ctx[36]),
					listen(input, "blur", /*blur_handler*/ ctx[37]),
					listen(input, "paste", /*paste_handler*/ ctx[38]),
					listen(div2, "click", /*click_handler*/ ctx[28]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[29]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[30]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[31])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*inline*/ ctx[18]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*inline*/ 262144) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!/*inline*/ ctx[18] && (/*labelText*/ ctx[12] || /*$$slots*/ ctx[24].labelText)) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*inline, labelText, $$slots*/ 17043456) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*invalid*/ ctx[14]) {
				if (if_block2) {
					if (dirty[0] & /*invalid*/ 16384) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_9();
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!/*invalid*/ ctx[14] && /*warn*/ ctx[16]) {
				if (if_block3) {
					if (dirty[0] & /*invalid, warn*/ 81920) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_8();
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div0, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				(!current || dirty[0] & /*invalid*/ 16384 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[14] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty[0] & /*invalid*/ 16384 && input_aria_invalid_value !== (input_aria_invalid_value = /*invalid*/ ctx[14] || undefined)) && { "aria-invalid": input_aria_invalid_value },
				(!current || dirty[0] & /*invalid, errorId, warn, warnId*/ 6373376 && input_aria_describedby_value !== (input_aria_describedby_value = /*invalid*/ ctx[14]
				? /*errorId*/ ctx[22]
				: /*warn*/ ctx[16] ? /*warnId*/ ctx[21] : undefined)) && {
					"aria-describedby": input_aria_describedby_value
				},
				(!current || dirty[0] & /*id*/ 524288) && { id: /*id*/ ctx[19] },
				(!current || dirty[0] & /*name*/ 1048576) && { name: /*name*/ ctx[20] },
				(!current || dirty[0] & /*placeholder*/ 16) && { placeholder: /*placeholder*/ ctx[4] },
				(!current || dirty[0] & /*type*/ 2) && { type: /*type*/ ctx[1] },
				(!current || dirty[0] & /*value*/ 1 && input_value_value !== (input_value_value = /*value*/ ctx[0] ?? '') && input.value !== input_value_value) && { value: input_value_value },
				(!current || dirty[0] & /*disabled*/ 1024) && { disabled: /*disabled*/ ctx[10] },
				dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]
			]));

			if ('value' in input_data) {
				input.value = input_data.value;
			}

			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--password-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[9]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[14]);
			toggle_class(input, "bx--text-input--warning", /*warn*/ ctx[16]);
			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[3] === 'sm');
			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[3] === 'xl');

			if (/*isFluid*/ ctx[23] && /*invalid*/ ctx[14]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_7(ctx);
					if_block4.c();
					if_block4.m(div0, t5);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (!(/*isFluid*/ ctx[23] && /*invalid*/ ctx[14])) {
				if (if_block5) {
					if_block5.p(ctx, dirty);

					if (dirty[0] & /*isFluid, invalid*/ 8404992) {
						transition_in(if_block5, 1);
					}
				} else {
					if_block5 = create_if_block_3$1(ctx);
					if_block5.c();
					transition_in(if_block5, 1);
					if_block5.m(div0, null);
				}
			} else if (if_block5) {
				group_outros();

				transition_out(if_block5, 1, 1, () => {
					if_block5 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*invalid*/ 16384 && div0_data_invalid_value !== (div0_data_invalid_value = /*invalid*/ ctx[14] || undefined)) {
				attr(div0, "data-invalid", div0_data_invalid_value);
			}

			if (dirty[0] & /*warn*/ 65536) {
				toggle_class(div0, "bx--text-input__field-wrapper--warning", /*warn*/ ctx[16]);
			}

			if (!/*isFluid*/ ctx[23] && /*invalid*/ ctx[14]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_2$3(ctx);
					if_block6.c();
					if_block6.m(div1, t7);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (!/*invalid*/ ctx[14] && !/*warn*/ ctx[16] && !/*isFluid*/ ctx[23] && !/*inline*/ ctx[18]) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_1$7(ctx);
					if_block7.c();
					if_block7.m(div1, t8);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (!/*isFluid*/ ctx[23] && !/*invalid*/ ctx[14] && /*warn*/ ctx[16]) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block$j(ctx);
					if_block8.c();
					if_block8.m(div1, null);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[18]);
			}

			if (dirty[0] & /*isFluid*/ 8388608) {
				toggle_class(div2, "bx--password-input-wrapper", !/*isFluid*/ ctx[23]);
			}

			if (dirty[0] & /*light*/ 512) {
				toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[9]);
			}

			if (dirty[0] & /*inline*/ 262144) {
				toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[18]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block5);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block5);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			/*input_binding*/ ctx[39](null);
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$I($$self, $$props, $$invalidate) {
	let isFluid;
	let errorId;
	let warnId;

	const omit_props_names = [
		"size","value","type","placeholder","hidePasswordLabel","showPasswordLabel","tooltipAlignment","tooltipPosition","light","disabled","helperText","labelText","hideLabel","invalid","invalidText","warn","warnText","inline","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { type = "password" } = $$props;
	let { placeholder = "" } = $$props;
	let { hidePasswordLabel = "Hide password" } = $$props;
	let { showPasswordLabel = "Show password" } = $$props;
	let { tooltipAlignment = "center" } = $$props;
	let { tooltipPosition = "bottom" } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { helperText = "" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { warn = false } = $$props;
	let { warnText = "" } = $$props;
	let { inline = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const ctx = getContext("Form");

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(2, ref);
		});
	}

	const input_handler_1 = ({ target }) => {
		$$invalidate(0, value = target.value);
	};

	const click_handler_1 = () => {
		$$invalidate(1, type = type === 'password' ? 'text' : 'password');
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ('placeholder' in $$new_props) $$invalidate(4, placeholder = $$new_props.placeholder);
		if ('hidePasswordLabel' in $$new_props) $$invalidate(5, hidePasswordLabel = $$new_props.hidePasswordLabel);
		if ('showPasswordLabel' in $$new_props) $$invalidate(6, showPasswordLabel = $$new_props.showPasswordLabel);
		if ('tooltipAlignment' in $$new_props) $$invalidate(7, tooltipAlignment = $$new_props.tooltipAlignment);
		if ('tooltipPosition' in $$new_props) $$invalidate(8, tooltipPosition = $$new_props.tooltipPosition);
		if ('light' in $$new_props) $$invalidate(9, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(10, disabled = $$new_props.disabled);
		if ('helperText' in $$new_props) $$invalidate(11, helperText = $$new_props.helperText);
		if ('labelText' in $$new_props) $$invalidate(12, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(13, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(14, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(15, invalidText = $$new_props.invalidText);
		if ('warn' in $$new_props) $$invalidate(16, warn = $$new_props.warn);
		if ('warnText' in $$new_props) $$invalidate(17, warnText = $$new_props.warnText);
		if ('inline' in $$new_props) $$invalidate(18, inline = $$new_props.inline);
		if ('id' in $$new_props) $$invalidate(19, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(20, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(2, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(26, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*id*/ 524288) {
			$$invalidate(22, errorId = `error-${id}`);
		}

		if ($$self.$$.dirty[0] & /*id*/ 524288) {
			$$invalidate(21, warnId = `warn-${id}`);
		}
	};

	$$invalidate(23, isFluid = !!ctx && ctx.isFluid);

	return [
		value,
		type,
		ref,
		size,
		placeholder,
		hidePasswordLabel,
		showPasswordLabel,
		tooltipAlignment,
		tooltipPosition,
		light,
		disabled,
		helperText,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		warn,
		warnText,
		inline,
		id,
		name,
		warnId,
		errorId,
		isFluid,
		$$slots,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		input_binding,
		input_handler_1,
		click_handler_1
	];
}

class PasswordInput extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$I,
			create_fragment$I,
			safe_not_equal,
			{
				size: 3,
				value: 0,
				type: 1,
				placeholder: 4,
				hidePasswordLabel: 5,
				showPasswordLabel: 6,
				tooltipAlignment: 7,
				tooltipPosition: 8,
				light: 9,
				disabled: 10,
				helperText: 11,
				labelText: 12,
				hideLabel: 13,
				invalid: 14,
				invalidText: 15,
				warn: 16,
				warnText: 17,
				inline: 18,
				id: 19,
				name: 20,
				ref: 2
			},
			null,
			[-1, -1]
		);
	}
}

var PasswordInput$1 = PasswordInput;

/* src/Toggle/Toggle.svelte generated by Svelte v3.49.0 */
const get_labelB_slot_changes = dirty => ({});
const get_labelB_slot_context = ctx => ({});
const get_labelA_slot_changes = dirty => ({});
const get_labelA_slot_context = ctx => ({});
const get_labelText_slot_changes$4 = dirty => ({});
const get_labelText_slot_context$4 = ctx => ({});

// (85:29)          
function fallback_block_2$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 32) set_data(t, /*labelText*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (94:28)            
function fallback_block_1$4(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelA*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelA*/ 8) set_data(t, /*labelA*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (99:28)            
function fallback_block$g(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelB*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelB*/ 16) set_data(t, /*labelB*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$H(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let span0;
	let t1;
	let span3;
	let span1;
	let t2;
	let span2;
	let span3_style_value;
	let label_aria_label_value;
	let div_style_value;
	let current;
	let mounted;
	let dispose;
	const labelText_slot_template = /*#slots*/ ctx[12].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[11], get_labelText_slot_context$4);
	const labelText_slot_or_fallback = labelText_slot || fallback_block_2$2(ctx);
	const labelA_slot_template = /*#slots*/ ctx[12].labelA;
	const labelA_slot = create_slot(labelA_slot_template, ctx, /*$$scope*/ ctx[11], get_labelA_slot_context);
	const labelA_slot_or_fallback = labelA_slot || fallback_block_1$4(ctx);
	const labelB_slot_template = /*#slots*/ ctx[12].labelB;
	const labelB_slot = create_slot(labelB_slot_template, ctx, /*$$scope*/ ctx[11], get_labelB_slot_context);
	const labelB_slot_or_fallback = labelB_slot || fallback_block$g(ctx);

	let div_levels = [
		/*$$restProps*/ ctx[9],
		{
			style: div_style_value = "" + (/*$$restProps*/ ctx[9]['style'] + "; user-select: none")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			t1 = space();
			span3 = element("span");
			span1 = element("span");
			if (labelA_slot_or_fallback) labelA_slot_or_fallback.c();
			t2 = space();
			span2 = element("span");
			if (labelB_slot_or_fallback) labelB_slot_or_fallback.c();
			attr(input, "role", "switch");
			attr(input, "type", "checkbox");
			input.checked = /*toggled*/ ctx[0];
			input.disabled = /*disabled*/ ctx[2];
			attr(input, "id", /*id*/ ctx[7]);
			attr(input, "name", /*name*/ ctx[8]);
			toggle_class(input, "bx--toggle-input", true);
			toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === 'sm');
			toggle_class(span0, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			attr(span1, "aria-hidden", "true");
			toggle_class(span1, "bx--toggle__text--off", true);
			attr(span2, "aria-hidden", "true");
			toggle_class(span2, "bx--toggle__text--on", true);
			attr(span3, "style", span3_style_value = /*hideLabel*/ ctx[6] && 'margin-top: 0');
			toggle_class(span3, "bx--toggle__switch", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[10]['aria-label'] || 'Toggle');

			attr(label, "for", /*id*/ ctx[7]);
			toggle_class(label, "bx--toggle-input__label", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			append(label, span0);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span0, null);
			}

			append(label, t1);
			append(label, span3);
			append(span3, span1);

			if (labelA_slot_or_fallback) {
				labelA_slot_or_fallback.m(span1, null);
			}

			append(span3, t2);
			append(span3, span2);

			if (labelB_slot_or_fallback) {
				labelB_slot_or_fallback.m(span2, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[17]),
					listen(input, "change", /*change_handler_1*/ ctx[21]),
					listen(input, "keyup", /*keyup_handler*/ ctx[18]),
					listen(input, "keyup", /*keyup_handler_1*/ ctx[22]),
					listen(input, "focus", /*focus_handler*/ ctx[19]),
					listen(input, "blur", /*blur_handler*/ ctx[20]),
					listen(div, "click", /*click_handler*/ ctx[13]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*toggled*/ 1) {
				input.checked = /*toggled*/ ctx[0];
			}

			if (!current || dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*id*/ 128) {
				attr(input, "id", /*id*/ ctx[7]);
			}

			if (!current || dirty & /*name*/ 256) {
				attr(input, "name", /*name*/ ctx[8]);
			}

			if (dirty & /*size*/ 2) {
				toggle_class(input, "bx--toggle-input--small", /*size*/ ctx[1] === 'sm');
			}

			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[11], dirty, get_labelText_slot_changes$4),
						get_labelText_slot_context$4
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 32)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (dirty & /*hideLabel*/ 64) {
				toggle_class(span0, "bx--visually-hidden", /*hideLabel*/ ctx[6]);
			}

			if (labelA_slot) {
				if (labelA_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelA_slot,
						labelA_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelA_slot_template, /*$$scope*/ ctx[11], dirty, get_labelA_slot_changes),
						get_labelA_slot_context
					);
				}
			} else {
				if (labelA_slot_or_fallback && labelA_slot_or_fallback.p && (!current || dirty & /*labelA*/ 8)) {
					labelA_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (labelB_slot) {
				if (labelB_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelB_slot,
						labelB_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelB_slot_template, /*$$scope*/ ctx[11], dirty, get_labelB_slot_changes),
						get_labelB_slot_context
					);
				}
			} else {
				if (labelB_slot_or_fallback && labelB_slot_or_fallback.p && (!current || dirty & /*labelB*/ 16)) {
					labelB_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*hideLabel*/ 64 && span3_style_value !== (span3_style_value = /*hideLabel*/ ctx[6] && 'margin-top: 0')) {
				attr(span3, "style", span3_style_value);
			}

			if (!current || dirty & /*labelText, $$props*/ 1056 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[5]
			? undefined
			: /*$$props*/ ctx[10]['aria-label'] || 'Toggle')) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (!current || dirty & /*id*/ 128) {
				attr(label, "for", /*id*/ ctx[7]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty & /*$$restProps*/ 512 && /*$$restProps*/ ctx[9],
				(!current || dirty & /*$$restProps*/ 512 && div_style_value !== (div_style_value = "" + (/*$$restProps*/ ctx[9]['style'] + "; user-select: none"))) && { style: div_style_value }
			]));

			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			transition_in(labelA_slot_or_fallback, local);
			transition_in(labelB_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			transition_out(labelA_slot_or_fallback, local);
			transition_out(labelB_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
			if (labelA_slot_or_fallback) labelA_slot_or_fallback.d(detaching);
			if (labelB_slot_or_fallback) labelB_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$H($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","toggled","disabled","labelA","labelB","labelText","hideLabel","id","name"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = "default" } = $$props;
	let { toggled = false } = $$props;
	let { disabled = false } = $$props;
	let { labelA = "Off" } = $$props;
	let { labelB = "On" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler_1 = () => {
		$$invalidate(0, toggled = !toggled);
	};

	const keyup_handler_1 = e => {
		if (e.key === ' ' || e.key === 'Enter') {
			e.preventDefault();
			$$invalidate(0, toggled = !toggled);
		}
	};

	$$self.$$set = $$new_props => {
		$$invalidate(10, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		if ('toggled' in $$new_props) $$invalidate(0, toggled = $$new_props.toggled);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('labelA' in $$new_props) $$invalidate(3, labelA = $$new_props.labelA);
		if ('labelB' in $$new_props) $$invalidate(4, labelB = $$new_props.labelB);
		if ('labelText' in $$new_props) $$invalidate(5, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(6, hideLabel = $$new_props.hideLabel);
		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(8, name = $$new_props.name);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*toggled*/ 1) {
			dispatch("toggle", { toggled });
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		toggled,
		size,
		disabled,
		labelA,
		labelB,
		labelText,
		hideLabel,
		id,
		name,
		$$restProps,
		$$props,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		change_handler_1,
		keyup_handler_1
	];
}

class Toggle extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
			size: 1,
			toggled: 0,
			disabled: 2,
			labelA: 3,
			labelB: 4,
			labelText: 5,
			hideLabel: 6,
			id: 7,
			name: 8
		});
	}
}

var Toggle$1 = Toggle;

/* src/Theme/Theme.svelte generated by Svelte v3.49.0 */
const get_default_slot_changes$1 = dirty => ({ theme: dirty & /*theme*/ 1 });
const get_default_slot_context$1 = ctx => ({ theme: /*theme*/ ctx[0] });

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	return child_ctx;
}

// (98:0) {#if persist}
function create_if_block_2$2(ctx) {
	let localstorage;
	let updating_value;
	let current;

	function localstorage_value_binding(value) {
		/*localstorage_value_binding*/ ctx[9](value);
	}

	let localstorage_props = { key: /*persistKey*/ ctx[2] };

	if (/*theme*/ ctx[0] !== void 0) {
		localstorage_props.value = /*theme*/ ctx[0];
	}

	localstorage = new LocalStorage$1({ props: localstorage_props });
	binding_callbacks.push(() => bind(localstorage, 'value', localstorage_value_binding));

	return {
		c() {
			create_component(localstorage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(localstorage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const localstorage_changes = {};
			if (dirty & /*persistKey*/ 4) localstorage_changes.key = /*persistKey*/ ctx[2];

			if (!updating_value && dirty & /*theme*/ 1) {
				updating_value = true;
				localstorage_changes.value = /*theme*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			localstorage.$set(localstorage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(localstorage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(localstorage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(localstorage, detaching);
		}
	};
}

// (110:30) 
function create_if_block_1$6(ctx) {
	let select_1;
	let updating_selected;
	let current;
	const select_1_spread_levels = [/*select*/ ctx[5]];

	function select_1_selected_binding(value) {
		/*select_1_selected_binding*/ ctx[11](value);
	}

	let select_1_props = {
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	for (let i = 0; i < select_1_spread_levels.length; i += 1) {
		select_1_props = assign(select_1_props, select_1_spread_levels[i]);
	}

	if (/*theme*/ ctx[0] !== void 0) {
		select_1_props.selected = /*theme*/ ctx[0];
	}

	select_1 = new Select$1({ props: select_1_props });
	binding_callbacks.push(() => bind(select_1, 'selected', select_1_selected_binding));

	return {
		c() {
			create_component(select_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(select_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const select_1_changes = (dirty & /*select*/ 32)
			? get_spread_update(select_1_spread_levels, [get_spread_object(/*select*/ ctx[5])])
			: {};

			if (dirty & /*$$scope, select*/ 4128) {
				select_1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*theme*/ 1) {
				updating_selected = true;
				select_1_changes.selected = /*theme*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			select_1.$set(select_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(select_1, detaching);
		}
	};
}

// (102:0) {#if render === "toggle"}
function create_if_block$i(ctx) {
	let toggle_1;
	let current;

	const toggle_1_spread_levels = [
		/*toggle*/ ctx[4],
		{
			toggled: /*theme*/ ctx[0] === /*toggle*/ ctx[4].themes[1]
		}
	];

	let toggle_1_props = {};

	for (let i = 0; i < toggle_1_spread_levels.length; i += 1) {
		toggle_1_props = assign(toggle_1_props, toggle_1_spread_levels[i]);
	}

	toggle_1 = new Toggle$1({ props: toggle_1_props });
	toggle_1.$on("toggle", /*toggle_handler*/ ctx[10]);

	return {
		c() {
			create_component(toggle_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(toggle_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const toggle_1_changes = (dirty & /*toggle, theme*/ 17)
			? get_spread_update(toggle_1_spread_levels, [
					dirty & /*toggle*/ 16 && get_spread_object(/*toggle*/ ctx[4]),
					{
						toggled: /*theme*/ ctx[0] === /*toggle*/ ctx[4].themes[1]
					}
				])
			: {};

			toggle_1.$set(toggle_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(toggle_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(toggle_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(toggle_1, detaching);
		}
	};
}

// (112:4) {#each select.themes as theme (theme)}
function create_each_block$2(key_1, ctx) {
	let first;
	let selectitem;
	let current;

	selectitem = new SelectItem$1({
			props: {
				value: /*theme*/ ctx[0],
				text: /*themes*/ ctx[6][/*theme*/ ctx[0]]
			}
		});

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(selectitem.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(selectitem, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const selectitem_changes = {};
			if (dirty & /*select*/ 32) selectitem_changes.value = /*theme*/ ctx[0];
			if (dirty & /*select*/ 32) selectitem_changes.text = /*themes*/ ctx[6][/*theme*/ ctx[0]];
			selectitem.$set(selectitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(selectitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(selectitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(selectitem, detaching);
		}
	};
}

// (111:2) <Select {...select} bind:selected="{theme}">
function create_default_slot$1(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*select*/ ctx[5].themes;
	const get_key = ctx => /*theme*/ ctx[0];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$2(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*select, themes*/ 96) {
				each_value = /*select*/ ctx[5].themes;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$2, each_1_anchor, get_each_context$2);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

function create_fragment$G(ctx) {
	let t0;
	let current_block_type_index;
	let if_block1;
	let t1;
	let current;
	let if_block0 = /*persist*/ ctx[1] && create_if_block_2$2(ctx);
	const if_block_creators = [create_if_block$i, create_if_block_1$6];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*render*/ ctx[3] === "toggle") return 0;
		if (/*render*/ ctx[3] === "select") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context$1);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, t1, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*persist*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*persist*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block1) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block1 = if_blocks[current_block_type_index];

					if (!if_block1) {
						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block1.c();
					} else {
						if_block1.p(ctx, dirty);
					}

					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				} else {
					if_block1 = null;
				}
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, theme*/ 4097)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes$1),
						get_default_slot_context$1
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(t1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$G($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { theme = "white" } = $$props;
	let { tokens = {} } = $$props;
	let { persist = false } = $$props;
	let { persistKey = "theme" } = $$props;
	let { render = undefined } = $$props;

	let { toggle = {
		themes: ["white", "g100"],
		labelA: "",
		labelB: "",
		labelText: "Dark mode",
		hideLabel: false
	} } = $$props;

	/** @type {Record<CarbonTheme, string>} */
	const themes = {
		white: "White",
		g10: "Gray 10",
		g80: "Gray 80",
		g90: "Gray 90",
		g100: "Gray 100"
	};

	/** @type {CarbonTheme} */
	const themeKeys = Object.keys(themes);

	let { select = {
		themes: themeKeys,
		labelText: "Themes",
		hideLabel: false
	} } = $$props;

	const dispatch = createEventDispatcher();

	function localstorage_value_binding(value) {
		theme = value;
		$$invalidate(0, theme);
	}

	const toggle_handler = ({ detail }) => {
		$$invalidate(0, theme = detail.toggled ? toggle.themes[1] : toggle.themes[0]);
	};

	function select_1_selected_binding(value) {
		theme = value;
		$$invalidate(0, theme);
	}

	$$self.$$set = $$props => {
		if ('theme' in $$props) $$invalidate(0, theme = $$props.theme);
		if ('tokens' in $$props) $$invalidate(7, tokens = $$props.tokens);
		if ('persist' in $$props) $$invalidate(1, persist = $$props.persist);
		if ('persistKey' in $$props) $$invalidate(2, persistKey = $$props.persistKey);
		if ('render' in $$props) $$invalidate(3, render = $$props.render);
		if ('toggle' in $$props) $$invalidate(4, toggle = $$props.toggle);
		if ('select' in $$props) $$invalidate(5, select = $$props.select);
		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*tokens, theme*/ 129) {
			if (typeof window !== "undefined") {
				Object.entries(tokens).forEach(([token, value]) => {
					document.documentElement.style.setProperty(`--cds-${token}`, value);
				});

				if (theme in themes) {
					document.documentElement.setAttribute("theme", theme);
					dispatch("update", { theme });
				} else {
					console.warn(`[Theme.svelte] invalid theme "${theme}". Value must be one of: ${JSON.stringify(Object.keys(themes))}`);
				}
			}
		}
	};

	return [
		theme,
		persist,
		persistKey,
		render,
		toggle,
		select,
		themes,
		tokens,
		slots,
		localstorage_value_binding,
		toggle_handler,
		select_1_selected_binding,
		$$scope
	];
}

class Theme extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$G, create_fragment$G, safe_not_equal, {
			theme: 0,
			tokens: 7,
			persist: 1,
			persistKey: 2,
			render: 3,
			toggle: 4,
			select: 5
		});
	}
}

var Theme$1 = Theme;

/* src/Tile/Tile.svelte generated by Svelte v3.49.0 */

function create_fragment$F(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let div_levels = [/*$$restProps*/ ctx[1]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[4]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[5]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[6]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(div, "bx--tile", true);
			toggle_class(div, "bx--tile--light", /*light*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$F($$self, $$props, $$invalidate) {
	const omit_props_names = ["light"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { light = false } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('light' in $$new_props) $$invalidate(0, light = $$new_props.light);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [
		light,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class Tile extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$F, create_fragment$F, safe_not_equal, { light: 0 });
	}
}

var Tile$1 = Tile;

/* src/Tile/ClickableTile.svelte generated by Svelte v3.49.0 */

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$E(ctx) {
	let link;
	let current;

	const link_spread_levels = [
		/*$$restProps*/ ctx[4],
		{ disabled: /*disabled*/ ctx[2] },
		{
			class: "bx--tile bx--tile--clickable " + (/*clicked*/ ctx[0] && 'bx--tile--is-clicked') + " " + (/*light*/ ctx[1] && 'bx--tile--light') + " " + /*$$restProps*/ ctx[4].class
		},
		{ href: /*href*/ ctx[3] }
	];

	let link_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < link_spread_levels.length; i += 1) {
		link_props = assign(link_props, link_spread_levels[i]);
	}

	link = new Link$1({ props: link_props });
	link.$on("click", /*click_handler*/ ctx[6]);
	link.$on("click", /*click_handler_1*/ ctx[7]);
	link.$on("keydown", /*keydown_handler*/ ctx[8]);
	link.$on("keydown", /*keydown_handler_1*/ ctx[9]);
	link.$on("mouseover", /*mouseover_handler*/ ctx[10]);
	link.$on("mouseenter", /*mouseenter_handler*/ ctx[11]);
	link.$on("mouseleave", /*mouseleave_handler*/ ctx[12]);

	return {
		c() {
			create_component(link.$$.fragment);
		},
		m(target, anchor) {
			mount_component(link, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const link_changes = (dirty & /*$$restProps, disabled, clicked, light, href*/ 31)
			? get_spread_update(link_spread_levels, [
					dirty & /*$$restProps*/ 16 && get_spread_object(/*$$restProps*/ ctx[4]),
					dirty & /*disabled*/ 4 && { disabled: /*disabled*/ ctx[2] },
					dirty & /*clicked, light, $$restProps*/ 19 && {
						class: "bx--tile bx--tile--clickable " + (/*clicked*/ ctx[0] && 'bx--tile--is-clicked') + " " + (/*light*/ ctx[1] && 'bx--tile--light') + " " + /*$$restProps*/ ctx[4].class
					},
					dirty & /*href*/ 8 && { href: /*href*/ ctx[3] }
				])
			: {};

			if (dirty & /*$$scope*/ 8192) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(link, detaching);
		}
	};
}

function instance$E($$self, $$props, $$invalidate) {
	const omit_props_names = ["clicked","light","disabled","href"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { clicked = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { href = undefined } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => {
		$$invalidate(0, clicked = !clicked);
	};

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler_1 = ({ key }) => {
		if (key === ' ' || key === 'Enter') {
			$$invalidate(0, clicked = !clicked);
		}
	};

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('clicked' in $$new_props) $$invalidate(0, clicked = $$new_props.clicked);
		if ('light' in $$new_props) $$invalidate(1, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	return [
		clicked,
		light,
		disabled,
		href,
		$$restProps,
		slots,
		click_handler,
		click_handler_1,
		keydown_handler,
		keydown_handler_1,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		$$scope
	];
}

class ClickableTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
			clicked: 0,
			light: 1,
			disabled: 2,
			href: 3
		});
	}
}

var ClickableTile$1 = ClickableTile;

/* src/Tile/ExpandableTile.svelte generated by Svelte v3.49.0 */
const get_below_slot_changes = dirty => ({});
const get_below_slot_context = ctx => ({});
const get_above_slot_changes = dirty => ({});
const get_above_slot_context = ctx => ({});

function create_fragment$D(ctx) {
	let button;
	let div3;
	let div0;
	let span0;
	let t0;
	let div1;
	let span1;

	let t1_value = (/*expanded*/ ctx[0]
	? /*tileExpandedLabel*/ ctx[7]
	: /*tileCollapsedLabel*/ ctx[8]) + "";

	let t1;
	let t2;
	let chevrondown;
	let t3;
	let div2;
	let span2;
	let button_title_value;
	let button_style_value;
	let current;
	let mounted;
	let dispose;
	const above_slot_template = /*#slots*/ ctx[14].above;
	const above_slot = create_slot(above_slot_template, ctx, /*$$scope*/ ctx[13], get_above_slot_context);
	chevrondown = new ChevronDown$1({});
	const below_slot_template = /*#slots*/ ctx[14].below;
	const below_slot = create_slot(below_slot_template, ctx, /*$$scope*/ ctx[13], get_below_slot_context);

	let button_levels = [
		{ type: "button" },
		{ id: /*id*/ ctx[10] },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[9] },
		{
			title: button_title_value = /*expanded*/ ctx[0]
			? /*tileExpandedIconText*/ ctx[6]
			: /*tileCollapsedIconText*/ ctx[5]
		},
		/*$$restProps*/ ctx[12],
		{
			style: button_style_value = /*expanded*/ ctx[0]
			? /*$$restProps*/ ctx[12].style
			: `${/*$$restProps*/ ctx[12].style}; max-height: ${/*tileMaxHeight*/ ctx[1] + /*tilePadding*/ ctx[2]}px`
		}
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			div3 = element("div");
			div0 = element("div");
			span0 = element("span");
			if (above_slot) above_slot.c();
			t0 = space();
			div1 = element("div");
			span1 = element("span");
			t1 = text(t1_value);
			t2 = space();
			create_component(chevrondown.$$.fragment);
			t3 = space();
			div2 = element("div");
			span2 = element("span");
			if (below_slot) below_slot.c();
			toggle_class(span0, "bx--tile-content__above-the-fold", true);
			toggle_class(div0, "bx--tile-content", true);
			toggle_class(div1, "bx--tile__chevron", true);
			toggle_class(span2, "bx--tile-content__below-the-fold", true);
			toggle_class(div2, "bx--tile-content", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--tile", true);
			toggle_class(button, "bx--tile--expandable", true);
			toggle_class(button, "bx--tile--is-expanded", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--tile--light", /*light*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, div3);
			append(div3, div0);
			append(div0, span0);

			if (above_slot) {
				above_slot.m(span0, null);
			}

			/*div0_binding*/ ctx[20](div0);
			append(div3, t0);
			append(div3, div1);
			append(div1, span1);
			append(span1, t1);
			append(div1, t2);
			mount_component(chevrondown, div1, null);
			append(div3, t3);
			append(div3, div2);
			append(div2, span2);

			if (below_slot) {
				below_slot.m(span2, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[21](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[15]),
					listen(button, "click", /*click_handler_1*/ ctx[22]),
					listen(button, "keypress", /*keypress_handler*/ ctx[16]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[17]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[18]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (above_slot) {
				if (above_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						above_slot,
						above_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(above_slot_template, /*$$scope*/ ctx[13], dirty, get_above_slot_changes),
						get_above_slot_context
					);
				}
			}

			if ((!current || dirty & /*expanded, tileExpandedLabel, tileCollapsedLabel*/ 385) && t1_value !== (t1_value = (/*expanded*/ ctx[0]
			? /*tileExpandedLabel*/ ctx[7]
			: /*tileCollapsedLabel*/ ctx[8]) + "")) set_data(t1, t1_value);

			if (below_slot) {
				if (below_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						below_slot,
						below_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(below_slot_template, /*$$scope*/ ctx[13], dirty, get_below_slot_changes),
						get_below_slot_context
					);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*id*/ 1024) && { id: /*id*/ ctx[10] },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 512) && { tabindex: /*tabindex*/ ctx[9] },
				(!current || dirty & /*expanded, tileExpandedIconText, tileCollapsedIconText*/ 97 && button_title_value !== (button_title_value = /*expanded*/ ctx[0]
				? /*tileExpandedIconText*/ ctx[6]
				: /*tileCollapsedIconText*/ ctx[5])) && { title: button_title_value },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12],
				(!current || dirty & /*expanded, $$restProps, tileMaxHeight, tilePadding*/ 4103 && button_style_value !== (button_style_value = /*expanded*/ ctx[0]
				? /*$$restProps*/ ctx[12].style
				: `${/*$$restProps*/ ctx[12].style}; max-height: ${/*tileMaxHeight*/ ctx[1] + /*tilePadding*/ ctx[2]}px`)) && { style: button_style_value }
			]));

			toggle_class(button, "bx--tile", true);
			toggle_class(button, "bx--tile--expandable", true);
			toggle_class(button, "bx--tile--is-expanded", /*expanded*/ ctx[0]);
			toggle_class(button, "bx--tile--light", /*light*/ ctx[4]);
		},
		i(local) {
			if (current) return;
			transition_in(above_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(below_slot, local);
			current = true;
		},
		o(local) {
			transition_out(above_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(below_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (above_slot) above_slot.d(detaching);
			/*div0_binding*/ ctx[20](null);
			destroy_component(chevrondown);
			if (below_slot) below_slot.d(detaching);
			/*button_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$D($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"expanded","light","tileMaxHeight","tilePadding","tileCollapsedIconText","tileExpandedIconText","tileExpandedLabel","tileCollapsedLabel","tabindex","id","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expanded = false } = $$props;
	let { light = false } = $$props;
	let { tileMaxHeight = 0 } = $$props;
	let { tilePadding = 0 } = $$props;
	let { tileCollapsedIconText = "Interact to expand Tile" } = $$props;
	let { tileExpandedIconText = "Interact to collapse Tile" } = $$props;
	let { tileExpandedLabel = "" } = $$props;
	let { tileCollapsedLabel = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	let refAbove = null;

	afterUpdate(() => {
		if (tileMaxHeight === 0) {
			$$invalidate(1, tileMaxHeight = refAbove.getBoundingClientRect().height);
		}

		const style = getComputedStyle(ref);
		$$invalidate(2, tilePadding = parseInt(style.getPropertyValue("padding-top"), 10) + parseInt(style.getPropertyValue("padding-bottom"), 10));
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keypress_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refAbove = $$value;
			$$invalidate(11, refAbove);
		});
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(3, ref);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
		if ('tileMaxHeight' in $$new_props) $$invalidate(1, tileMaxHeight = $$new_props.tileMaxHeight);
		if ('tilePadding' in $$new_props) $$invalidate(2, tilePadding = $$new_props.tilePadding);
		if ('tileCollapsedIconText' in $$new_props) $$invalidate(5, tileCollapsedIconText = $$new_props.tileCollapsedIconText);
		if ('tileExpandedIconText' in $$new_props) $$invalidate(6, tileExpandedIconText = $$new_props.tileExpandedIconText);
		if ('tileExpandedLabel' in $$new_props) $$invalidate(7, tileExpandedLabel = $$new_props.tileExpandedLabel);
		if ('tileCollapsedLabel' in $$new_props) $$invalidate(8, tileCollapsedLabel = $$new_props.tileCollapsedLabel);
		if ('tabindex' in $$new_props) $$invalidate(9, tabindex = $$new_props.tabindex);
		if ('id' in $$new_props) $$invalidate(10, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(3, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
	};

	return [
		expanded,
		tileMaxHeight,
		tilePadding,
		ref,
		light,
		tileCollapsedIconText,
		tileExpandedIconText,
		tileExpandedLabel,
		tileCollapsedLabel,
		tabindex,
		id,
		refAbove,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		keypress_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		div0_binding,
		button_binding,
		click_handler_1
	];
}

class ExpandableTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$D, create_fragment$D, safe_not_equal, {
			expanded: 0,
			light: 4,
			tileMaxHeight: 1,
			tilePadding: 2,
			tileCollapsedIconText: 5,
			tileExpandedIconText: 6,
			tileExpandedLabel: 7,
			tileCollapsedLabel: 8,
			tabindex: 9,
			id: 10,
			ref: 3
		});
	}
}

var ExpandableTile$1 = ExpandableTile;

/* src/Tile/SelectableTile.svelte generated by Svelte v3.49.0 */

function create_fragment$C(ctx) {
	let input;
	let t0;
	let label;
	let span0;
	let checkmarkfilled;
	let t1;
	let span1;
	let label_tabindex_value;
	let current;
	let mounted;
	let dispose;

	checkmarkfilled = new CheckmarkFilled$1({
			props: {
				"aria-label": /*iconDescription*/ ctx[7],
				title: /*iconDescription*/ ctx[7]
			}
		});

	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	let label_levels = [
		{ for: /*id*/ ctx[8] },
		{
			tabindex: label_tabindex_value = /*disabled*/ ctx[3] ? undefined : /*tabindex*/ ctx[6]
		},
		/*$$restProps*/ ctx[10]
	];

	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			create_component(checkmarkfilled.$$.fragment);
			t1 = space();
			span1 = element("span");
			if (default_slot) default_slot.c();
			attr(input, "type", "checkbox");
			attr(input, "tabindex", "-1");
			input.checked = /*selected*/ ctx[0];
			attr(input, "id", /*id*/ ctx[8]);
			input.value = /*value*/ ctx[5];
			attr(input, "name", /*name*/ ctx[9]);
			attr(input, "title", /*title*/ ctx[4]);
			input.disabled = /*disabled*/ ctx[3];
			toggle_class(input, "bx--tile-input", true);
			toggle_class(span0, "bx--tile__checkmark", true);
			toggle_class(span1, "bx--tile-content", true);
			set_attributes(label, label_data);
			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*selected*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[2]);
			toggle_class(label, "bx--tile--disabled", /*disabled*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			/*input_binding*/ ctx[18](input);
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, span0);
			mount_component(checkmarkfilled, span0, null);
			append(label, t1);
			append(label, span1);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(label, "click", /*click_handler*/ ctx[13]),
					listen(label, "click", prevent_default(/*click_handler_1*/ ctx[19])),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[16]),
					listen(label, "keydown", /*keydown_handler*/ ctx[17]),
					listen(label, "keydown", /*keydown_handler_1*/ ctx[20])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*selected*/ 1) {
				input.checked = /*selected*/ ctx[0];
			}

			if (!current || dirty & /*id*/ 256) {
				attr(input, "id", /*id*/ ctx[8]);
			}

			if (!current || dirty & /*value*/ 32) {
				input.value = /*value*/ ctx[5];
			}

			if (!current || dirty & /*name*/ 512) {
				attr(input, "name", /*name*/ ctx[9]);
			}

			if (!current || dirty & /*title*/ 16) {
				attr(input, "title", /*title*/ ctx[4]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				input.disabled = /*disabled*/ ctx[3];
			}

			const checkmarkfilled_changes = {};
			if (dirty & /*iconDescription*/ 128) checkmarkfilled_changes["aria-label"] = /*iconDescription*/ ctx[7];
			if (dirty & /*iconDescription*/ 128) checkmarkfilled_changes.title = /*iconDescription*/ ctx[7];
			checkmarkfilled.$set(checkmarkfilled_changes);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 256) && { for: /*id*/ ctx[8] },
				(!current || dirty & /*disabled, tabindex*/ 72 && label_tabindex_value !== (label_tabindex_value = /*disabled*/ ctx[3] ? undefined : /*tabindex*/ ctx[6])) && { tabindex: label_tabindex_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*selected*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[2]);
			toggle_class(label, "bx--tile--disabled", /*disabled*/ ctx[3]);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			/*input_binding*/ ctx[18](null);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			destroy_component(checkmarkfilled);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$C($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"selected","light","disabled","title","value","tabindex","iconDescription","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { title = "title" } = $$props;
	let { value = "value" } = $$props;
	let { tabindex = "0" } = $$props;
	let { iconDescription = "Tile checkmark" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		if (disabled) return;
		$$invalidate(0, selected = !selected);
	};

	const keydown_handler_1 = e => {
		if (disabled) return;

		if (e.key === ' ' || e.key === 'Enter') {
			e.preventDefault();
			$$invalidate(0, selected = !selected);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ('light' in $$new_props) $$invalidate(2, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('title' in $$new_props) $$invalidate(4, title = $$new_props.title);
		if ('value' in $$new_props) $$invalidate(5, value = $$new_props.value);
		if ('tabindex' in $$new_props) $$invalidate(6, tabindex = $$new_props.tabindex);
		if ('iconDescription' in $$new_props) $$invalidate(7, iconDescription = $$new_props.iconDescription);
		if ('id' in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(9, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*disabled, selected, id*/ 265) {
			if (!disabled) dispatch(selected ? "select" : "deselect", id);
		}
	};

	return [
		selected,
		ref,
		light,
		disabled,
		title,
		value,
		tabindex,
		iconDescription,
		id,
		name,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keydown_handler,
		input_binding,
		click_handler_1,
		keydown_handler_1
	];
}

class SelectableTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$C, create_fragment$C, safe_not_equal, {
			selected: 0,
			light: 2,
			disabled: 3,
			title: 4,
			value: 5,
			tabindex: 6,
			iconDescription: 7,
			id: 8,
			name: 9,
			ref: 1
		});
	}
}

var SelectableTile$1 = SelectableTile;

/* src/Tile/RadioTile.svelte generated by Svelte v3.49.0 */

function create_fragment$B(ctx) {
	let input;
	let input_tabindex_value;
	let t0;
	let label;
	let span0;
	let checkmarkfilled;
	let t1;
	let span1;
	let current;
	let mounted;
	let dispose;

	checkmarkfilled = new CheckmarkFilled$1({
			props: {
				"aria-label": /*iconDescription*/ ctx[5],
				title: /*iconDescription*/ ctx[5]
			}
		});

	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);
	let label_levels = [{ for: /*id*/ ctx[6] }, /*$$restProps*/ ctx[10]];
	let label_data = {};

	for (let i = 0; i < label_levels.length; i += 1) {
		label_data = assign(label_data, label_levels[i]);
	}

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			create_component(checkmarkfilled.$$.fragment);
			t1 = space();
			span1 = element("span");
			if (default_slot) default_slot.c();
			attr(input, "type", "radio");
			attr(input, "id", /*id*/ ctx[6]);
			attr(input, "name", /*name*/ ctx[7]);
			input.value = /*value*/ ctx[3];
			input.checked = /*checked*/ ctx[0];
			attr(input, "tabindex", input_tabindex_value = /*disabled*/ ctx[2] ? undefined : /*tabindex*/ ctx[4]);
			input.disabled = /*disabled*/ ctx[2];
			toggle_class(input, "bx--tile-input", true);
			toggle_class(span0, "bx--tile__checkmark", true);
			toggle_class(span1, "bx--tile-content", true);
			set_attributes(label, label_data);
			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*checked*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[1]);
			toggle_class(label, "bx--tile--disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, input, anchor);
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, span0);
			mount_component(checkmarkfilled, span0, null);
			append(label, t1);
			append(label, span1);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*change_handler*/ ctx[18]),
					listen(input, "change", /*change_handler_1*/ ctx[20]),
					listen(input, "keydown", /*keydown_handler*/ ctx[19]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[21]),
					listen(label, "click", /*click_handler*/ ctx[14]),
					listen(label, "mouseover", /*mouseover_handler*/ ctx[15]),
					listen(label, "mouseenter", /*mouseenter_handler*/ ctx[16]),
					listen(label, "mouseleave", /*mouseleave_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 64) {
				attr(input, "id", /*id*/ ctx[6]);
			}

			if (!current || dirty & /*name*/ 128) {
				attr(input, "name", /*name*/ ctx[7]);
			}

			if (!current || dirty & /*value*/ 8) {
				input.value = /*value*/ ctx[3];
			}

			if (!current || dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (!current || dirty & /*disabled, tabindex*/ 20 && input_tabindex_value !== (input_tabindex_value = /*disabled*/ ctx[2] ? undefined : /*tabindex*/ ctx[4])) {
				attr(input, "tabindex", input_tabindex_value);
			}

			if (!current || dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			const checkmarkfilled_changes = {};
			if (dirty & /*iconDescription*/ 32) checkmarkfilled_changes["aria-label"] = /*iconDescription*/ ctx[5];
			if (dirty & /*iconDescription*/ 32) checkmarkfilled_changes.title = /*iconDescription*/ ctx[5];
			checkmarkfilled.$set(checkmarkfilled_changes);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			set_attributes(label, label_data = get_spread_update(label_levels, [
				(!current || dirty & /*id*/ 64) && { for: /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10]
			]));

			toggle_class(label, "bx--tile", true);
			toggle_class(label, "bx--tile--selectable", true);
			toggle_class(label, "bx--tile--is-selected", /*checked*/ ctx[0]);
			toggle_class(label, "bx--tile--light", /*light*/ ctx[1]);
			toggle_class(label, "bx--tile--disabled", /*disabled*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(checkmarkfilled.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(checkmarkfilled.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(input);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			destroy_component(checkmarkfilled);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$B($$self, $$props, $$invalidate) {
	const omit_props_names = ["checked","light","disabled","value","tabindex","iconDescription","id","name"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { checked = false } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { value = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { iconDescription = "Tile checkmark" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = "" } = $$props;
	const { add, update, selectedValue } = getContext("TileGroup");
	component_subscribe($$self, selectedValue, value => $$invalidate(11, $selectedValue = value));
	add({ value, checked });

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler_1 = () => {
		if (disabled) return;
		update(value);
	};

	const keydown_handler_1 = e => {
		if (disabled) return;

		if (e.key === ' ' || e.key === 'Enter') {
			e.preventDefault();
			update(value);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('light' in $$new_props) $$invalidate(1, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ('tabindex' in $$new_props) $$invalidate(4, tabindex = $$new_props.tabindex);
		if ('iconDescription' in $$new_props) $$invalidate(5, iconDescription = $$new_props.iconDescription);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(7, name = $$new_props.name);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, $selectedValue*/ 2056) {
			$$invalidate(0, checked = value === $selectedValue);
		}
	};

	return [
		checked,
		light,
		disabled,
		value,
		tabindex,
		iconDescription,
		id,
		name,
		update,
		selectedValue,
		$$restProps,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		keydown_handler,
		change_handler_1,
		keydown_handler_1
	];
}

class RadioTile extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$B, create_fragment$B, safe_not_equal, {
			checked: 0,
			light: 1,
			disabled: 2,
			value: 3,
			tabindex: 4,
			iconDescription: 5,
			id: 6,
			name: 7
		});
	}
}

var RadioTile$1 = RadioTile;

/* src/Tile/TileGroup.svelte generated by Svelte v3.49.0 */

function create_if_block$h(ctx) {
	let legend_1;
	let t;

	return {
		c() {
			legend_1 = element("legend");
			t = text(/*legend*/ ctx[1]);
			toggle_class(legend_1, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, legend_1, anchor);
			append(legend_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*legend*/ 2) set_data(t, /*legend*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(legend_1);
		}
	};
}

function create_fragment$A(ctx) {
	let fieldset;
	let t;
	let div;
	let current;
	let if_block = /*legend*/ ctx[1] && create_if_block$h(ctx);
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let fieldset_levels = [{ disabled: /*disabled*/ ctx[0] }, /*$$restProps*/ ctx[3]];
	let fieldset_data = {};

	for (let i = 0; i < fieldset_levels.length; i += 1) {
		fieldset_data = assign(fieldset_data, fieldset_levels[i]);
	}

	return {
		c() {
			fieldset = element("fieldset");
			if (if_block) if_block.c();
			t = space();
			div = element("div");
			if (default_slot) default_slot.c();
			set_attributes(fieldset, fieldset_data);
			toggle_class(fieldset, "bx--tile-group", true);
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);
			if (if_block) if_block.m(fieldset, null);
			append(fieldset, t);
			append(fieldset, div);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$h(ctx);
					if_block.c();
					if_block.m(fieldset, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			set_attributes(fieldset, fieldset_data = get_spread_update(fieldset_levels, [
				(!current || dirty & /*disabled*/ 1) && { disabled: /*disabled*/ ctx[0] },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(fieldset, "bx--tile-group", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$A($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","disabled","legend"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = undefined } = $$props;
	let { disabled = false } = $$props;
	let { legend = "" } = $$props;
	const dispatch = createEventDispatcher();
	const selectedValue = writable(selected);
	component_subscribe($$self, selectedValue, value => $$invalidate(5, $selectedValue = value));

	setContext("TileGroup", {
		selectedValue,
		add: ({ checked, value }) => {
			if (checked) {
				selectedValue.set(value);
			}
		},
		update: value => {
			selectedValue.set(value);
			dispatch("select", value);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(4, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(0, disabled = $$new_props.disabled);
		if ('legend' in $$new_props) $$invalidate(1, legend = $$new_props.legend);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 32) {
			$$invalidate(4, selected = $selectedValue);
		}

		if ($$self.$$.dirty & /*selected*/ 16) {
			selectedValue.set(selected);
		}
	};

	return [
		disabled,
		legend,
		selectedValue,
		$$restProps,
		selected,
		$selectedValue,
		$$scope,
		slots
	];
}

class TileGroup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$A, create_fragment$A, safe_not_equal, { selected: 4, disabled: 0, legend: 1 });
	}
}

var TileGroup$1 = TileGroup;

/* src/TimePicker/TimePicker.svelte generated by Svelte v3.49.0 */

const get_labelText_slot_changes$3 = dirty => ({});
const get_labelText_slot_context$3 = ctx => ({});

// (71:6) {#if labelText || $$slots.labelText}
function create_if_block_1$5(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[17].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[16], get_labelText_slot_context$3);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$f(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[12]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[16], dirty, get_labelText_slot_changes$3),
						get_labelText_slot_context$3
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 256)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 4096) {
				attr(label, "for", /*id*/ ctx[12]);
			}

			if (dirty & /*hideLabel*/ 512) {
				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[9]);
			}

			if (dirty & /*disabled*/ 128) {
				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[7]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (78:33)              
function fallback_block$f(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 256) set_data(t, /*labelText*/ ctx[8]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (110:2) {#if invalid}
function create_if_block$g(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*invalidText*/ ctx[11]);
			toggle_class(div, "bx--form-requirement", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*invalidText*/ 2048) set_data(t, /*invalidText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$z(ctx) {
	let div2;
	let div1;
	let div0;
	let t0;
	let input;
	let input_data_invalid_value;
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*labelText*/ ctx[8] || /*$$slots*/ ctx[14].labelText) && create_if_block_1$5(ctx);

	let input_levels = [
		{ type: "text" },
		{
			"data-invalid": input_data_invalid_value = /*invalid*/ ctx[10] || undefined
		},
		{ pattern: /*pattern*/ ctx[4] },
		{ placeholder: /*placeholder*/ ctx[3] },
		{ maxlength: /*maxlength*/ ctx[5] },
		{ id: /*id*/ ctx[12] },
		{ name: /*name*/ ctx[13] },
		{ disabled: /*disabled*/ ctx[7] },
		/*$$restProps*/ ctx[15]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);
	let if_block1 = /*invalid*/ ctx[10] && create_if_block$g(ctx);

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (if_block1) if_block1.c();
			set_attributes(input, input_data);
			toggle_class(input, "bx--time-picker__input-field", true);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[6]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[10]);
			toggle_class(div0, "bx--time-picker__input", true);
			toggle_class(div1, "bx--time-picker", true);
			toggle_class(div1, "bx--time-picker--light", /*light*/ ctx[6]);
			toggle_class(div1, "bx--time-picker--invalid", /*invalid*/ ctx[10]);
			toggle_class(div1, "bx--time-picker--sm", /*size*/ ctx[2] === 'sm');
			toggle_class(div1, "bx--time-picker--xl", /*size*/ ctx[2] === 'xl');
			toggle_class(div1, "bx--select--light", /*light*/ ctx[6]);
			toggle_class(div2, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);
			if (if_block0) if_block0.m(div0, null);
			append(div0, t0);
			append(div0, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[29](input);
			set_input_value(input, /*value*/ ctx[0]);
			append(div1, t1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[30]),
					listen(input, "change", /*change_handler*/ ctx[22]),
					listen(input, "input", /*input_handler*/ ctx[23]),
					listen(input, "keydown", /*keydown_handler*/ ctx[24]),
					listen(input, "keyup", /*keyup_handler*/ ctx[25]),
					listen(input, "focus", /*focus_handler*/ ctx[26]),
					listen(input, "blur", /*blur_handler*/ ctx[27]),
					listen(input, "paste", /*paste_handler*/ ctx[28]),
					listen(div2, "click", /*click_handler*/ ctx[18]),
					listen(div2, "mouseover", /*mouseover_handler*/ ctx[19]),
					listen(div2, "mouseenter", /*mouseenter_handler*/ ctx[20]),
					listen(div2, "mouseleave", /*mouseleave_handler*/ ctx[21])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*labelText*/ ctx[8] || /*$$slots*/ ctx[14].labelText) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*labelText, $$slots*/ 16640) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$5(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div0, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "text" },
				(!current || dirty & /*invalid*/ 1024 && input_data_invalid_value !== (input_data_invalid_value = /*invalid*/ ctx[10] || undefined)) && { "data-invalid": input_data_invalid_value },
				(!current || dirty & /*pattern*/ 16) && { pattern: /*pattern*/ ctx[4] },
				(!current || dirty & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
				(!current || dirty & /*maxlength*/ 32) && { maxlength: /*maxlength*/ ctx[5] },
				(!current || dirty & /*id*/ 4096) && { id: /*id*/ ctx[12] },
				(!current || dirty & /*name*/ 8192) && { name: /*name*/ ctx[13] },
				(!current || dirty & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
				dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]
			]));

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			toggle_class(input, "bx--time-picker__input-field", true);
			toggle_class(input, "bx--text-input", true);
			toggle_class(input, "bx--text-input--light", /*light*/ ctx[6]);
			toggle_class(input, "bx--text-input--invalid", /*invalid*/ ctx[10]);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
						null
					);
				}
			}

			if (dirty & /*light*/ 64) {
				toggle_class(div1, "bx--time-picker--light", /*light*/ ctx[6]);
			}

			if (dirty & /*invalid*/ 1024) {
				toggle_class(div1, "bx--time-picker--invalid", /*invalid*/ ctx[10]);
			}

			if (dirty & /*size*/ 4) {
				toggle_class(div1, "bx--time-picker--sm", /*size*/ ctx[2] === 'sm');
			}

			if (dirty & /*size*/ 4) {
				toggle_class(div1, "bx--time-picker--xl", /*size*/ ctx[2] === 'xl');
			}

			if (dirty & /*light*/ 64) {
				toggle_class(div1, "bx--select--light", /*light*/ ctx[6]);
			}

			if (/*invalid*/ ctx[10]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$g(ctx);
					if_block1.c();
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (if_block0) if_block0.d();
			/*input_binding*/ ctx[29](null);
			if (default_slot) default_slot.d(detaching);
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$z($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"size","value","placeholder","pattern","maxlength","light","disabled","labelText","hideLabel","invalid","invalidText","id","name","ref"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = undefined } = $$props;
	let { value = "" } = $$props;
	let { placeholder = "hh:mm" } = $$props;
	let { pattern = "(1[012]|[1-9]):[0-5][0-9](\\s)?" } = $$props;
	let { maxlength = 5 } = $$props;
	let { light = false } = $$props;
	let { disabled = false } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;
	let { invalid = false } = $$props;
	let { invalidText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(0, value);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
		if ('pattern' in $$new_props) $$invalidate(4, pattern = $$new_props.pattern);
		if ('maxlength' in $$new_props) $$invalidate(5, maxlength = $$new_props.maxlength);
		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ('labelText' in $$new_props) $$invalidate(8, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(9, hideLabel = $$new_props.hideLabel);
		if ('invalid' in $$new_props) $$invalidate(10, invalid = $$new_props.invalid);
		if ('invalidText' in $$new_props) $$invalidate(11, invalidText = $$new_props.invalidText);
		if ('id' in $$new_props) $$invalidate(12, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(13, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	return [
		value,
		ref,
		size,
		placeholder,
		pattern,
		maxlength,
		light,
		disabled,
		labelText,
		hideLabel,
		invalid,
		invalidText,
		id,
		name,
		$$slots,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		change_handler,
		input_handler,
		keydown_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		paste_handler,
		input_binding,
		input_input_handler
	];
}

class TimePicker extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
			size: 2,
			value: 0,
			placeholder: 3,
			pattern: 4,
			maxlength: 5,
			light: 6,
			disabled: 7,
			labelText: 8,
			hideLabel: 9,
			invalid: 10,
			invalidText: 11,
			id: 12,
			name: 13,
			ref: 1
		});
	}
}

var TimePicker$1 = TimePicker;

/* src/TimePicker/TimePickerSelect.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes$2 = dirty => ({});
const get_labelText_slot_context$2 = ctx => ({});

// (51:2) {#if labelText || $$slots.labelText}
function create_if_block$f(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[12].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[11], get_labelText_slot_context$2);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$e(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "for", /*id*/ ctx[5]);
			toggle_class(label, "bx--label", true);
			toggle_class(label, "bx--visually-hidden", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[11], dirty, get_labelText_slot_changes$2),
						get_labelText_slot_context$2
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 16)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 32) {
				attr(label, "for", /*id*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (57:29)          
function fallback_block$e(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 16) set_data(t, /*labelText*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$y(ctx) {
	let div;
	let t0;
	let select;
	let t1;
	let chevrondown;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*labelText*/ ctx[4] || /*$$slots*/ ctx[9].labelText) && create_if_block$f(ctx);
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	chevrondown = new ChevronDown$1({
			props: {
				"aria-label": /*iconDescription*/ ctx[3],
				title: /*iconDescription*/ ctx[3],
				class: "bx--select__arrow"
			}
		});

	let div_levels = [/*$$restProps*/ ctx[8]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			select = element("select");
			if (default_slot) default_slot.c();
			t1 = space();
			create_component(chevrondown.$$.fragment);
			attr(select, "id", /*id*/ ctx[5]);
			attr(select, "name", /*name*/ ctx[6]);
			select.disabled = /*disabled*/ ctx[2];
			toggle_class(select, "bx--select-input", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--select", true);
			toggle_class(div, "bx--time-picker__select", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, select);

			if (default_slot) {
				default_slot.m(select, null);
			}

			select_option(select, /*value*/ ctx[0]);
			/*select_binding*/ ctx[17](select);
			append(div, t1);
			mount_component(chevrondown, div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(select, "change", /*change_handler*/ ctx[18]),
					listen(div, "click", /*click_handler*/ ctx[13]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[14]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[15]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[16])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*labelText*/ ctx[4] || /*$$slots*/ ctx[9].labelText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*labelText, $$slots*/ 528) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$f(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*id*/ 32) {
				attr(select, "id", /*id*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				attr(select, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*disabled*/ 4) {
				select.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*value*/ 1) {
				select_option(select, /*value*/ ctx[0]);
			}

			const chevrondown_changes = {};
			if (dirty & /*iconDescription*/ 8) chevrondown_changes["aria-label"] = /*iconDescription*/ ctx[3];
			if (dirty & /*iconDescription*/ 8) chevrondown_changes.title = /*iconDescription*/ ctx[3];
			chevrondown.$set(chevrondown_changes);
			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(div, "bx--select", true);
			toggle_class(div, "bx--time-picker__select", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			transition_in(chevrondown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			transition_out(chevrondown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			/*select_binding*/ ctx[17](null);
			destroy_component(chevrondown);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$y($$self, $$props, $$invalidate) {
	const omit_props_names = ["value","disabled","iconDescription","labelText","id","name","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedValue;
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { value = "" } = $$props;
	let { disabled = false } = $$props;
	let { iconDescription = "Open list of options" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { name = undefined } = $$props;
	let { ref = null } = $$props;
	const selectedValue = writable(value);
	component_subscribe($$self, selectedValue, value => $$invalidate(10, $selectedValue = value));
	setContext("TimePickerSelect", { selectedValue });

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const change_handler = ({ target }) => {
		selectedValue.set(target.value);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('iconDescription' in $$new_props) $$invalidate(3, iconDescription = $$new_props.iconDescription);
		if ('labelText' in $$new_props) $$invalidate(4, labelText = $$new_props.labelText);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('name' in $$new_props) $$invalidate(6, name = $$new_props.name);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedValue*/ 1024) {
			$$invalidate(0, value = $selectedValue);
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			selectedValue.set(value);
		}
	};

	return [
		value,
		ref,
		disabled,
		iconDescription,
		labelText,
		id,
		name,
		selectedValue,
		$$restProps,
		$$slots,
		$selectedValue,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		select_binding,
		change_handler
	];
}

class TimePickerSelect extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$y, create_fragment$y, safe_not_equal, {
			value: 0,
			disabled: 2,
			iconDescription: 3,
			labelText: 4,
			id: 5,
			name: 6,
			ref: 1
		});
	}
}

var TimePickerSelect$1 = TimePickerSelect;

/* src/Toggle/ToggleSkeleton.svelte generated by Svelte v3.49.0 */

const get_labelText_slot_changes$1 = dirty => ({});
const get_labelText_slot_context$1 = ctx => ({});

// (39:4) {#if labelText || $$slots.labelText}
function create_if_block$e(ctx) {
	let span;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[7].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[6], get_labelText_slot_context$1);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$d(ctx);

	return {
		c() {
			span = element("span");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			toggle_class(span, "bx--toggle__label-text", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[6], dirty, get_labelText_slot_changes$1),
						get_labelText_slot_context$1
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 2)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (41:31)            
function fallback_block$d(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 2) set_data(t, /*labelText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$x(ctx) {
	let div;
	let input;
	let t0;
	let label;
	let t1;
	let span0;
	let t2;
	let span1;
	let t3;
	let span2;
	let label_aria_label_value;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*labelText*/ ctx[1] || /*$$slots*/ ctx[5].labelText) && create_if_block$e(ctx);
	let div_levels = [/*$$restProps*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			if (if_block) if_block.c();
			t1 = space();
			span0 = element("span");
			t2 = space();
			span1 = element("span");
			t3 = space();
			span2 = element("span");
			attr(input, "type", "checkbox");
			attr(input, "id", /*id*/ ctx[2]);
			toggle_class(input, "bx--toggle", true);
			toggle_class(input, "bx--toggle--small", /*size*/ ctx[0] === 'sm');
			toggle_class(input, "bx--skeleton", true);
			toggle_class(span0, "bx--toggle__text--left", true);
			toggle_class(span1, "bx--toggle__appearance", true);
			toggle_class(span2, "bx--toggle__text--right", true);

			attr(label, "aria-label", label_aria_label_value = /*labelText*/ ctx[1]
			? undefined
			: /*$$props*/ ctx[4]['aria-label'] || 'Toggle is loading');

			attr(label, "for", /*id*/ ctx[2]);
			toggle_class(label, "bx--toggle__label", true);
			toggle_class(label, "bx--skeleton", true);
			set_attributes(div, div_data);
			toggle_class(div, "bx--form-item", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, input);
			append(div, t0);
			append(div, label);
			if (if_block) if_block.m(label, null);
			append(label, t1);
			append(label, span0);
			append(label, t2);
			append(label, span1);
			append(label, t3);
			append(label, span2);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler*/ ctx[8]),
					listen(div, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(div, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(div, "mouseleave", /*mouseleave_handler*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*id*/ 4) {
				attr(input, "id", /*id*/ ctx[2]);
			}

			if (dirty & /*size*/ 1) {
				toggle_class(input, "bx--toggle--small", /*size*/ ctx[0] === 'sm');
			}

			if (/*labelText*/ ctx[1] || /*$$slots*/ ctx[5].labelText) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*labelText, $$slots*/ 34) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$e(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*labelText, $$props*/ 18 && label_aria_label_value !== (label_aria_label_value = /*labelText*/ ctx[1]
			? undefined
			: /*$$props*/ ctx[4]['aria-label'] || 'Toggle is loading')) {
				attr(label, "aria-label", label_aria_label_value);
			}

			if (!current || dirty & /*id*/ 4) {
				attr(label, "for", /*id*/ ctx[2]);
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(div, "bx--form-item", true);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$x($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","labelText","id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { size = "default" } = $$props;
	let { labelText = "" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('labelText' in $$new_props) $$invalidate(1, labelText = $$new_props.labelText);
		if ('id' in $$new_props) $$invalidate(2, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);

	return [
		size,
		labelText,
		id,
		$$restProps,
		$$props,
		$$slots,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler
	];
}

class ToggleSkeleton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$x, create_fragment$x, safe_not_equal, { size: 0, labelText: 1, id: 2 });
	}
}

var ToggleSkeleton$1 = ToggleSkeleton;

/* src/icons/Information.svelte generated by Svelte v3.49.0 */

function create_if_block$d(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$w(ctx) {
	let svg;
	let path0;
	let path1;
	let if_block = /*title*/ ctx[1] && create_if_block$d(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "M17 22L17 14 13 14 13 16 15 16 15 22 12 22 12 24 20 24 20 22 17 22zM16 8a1.5 1.5 0 101.5 1.5A1.5 1.5 0 0016 8z");
			attr(path1, "d", "M16,30A14,14,0,1,1,30,16,14,14,0,0,1,16,30ZM16,4A12,12,0,1,0,28,16,12,12,0,0,0,16,4Z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path0);
			append(svg, path1);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$d(ctx);
					if_block.c();
					if_block.m(svg, path0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$w($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Information extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$w, create_fragment$w, safe_not_equal, { size: 0, title: 1 });
	}
}

var Information$1 = Information;

/* src/Tooltip/Tooltip.svelte generated by Svelte v3.49.0 */
const get_triggerText_slot_changes_1 = dirty => ({});
const get_triggerText_slot_context_1 = ctx => ({});
const get_icon_slot_changes$4 = dirty => ({});
const get_icon_slot_context$4 = ctx => ({});
const get_triggerText_slot_changes = dirty => ({});
const get_triggerText_slot_context = ctx => ({});

// (222:2) {:else}
function create_else_block$2(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const triggerText_slot_template = /*#slots*/ ctx[21].triggerText;
	const triggerText_slot = create_slot(triggerText_slot_template, ctx, /*$$scope*/ ctx[20], get_triggerText_slot_context_1);
	const triggerText_slot_or_fallback = triggerText_slot || fallback_block_2$1(ctx);
	let div_levels = [/*buttonProps*/ ctx[12], { "aria-describedby": /*tooltipId*/ ctx[9] }];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (triggerText_slot_or_fallback) {
				triggerText_slot_or_fallback.m(div, null);
			}

			/*div_binding*/ ctx[28](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "mousedown", /*onMousedown*/ ctx[16]),
					listen(div, "focus", /*onFocus*/ ctx[15]),
					listen(div, "blur", /*onBlur*/ ctx[14]),
					listen(div, "keydown", /*onKeydown*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (triggerText_slot) {
				if (triggerText_slot.p && (!current || dirty[0] & /*$$scope*/ 1048576)) {
					update_slot_base(
						triggerText_slot,
						triggerText_slot_template,
						ctx,
						/*$$scope*/ ctx[20],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
						: get_slot_changes(triggerText_slot_template, /*$$scope*/ ctx[20], dirty, get_triggerText_slot_changes_1),
						get_triggerText_slot_context_1
					);
				}
			} else {
				if (triggerText_slot_or_fallback && triggerText_slot_or_fallback.p && (!current || dirty[0] & /*triggerText*/ 2048)) {
					triggerText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty[0] & /*buttonProps*/ 4096 && /*buttonProps*/ ctx[12],
				(!current || dirty[0] & /*tooltipId*/ 512) && { "aria-describedby": /*tooltipId*/ ctx[9] }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(triggerText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(triggerText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.d(detaching);
			/*div_binding*/ ctx[28](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (206:2) {#if !hideIcon}
function create_if_block_1$4(ctx) {
	let div1;
	let t;
	let div0;
	let current;
	let mounted;
	let dispose;
	const triggerText_slot_template = /*#slots*/ ctx[21].triggerText;
	const triggerText_slot = create_slot(triggerText_slot_template, ctx, /*$$scope*/ ctx[20], get_triggerText_slot_context);
	const triggerText_slot_or_fallback = triggerText_slot || fallback_block_1$3(ctx);
	const icon_slot_template = /*#slots*/ ctx[21].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[20], get_icon_slot_context$4);
	const icon_slot_or_fallback = icon_slot || fallback_block$c(ctx);
	let div0_levels = [/*buttonProps*/ ctx[12], { "aria-describedby": /*tooltipId*/ ctx[9] }];
	let div0_data = {};

	for (let i = 0; i < div0_levels.length; i += 1) {
		div0_data = assign(div0_data, div0_levels[i]);
	}

	return {
		c() {
			div1 = element("div");
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.c();
			t = space();
			div0 = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			set_attributes(div0, div0_data);
			attr(div1, "id", /*triggerId*/ ctx[10]);
			toggle_class(div1, "bx--tooltip__label", true);
		},
		m(target, anchor) {
			insert(target, div1, anchor);

			if (triggerText_slot_or_fallback) {
				triggerText_slot_or_fallback.m(div1, null);
			}

			append(div1, t);
			append(div1, div0);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div0, null);
			}

			/*div0_binding*/ ctx[26](div0);
			/*div1_binding*/ ctx[27](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "mousedown", /*onMousedown*/ ctx[16]),
					listen(div0, "focus", /*onFocus*/ ctx[15]),
					listen(div0, "keydown", /*onKeydown*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (triggerText_slot) {
				if (triggerText_slot.p && (!current || dirty[0] & /*$$scope*/ 1048576)) {
					update_slot_base(
						triggerText_slot,
						triggerText_slot_template,
						ctx,
						/*$$scope*/ ctx[20],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
						: get_slot_changes(triggerText_slot_template, /*$$scope*/ ctx[20], dirty, get_triggerText_slot_changes),
						get_triggerText_slot_context
					);
				}
			} else {
				if (triggerText_slot_or_fallback && triggerText_slot_or_fallback.p && (!current || dirty[0] & /*triggerText*/ 2048)) {
					triggerText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			if (icon_slot) {
				if (icon_slot.p && (!current || dirty[0] & /*$$scope*/ 1048576)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[20],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[20], dirty, get_icon_slot_changes$4),
						get_icon_slot_context$4
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty[0] & /*icon, iconName*/ 384)) {
					icon_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
				}
			}

			set_attributes(div0, div0_data = get_spread_update(div0_levels, [
				dirty[0] & /*buttonProps*/ 4096 && /*buttonProps*/ ctx[12],
				(!current || dirty[0] & /*tooltipId*/ 512) && { "aria-describedby": /*tooltipId*/ ctx[9] }
			]));

			if (!current || dirty[0] & /*triggerId*/ 1024) {
				attr(div1, "id", /*triggerId*/ ctx[10]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(triggerText_slot_or_fallback, local);
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(triggerText_slot_or_fallback, local);
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (triggerText_slot_or_fallback) triggerText_slot_or_fallback.d(detaching);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
			/*div0_binding*/ ctx[26](null);
			/*div1_binding*/ ctx[27](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (232:31) {triggerText}
function fallback_block_2$1(ctx) {
	let t;

	return {
		c() {
			t = text(/*triggerText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*triggerText*/ 2048) set_data(t, /*triggerText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (208:31) {triggerText}
function fallback_block_1$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*triggerText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*triggerText*/ 2048) set_data(t, /*triggerText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (217:26)            
function fallback_block$c(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[7];

	function switch_props(ctx) {
		return { props: { name: /*iconName*/ ctx[8] } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*iconName*/ 256) switch_instance_changes.name = /*iconName*/ ctx[8];

			if (switch_value !== (switch_value = /*icon*/ ctx[7])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (235:2) {#if open}
function create_if_block$c(ctx) {
	let div1;
	let span;
	let t;
	let div0;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[21].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[20], null);

	return {
		c() {
			div1 = element("div");
			span = element("span");
			t = space();
			div0 = element("div");
			if (default_slot) default_slot.c();
			toggle_class(span, "bx--tooltip__caret", true);
			attr(div0, "tabindex", "-1");
			attr(div0, "role", "dialog");
			toggle_class(div0, "bx--tooltip__content", true);
			attr(div1, "id", /*tooltipId*/ ctx[9]);
			attr(div1, "data-floating-menu-direction", /*direction*/ ctx[5]);
			toggle_class(div1, "bx--tooltip", true);
			toggle_class(div1, "bx--tooltip--shown", /*open*/ ctx[0]);
			toggle_class(div1, "bx--tooltip--top", /*direction*/ ctx[5] === 'top');
			toggle_class(div1, "bx--tooltip--right", /*direction*/ ctx[5] === 'right');
			toggle_class(div1, "bx--tooltip--bottom", /*direction*/ ctx[5] === 'bottom');
			toggle_class(div1, "bx--tooltip--left", /*direction*/ ctx[5] === 'left');
			toggle_class(div1, "bx--tooltip--align-center", /*align*/ ctx[4] === 'center');
			toggle_class(div1, "bx--tooltip--align-start", /*align*/ ctx[4] === 'start');
			toggle_class(div1, "bx--tooltip--align-end", /*align*/ ctx[4] === 'end');
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			append(div1, t);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div1_binding_1*/ ctx[29](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", stop_propagation(/*click_handler*/ ctx[22])),
					listen(div0, "mousedown", stop_propagation(/*mousedown_handler*/ ctx[23])),
					listen(div1, "keydown", /*onKeydown*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 1048576)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[20],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[20])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[20], dirty, null),
						null
					);
				}
			}

			if (!current || dirty[0] & /*tooltipId*/ 512) {
				attr(div1, "id", /*tooltipId*/ ctx[9]);
			}

			if (!current || dirty[0] & /*direction*/ 32) {
				attr(div1, "data-floating-menu-direction", /*direction*/ ctx[5]);
			}

			if (dirty[0] & /*open*/ 1) {
				toggle_class(div1, "bx--tooltip--shown", /*open*/ ctx[0]);
			}

			if (dirty[0] & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--top", /*direction*/ ctx[5] === 'top');
			}

			if (dirty[0] & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--right", /*direction*/ ctx[5] === 'right');
			}

			if (dirty[0] & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--bottom", /*direction*/ ctx[5] === 'bottom');
			}

			if (dirty[0] & /*direction*/ 32) {
				toggle_class(div1, "bx--tooltip--left", /*direction*/ ctx[5] === 'left');
			}

			if (dirty[0] & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-center", /*align*/ ctx[4] === 'center');
			}

			if (dirty[0] & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-start", /*align*/ ctx[4] === 'start');
			}

			if (dirty[0] & /*align*/ 16) {
				toggle_class(div1, "bx--tooltip--align-end", /*align*/ ctx[4] === 'end');
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (default_slot) default_slot.d(detaching);
			/*div1_binding_1*/ ctx[29](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$v(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t;
	let div_style_value;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1$4, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*hideIcon*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*open*/ ctx[0] && create_if_block$c(ctx);

	let div_levels = [
		/*$$restProps*/ ctx[17],
		{
			style: div_style_value = "" + ((/*open*/ ctx[0] ? 'z-index: 1;' : '') + /*$$restProps*/ ctx[17].style + "; position: relative;")
		}
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = element("div");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			set_attributes(div, div_data);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mousedown", /*mousedown_handler_1*/ ctx[24]),
					listen(window, "click", /*click_handler_1*/ ctx[25], true)
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t);
			}

			if (/*open*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*open*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$c(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				dirty[0] & /*$$restProps*/ 131072 && /*$$restProps*/ ctx[17],
				(!current || dirty[0] & /*open, $$restProps*/ 131073 && div_style_value !== (div_style_value = "" + ((/*open*/ ctx[0] ? 'z-index: 1;' : '') + /*$$restProps*/ ctx[17].style + "; position: relative;"))) && { style: div_style_value }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$v($$self, $$props, $$invalidate) {
	let buttonProps;

	const omit_props_names = [
		"align","direction","open","hideIcon","icon","iconDescription","iconName","tabindex","tooltipId","triggerId","triggerText","ref","refTooltip","refIcon"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { open = false } = $$props;
	let { hideIcon = false } = $$props;
	let { icon = Information$1 } = $$props;
	let { iconDescription = "" } = $$props;
	let { iconName = "" } = $$props;
	let { tabindex = "0" } = $$props;
	let { tooltipId = "ccs-" + Math.random().toString(36) } = $$props;
	let { triggerId = "ccs-" + Math.random().toString(36) } = $$props;
	let { triggerText = "" } = $$props;
	let { ref = null } = $$props;
	let { refTooltip = null } = $$props;
	let { refIcon = null } = $$props;
	const dispatch = createEventDispatcher();
	const tooltipOpen = writable(open);
	setContext("Tooltip", { tooltipOpen });

	function onKeydown(e) {
		if (e.key === "Escape" || e.key === "Tab") {
			e.stopPropagation();
			if (e.key === "Escape") refIcon?.focus();
			$$invalidate(0, open = false);
		} else if (e.key === " " || e.key === "Enter") {
			e.stopPropagation();
			e.preventDefault();
			$$invalidate(0, open = true);
		}
	}

	function onBlur({ relatedTarget }) {
		if (refTooltip && !refTooltip.contains(relatedTarget)) {
			$$invalidate(0, open = false);
		}
	}

	function onFocus() {
		$$invalidate(0, open = true);
	}

	function onMousedown() {
		// determine the desired state before the focus event triggers.
		const shouldClose = open;

		// ensure changes are scheduled at the end, i.e. after the possible focus event.
		setTimeout(() => {
			$$invalidate(0, open = shouldClose ? false : true);
		});
	}

	afterUpdate(() => {
		if (open) {
			const button = ref.getBoundingClientRect();
			const tooltip = refTooltip.getBoundingClientRect();
			let iconWidth = 16;
			let iconHeight = 16;

			if (refIcon) {
				const icon = refIcon.getBoundingClientRect();
				iconWidth = icon.width;
				iconHeight = icon.height;
			}

			let offsetX = 0;
			let offsetY = 0;

			switch (direction) {
				case "bottom":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width / 2 - button.width / 2);
					} else {
						offsetX = -1 * (tooltip.width / 2 - button.width + iconWidth / 2);
					}
					offsetY = iconHeight / 2;
					break;
				case "right":
					offsetX = button.width + 6;
					offsetY = -1 * (tooltip.height / 2 + iconWidth / 2 - 3);
					break;
				case "left":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width + 6 + 1);
					} else {
						offsetX = -1 * (tooltip.width - button.width + iconWidth + 8);
					}
					offsetY = -1 * (tooltip.height / 2 + button.height) - 2;
					break;
				case "top":
					if (hideIcon) {
						offsetX = -1 * (tooltip.width / 2 - button.width / 2);
					} else {
						offsetX = -1 * (tooltip.width / 2 - button.width + iconWidth / 2 + 1);
					}
					offsetY = -1 * (tooltip.height + button.height + iconWidth / 2 - 1);
					break;
			}

			$$invalidate(2, refTooltip.style.left = offsetX + "px", refTooltip);
			$$invalidate(2, refTooltip.style.marginTop = offsetY + "px", refTooltip);
		}
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mousedown_handler(event) {
		bubble.call(this, $$self, event);
	}

	const mousedown_handler_1 = ({ target }) => {
		if (open) {
			if (target.contains(refTooltip)) {
				if (refIcon) {
					refIcon.focus();
				} else if (ref) {
					ref.focus();
				}
			}
		}
	};

	const click_handler_1 = ({ target }) => {
		if (open && !ref.contains(target) && !refTooltip.contains(target)) {
			setTimeout(() => {
				$$invalidate(0, open = false);
			});
		}
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refIcon = $$value;
			$$invalidate(3, refIcon);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function div1_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refTooltip = $$value;
			$$invalidate(2, refTooltip);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(17, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('align' in $$new_props) $$invalidate(4, align = $$new_props.align);
		if ('direction' in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('hideIcon' in $$new_props) $$invalidate(6, hideIcon = $$new_props.hideIcon);
		if ('icon' in $$new_props) $$invalidate(7, icon = $$new_props.icon);
		if ('iconDescription' in $$new_props) $$invalidate(18, iconDescription = $$new_props.iconDescription);
		if ('iconName' in $$new_props) $$invalidate(8, iconName = $$new_props.iconName);
		if ('tabindex' in $$new_props) $$invalidate(19, tabindex = $$new_props.tabindex);
		if ('tooltipId' in $$new_props) $$invalidate(9, tooltipId = $$new_props.tooltipId);
		if ('triggerId' in $$new_props) $$invalidate(10, triggerId = $$new_props.triggerId);
		if ('triggerText' in $$new_props) $$invalidate(11, triggerText = $$new_props.triggerText);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('refTooltip' in $$new_props) $$invalidate(2, refTooltip = $$new_props.refTooltip);
		if ('refIcon' in $$new_props) $$invalidate(3, refIcon = $$new_props.refIcon);
		if ('$$scope' in $$new_props) $$invalidate(20, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*open*/ 1) {
			tooltipOpen.set(open);
		}

		if ($$self.$$.dirty[0] & /*open*/ 1) {
			dispatch(open ? "open" : "close");
		}

		$$invalidate(12, buttonProps = {
			role: "button",
			"aria-haspopup": "true",
			id: hideIcon ? triggerId : undefined,
			class: hideIcon ? "bx--tooltip__label" : "bx--tooltip__trigger",
			"aria-expanded": open,
			"aria-describedby": open ? tooltipId : undefined,
			"aria-labelledby": triggerText ? triggerId : undefined,
			"aria-label": triggerText ? undefined : iconDescription,
			tabindex,
			style: hideIcon ? $$restProps.style : undefined
		});
	};

	return [
		open,
		ref,
		refTooltip,
		refIcon,
		align,
		direction,
		hideIcon,
		icon,
		iconName,
		tooltipId,
		triggerId,
		triggerText,
		buttonProps,
		onKeydown,
		onBlur,
		onFocus,
		onMousedown,
		$$restProps,
		iconDescription,
		tabindex,
		$$scope,
		slots,
		click_handler,
		mousedown_handler,
		mousedown_handler_1,
		click_handler_1,
		div0_binding,
		div1_binding,
		div_binding,
		div1_binding_1
	];
}

class Tooltip extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$v,
			create_fragment$v,
			safe_not_equal,
			{
				align: 4,
				direction: 5,
				open: 0,
				hideIcon: 6,
				icon: 7,
				iconDescription: 18,
				iconName: 8,
				tabindex: 19,
				tooltipId: 9,
				triggerId: 10,
				triggerText: 11,
				ref: 1,
				refTooltip: 2,
				refIcon: 3
			},
			null,
			[-1, -1]
		);
	}
}

var Tooltip$1 = Tooltip;

/* src/Tooltip/TooltipFooter.svelte generated by Svelte v3.49.0 */

function create_fragment$u(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--tooltip__footer", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[5](div);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[5](null);
		}
	};
}

function instance$u($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selectorPrimaryFocus = "a[href], button:not([disabled])" } = $$props;
	let ref = null;
	let open = false;
	const ctx = getContext("Tooltip");

	const unsubscribe = ctx.tooltipOpen.subscribe(tooltipOpen => {
		$$invalidate(2, open = tooltipOpen);
	});

	onMount(() => {
		return () => {
			unsubscribe();
		};
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$props => {
		if ('selectorPrimaryFocus' in $$props) $$invalidate(1, selectorPrimaryFocus = $$props.selectorPrimaryFocus);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open, ref, selectorPrimaryFocus*/ 7) {
			if (open && ref) {
				const node = ref.querySelector(selectorPrimaryFocus);
				if (node) node.focus();
			}
		}
	};

	return [ref, selectorPrimaryFocus, open, $$scope, slots, div_binding];
}

class TooltipFooter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$u, create_fragment$u, safe_not_equal, { selectorPrimaryFocus: 1 });
	}
}

var TooltipFooter$1 = TooltipFooter;

/* src/TooltipDefinition/TooltipDefinition.svelte generated by Svelte v3.49.0 */
const get_tooltip_slot_changes = dirty => ({});
const get_tooltip_slot_context = ctx => ({});

// (82:25) {tooltipText}
function fallback_block$b(ctx) {
	let t;

	return {
		c() {
			t = text(/*tooltipText*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tooltipText*/ 4) set_data(t, /*tooltipText*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$t(ctx) {
	let span;
	let button;
	let t;
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	const tooltip_slot_template = /*#slots*/ ctx[10].tooltip;
	const tooltip_slot = create_slot(tooltip_slot_template, ctx, /*$$scope*/ ctx[9], get_tooltip_slot_context);
	const tooltip_slot_or_fallback = tooltip_slot || fallback_block$b(ctx);
	let span_levels = [/*$$restProps*/ ctx[8]];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			button = element("button");
			if (default_slot) default_slot.c();
			t = space();
			div = element("div");
			if (tooltip_slot_or_fallback) tooltip_slot_or_fallback.c();
			attr(button, "type", "button");
			attr(button, "aria-describedby", /*id*/ ctx[5]);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip__trigger--definition", true);
			toggle_class(button, "bx--tooltip--hidden", !/*open*/ ctx[0]);
			toggle_class(button, "bx--tooltip--visible", /*open*/ ctx[0]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[4] === 'top');
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[4] === 'bottom');
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[3] === 'start');
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[3] === 'center');
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[3] === 'end');
			attr(div, "role", "tooltip");
			attr(div, "id", /*id*/ ctx[5]);
			toggle_class(div, "bx--assistive-text", true);
			set_attributes(span, span_data);
			toggle_class(span, "bx--tooltip--definition", true);
			toggle_class(span, "bx--tooltip--a11y", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, button);

			if (default_slot) {
				default_slot.m(button, null);
			}

			/*button_binding*/ ctx[17](button);
			append(span, t);
			append(span, div);

			if (tooltip_slot_or_fallback) {
				tooltip_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "keydown", /*keydown_handler*/ ctx[16]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[14]),
					listen(button, "focus", /*focus_handler*/ ctx[15]),
					listen(button, "focus", /*show*/ ctx[7]),
					listen(button, "blur", /*hide*/ ctx[6]),
					listen(span, "mouseenter", /*show*/ ctx[7]),
					listen(span, "mouseleave", /*hide*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*id*/ 32) {
				attr(button, "aria-describedby", /*id*/ ctx[5]);
			}

			if (dirty & /*open*/ 1) {
				toggle_class(button, "bx--tooltip--hidden", !/*open*/ ctx[0]);
			}

			if (dirty & /*open*/ 1) {
				toggle_class(button, "bx--tooltip--visible", /*open*/ ctx[0]);
			}

			if (dirty & /*direction*/ 16) {
				toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[4] === 'top');
			}

			if (dirty & /*direction*/ 16) {
				toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[4] === 'bottom');
			}

			if (dirty & /*align*/ 8) {
				toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[3] === 'start');
			}

			if (dirty & /*align*/ 8) {
				toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[3] === 'center');
			}

			if (dirty & /*align*/ 8) {
				toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[3] === 'end');
			}

			if (tooltip_slot) {
				if (tooltip_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						tooltip_slot,
						tooltip_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(tooltip_slot_template, /*$$scope*/ ctx[9], dirty, get_tooltip_slot_changes),
						get_tooltip_slot_context
					);
				}
			} else {
				if (tooltip_slot_or_fallback && tooltip_slot_or_fallback.p && (!current || dirty & /*tooltipText*/ 4)) {
					tooltip_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 32) {
				attr(div, "id", /*id*/ ctx[5]);
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(span, "bx--tooltip--definition", true);
			toggle_class(span, "bx--tooltip--a11y", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(tooltip_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			transition_out(tooltip_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (default_slot) default_slot.d(detaching);
			/*button_binding*/ ctx[17](null);
			if (tooltip_slot_or_fallback) tooltip_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$t($$self, $$props, $$invalidate) {
	const omit_props_names = ["tooltipText","open","align","direction","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tooltipText = "" } = $$props;
	let { open = false } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	const dispatch = createEventDispatcher();
	const hide = () => $$invalidate(0, open = false);
	const show = () => $$invalidate(0, open = true);

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === 'Escape') hide();
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('tooltipText' in $$new_props) $$invalidate(2, tooltipText = $$new_props.tooltipText);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('align' in $$new_props) $$invalidate(3, align = $$new_props.align);
		if ('direction' in $$new_props) $$invalidate(4, direction = $$new_props.direction);
		if ('id' in $$new_props) $$invalidate(5, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			dispatch(open ? "open" : "close");
		}
	};

	return [
		open,
		ref,
		tooltipText,
		align,
		direction,
		id,
		hide,
		show,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		focus_handler,
		keydown_handler,
		button_binding
	];
}

class TooltipDefinition extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$t, create_fragment$t, safe_not_equal, {
			tooltipText: 2,
			open: 0,
			align: 3,
			direction: 4,
			id: 5,
			ref: 1
		});
	}
}

var TooltipDefinition$1 = TooltipDefinition;

/* src/TooltipIcon/TooltipIcon.svelte generated by Svelte v3.49.0 */

const get_tooltipText_slot_changes = dirty => ({});
const get_tooltipText_slot_context = ctx => ({});

// (77:29) {tooltipText}
function fallback_block_1$2(ctx) {
	let t;

	return {
		c() {
			t = text(/*tooltipText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tooltipText*/ 2) set_data(t, /*tooltipText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (79:8)      
function fallback_block$a(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$s(ctx) {
	let button;
	let span;
	let t;
	let button_style_value;
	let current;
	let mounted;
	let dispose;
	const tooltipText_slot_template = /*#slots*/ ctx[10].tooltipText;
	const tooltipText_slot = create_slot(tooltipText_slot_template, ctx, /*$$scope*/ ctx[9], get_tooltipText_slot_context);
	const tooltipText_slot_or_fallback = tooltipText_slot || fallback_block_1$2(ctx);
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	const default_slot_or_fallback = default_slot || fallback_block$a(ctx);

	let button_levels = [
		{ disabled: /*disabled*/ ctx[3] },
		{ "aria-describedby": /*id*/ ctx[6] },
		/*$$restProps*/ ctx[8],
		{
			style: button_style_value = "cursor: " + (/*disabled*/ ctx[3] ? 'not-allowed' : 'default') + "; " + /*$$restProps*/ ctx[8].style
		}
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			span = element("span");
			if (tooltipText_slot_or_fallback) tooltipText_slot_or_fallback.c();
			t = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr(span, "id", /*id*/ ctx[6]);
			toggle_class(span, "bx--assistive-text", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip--hidden", /*hidden*/ ctx[7] || /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[5] === 'top');
			toggle_class(button, "bx--tooltip--right", /*direction*/ ctx[5] === 'right');
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[5] === 'bottom');
			toggle_class(button, "bx--tooltip--left", /*direction*/ ctx[5] === 'left');
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[4] === 'start');
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[4] === 'center');
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[4] === 'end');
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, span);

			if (tooltipText_slot_or_fallback) {
				tooltipText_slot_or_fallback.m(span, null);
			}

			append(button, t);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[17](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "keydown", /*keydown_handler*/ ctx[16]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[12]),
					listen(button, "mouseenter", /*mouseenter_handler*/ ctx[13]),
					listen(button, "mouseenter", /*mouseenter_handler_1*/ ctx[18]),
					listen(button, "mouseleave", /*mouseleave_handler*/ ctx[14]),
					listen(button, "focus", /*focus_handler*/ ctx[15]),
					listen(button, "focus", /*focus_handler_1*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (tooltipText_slot) {
				if (tooltipText_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						tooltipText_slot,
						tooltipText_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(tooltipText_slot_template, /*$$scope*/ ctx[9], dirty, get_tooltipText_slot_changes),
						get_tooltipText_slot_context
					);
				}
			} else {
				if (tooltipText_slot_or_fallback && tooltipText_slot_or_fallback.p && (!current || dirty & /*tooltipText*/ 2)) {
					tooltipText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*id*/ 64) {
				attr(span, "id", /*id*/ ctx[6]);
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*icon*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
				(!current || dirty & /*id*/ 64) && { "aria-describedby": /*id*/ ctx[6] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8],
				(!current || dirty & /*disabled, $$restProps*/ 264 && button_style_value !== (button_style_value = "cursor: " + (/*disabled*/ ctx[3] ? 'not-allowed' : 'default') + "; " + /*$$restProps*/ ctx[8].style)) && { style: button_style_value }
			]));

			toggle_class(button, "bx--tooltip__trigger", true);
			toggle_class(button, "bx--tooltip--a11y", true);
			toggle_class(button, "bx--tooltip--hidden", /*hidden*/ ctx[7] || /*disabled*/ ctx[3]);
			toggle_class(button, "bx--tooltip--top", /*direction*/ ctx[5] === 'top');
			toggle_class(button, "bx--tooltip--right", /*direction*/ ctx[5] === 'right');
			toggle_class(button, "bx--tooltip--bottom", /*direction*/ ctx[5] === 'bottom');
			toggle_class(button, "bx--tooltip--left", /*direction*/ ctx[5] === 'left');
			toggle_class(button, "bx--tooltip--align-start", /*align*/ ctx[4] === 'start');
			toggle_class(button, "bx--tooltip--align-center", /*align*/ ctx[4] === 'center');
			toggle_class(button, "bx--tooltip--align-end", /*align*/ ctx[4] === 'end');
		},
		i(local) {
			if (current) return;
			transition_in(tooltipText_slot_or_fallback, local);
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(tooltipText_slot_or_fallback, local);
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (tooltipText_slot_or_fallback) tooltipText_slot_or_fallback.d(detaching);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$s($$self, $$props, $$invalidate) {
	const omit_props_names = ["tooltipText","icon","disabled","align","direction","id","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tooltipText = "" } = $$props;
	let { icon = undefined } = $$props;
	let { disabled = false } = $$props;
	let { align = "center" } = $$props;
	let { direction = "bottom" } = $$props;
	let { id = "ccs-" + Math.random().toString(36) } = $$props;
	let { ref = null } = $$props;
	let hidden = false;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	const keydown_handler = ({ key }) => {
		if (key === 'Escape') {
			$$invalidate(7, hidden = true);
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const mouseenter_handler_1 = () => {
		if (disabled) return;
		$$invalidate(7, hidden = false);
	};

	const focus_handler_1 = () => {
		if (disabled) return;
		$$invalidate(7, hidden = false);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('tooltipText' in $$new_props) $$invalidate(1, tooltipText = $$new_props.tooltipText);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
		if ('align' in $$new_props) $$invalidate(4, align = $$new_props.align);
		if ('direction' in $$new_props) $$invalidate(5, direction = $$new_props.direction);
		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		tooltipText,
		icon,
		disabled,
		align,
		direction,
		id,
		hidden,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		focus_handler,
		keydown_handler,
		button_binding,
		mouseenter_handler_1,
		focus_handler_1
	];
}

class TooltipIcon extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$s, create_fragment$s, safe_not_equal, {
			tooltipText: 1,
			icon: 2,
			disabled: 3,
			align: 4,
			direction: 5,
			id: 6,
			ref: 0
		});
	}
}

var TooltipIcon$1 = TooltipIcon;

/* src/icons/CaretDown.svelte generated by Svelte v3.49.0 */

function create_if_block$b(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$r(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$b(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M24 12L16 22 8 12z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$b(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$r($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class CaretDown extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$r, create_fragment$r, safe_not_equal, { size: 0, title: 1 });
	}
}

var CaretDown$1 = CaretDown;

/* src/TreeView/TreeViewNode.svelte generated by Svelte v3.49.0 */

function create_fragment$q(ctx) {
	let li;
	let div;
	let switch_instance;
	let t0;
	let t1;
	let li_tabindex_value;
	let li_aria_current_value;
	let li_aria_selected_value;
	let current;
	let mounted;
	let dispose;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return { props: { class: "bx--tree-node__icon" } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			li = element("li");
			div = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t0 = space();
			t1 = text(/*text*/ ctx[1]);
			toggle_class(div, "bx--tree-node__label", true);
			attr(li, "role", "treeitem");
			attr(li, "id", /*id*/ ctx[0]);
			attr(li, "tabindex", li_tabindex_value = /*disabled*/ ctx[2] ? undefined : -1);
			attr(li, "aria-current", li_aria_current_value = /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7] || undefined);

			attr(li, "aria-selected", li_aria_selected_value = /*disabled*/ ctx[2]
			? undefined
			: /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));

			attr(li, "aria-disabled", /*disabled*/ ctx[2]);
			toggle_class(li, "bx--tree-node", true);
			toggle_class(li, "bx--tree-leaf-node", true);
			toggle_class(li, "bx--tree-node--active", /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7]);
			toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));
			toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[2]);
			toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);

			if (switch_instance) {
				mount_component(switch_instance, div, null);
			}

			append(div, t0);
			append(div, t1);
			/*div_binding*/ ctx[14](div);
			/*li_binding*/ ctx[15](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li, "click", stop_propagation(/*click_handler*/ ctx[16])),
					listen(li, "keydown", /*keydown_handler*/ ctx[17]),
					listen(li, "focus", /*focus_handler*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div, t0);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty & /*text*/ 2) set_data(t1, /*text*/ ctx[1]);

			if (!current || dirty & /*id*/ 1) {
				attr(li, "id", /*id*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 4 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[2] ? undefined : -1)) {
				attr(li, "tabindex", li_tabindex_value);
			}

			if (!current || dirty & /*id, $activeNodeId*/ 129 && li_aria_current_value !== (li_aria_current_value = /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7] || undefined)) {
				attr(li, "aria-current", li_aria_current_value);
			}

			if (!current || dirty & /*disabled, $selectedNodeIds, id*/ 261 && li_aria_selected_value !== (li_aria_selected_value = /*disabled*/ ctx[2]
			? undefined
			: /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]))) {
				attr(li, "aria-selected", li_aria_selected_value);
			}

			if (!current || dirty & /*disabled*/ 4) {
				attr(li, "aria-disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*id, $activeNodeId*/ 129) {
				toggle_class(li, "bx--tree-node--active", /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7]);
			}

			if (dirty & /*$selectedNodeIds, id*/ 257) {
				toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));
			}

			if (dirty & /*disabled*/ 4) {
				toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*icon*/ 8) {
				toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (switch_instance) destroy_component(switch_instance);
			/*div_binding*/ ctx[14](null);
			/*li_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function computeTreeLeafDepth(node) {
	let depth = 0;
	if (node == null) return depth;
	let parentNode = node.parentNode;

	while (parentNode != null && parentNode.getAttribute("role") !== "tree") {
		parentNode = parentNode.parentNode;
		if (parentNode.tagName === "LI") depth++;
	}

	return depth;
}

/**
 * Finds the nearest parent tree node
 * @param {HTMLElement} node
 * @returns {null | HTMLElement}
 */
function findParentTreeNode(node) {
	if (node.classList.contains("bx--tree-parent-node")) return node;
	if (node.classList.contains("bx--tree")) return null;
	return findParentTreeNode(node.parentNode);
}

function instance$q($$self, $$props, $$invalidate) {
	let node;
	let $activeNodeId;
	let $selectedNodeIds;
	let { leaf = false } = $$props;
	let { id = "" } = $$props;
	let { text = "" } = $$props;
	let { disabled = false } = $$props;
	let { icon = undefined } = $$props;
	let ref = null;
	let refLabel = null;
	let prevActiveId = undefined;
	const { activeNodeId, selectedNodeIds, clickNode, selectNode, focusNode } = getContext("TreeView");
	component_subscribe($$self, activeNodeId, value => $$invalidate(7, $activeNodeId = value));
	component_subscribe($$self, selectedNodeIds, value => $$invalidate(8, $selectedNodeIds = value));
	const offset = () => computeTreeLeafDepth(refLabel) + (leaf && icon ? 2 : 2.5);

	afterUpdate(() => {
		if (id === $activeNodeId && prevActiveId !== $activeNodeId) {
			if (!$selectedNodeIds.includes(id)) selectNode(node);
		}

		prevActiveId = $activeNodeId;
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refLabel = $$value;
			$$invalidate(4, refLabel);
		});
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(5, ref);
		});
	}

	const click_handler = () => {
		if (disabled) return;
		clickNode(node);
	};

	const keydown_handler = e => {
		if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Enter') {
			e.stopPropagation();
		}

		if (e.key === 'ArrowLeft') {
			const parentNode = findParentTreeNode(ref.parentNode);
			if (parentNode) parentNode.focus();
		}

		if (e.key === 'Enter' || e.key === ' ') {
			e.preventDefault();
			if (disabled) return;
			clickNode(node);
		}
	};

	const focus_handler = () => {
		focusNode(node);
	};

	$$self.$$set = $$props => {
		if ('leaf' in $$props) $$invalidate(13, leaf = $$props.leaf);
		if ('id' in $$props) $$invalidate(0, id = $$props.id);
		if ('text' in $$props) $$invalidate(1, text = $$props.text);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('icon' in $$props) $$invalidate(3, icon = $$props.icon);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*id, text, leaf*/ 8195) {
			$$invalidate(6, node = { id, text, expanded: false, leaf });
		}

		if ($$self.$$.dirty & /*refLabel*/ 16) {
			if (refLabel) {
				$$invalidate(4, refLabel.style.marginLeft = `-${offset()}rem`, refLabel);
				$$invalidate(4, refLabel.style.paddingLeft = `${offset()}rem`, refLabel);
			}
		}
	};

	return [
		id,
		text,
		disabled,
		icon,
		refLabel,
		ref,
		node,
		$activeNodeId,
		$selectedNodeIds,
		activeNodeId,
		selectedNodeIds,
		clickNode,
		focusNode,
		leaf,
		div_binding,
		li_binding,
		click_handler,
		keydown_handler,
		focus_handler
	];
}

class TreeViewNode extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
			leaf: 13,
			id: 0,
			text: 1,
			disabled: 2,
			icon: 3
		});
	}
}

/* src/TreeView/TreeViewNodeList.svelte generated by Svelte v3.49.0 */

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	return child_ctx;
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	return child_ctx;
}

// (75:0) {:else}
function create_else_block_1(ctx) {
	let li;
	let div;
	let span0;
	let caretdown;
	let t0;
	let span1;
	let switch_instance;
	let t1;
	let t2;
	let t3;
	let li_tabindex_value;
	let li_aria_current_value;
	let li_aria_selected_value;
	let current;
	let mounted;
	let dispose;

	caretdown = new CaretDown$1({
			props: {
				class: "bx--tree-parent-node__toggle-icon " + (/*expanded*/ ctx[0] && 'bx--tree-parent-node__toggle-icon--expanded')
			}
		});

	var switch_value = /*icon*/ ctx[6];

	function switch_props(ctx) {
		return { props: { class: "bx--tree-node__icon" } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	let if_block = /*expanded*/ ctx[0] && create_if_block_2$1(ctx);

	return {
		c() {
			li = element("li");
			div = element("div");
			span0 = element("span");
			create_component(caretdown.$$.fragment);
			t0 = space();
			span1 = element("span");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			t2 = text(/*text*/ ctx[4]);
			t3 = space();
			if (if_block) if_block.c();
			attr(span0, "disabled", /*disabled*/ ctx[5]);
			toggle_class(span0, "bx--tree-parent-node__toggle", true);
			toggle_class(span1, "bx--tree-node__label__details", true);
			toggle_class(div, "bx--tree-node__label", true);
			attr(li, "role", "treeitem");
			attr(li, "id", /*id*/ ctx[3]);
			attr(li, "tabindex", li_tabindex_value = /*disabled*/ ctx[5] ? undefined : -1);
			attr(li, "aria-current", li_aria_current_value = /*id*/ ctx[3] === /*$activeNodeId*/ ctx[11] || undefined);

			attr(li, "aria-selected", li_aria_selected_value = /*disabled*/ ctx[5]
			? undefined
			: /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[3]));

			attr(li, "aria-disabled", /*disabled*/ ctx[5]);
			attr(li, "aria-expanded", /*expanded*/ ctx[0]);
			toggle_class(li, "bx--tree-node", true);
			toggle_class(li, "bx--tree-parent-node", true);
			toggle_class(li, "bx--tree-node--active", /*id*/ ctx[3] === /*$activeNodeId*/ ctx[11]);
			toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[3]));
			toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[5]);
			toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, div);
			append(div, span0);
			mount_component(caretdown, span0, null);
			append(div, t0);
			append(div, span1);

			if (switch_instance) {
				mount_component(switch_instance, span1, null);
			}

			append(span1, t1);
			append(span1, t2);
			/*div_binding*/ ctx[22](div);
			append(li, t3);
			if (if_block) if_block.m(li, null);
			/*li_binding*/ ctx[23](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span0, "click", /*click_handler*/ ctx[21]),
					listen(li, "click", stop_propagation(/*click_handler_1*/ ctx[24])),
					listen(li, "keydown", /*keydown_handler*/ ctx[25]),
					listen(li, "focus", /*focus_handler*/ ctx[26])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const caretdown_changes = {};
			if (dirty[0] & /*expanded*/ 1) caretdown_changes.class = "bx--tree-parent-node__toggle-icon " + (/*expanded*/ ctx[0] && 'bx--tree-parent-node__toggle-icon--expanded');
			caretdown.$set(caretdown_changes);

			if (!current || dirty[0] & /*disabled*/ 32) {
				attr(span0, "disabled", /*disabled*/ ctx[5]);
			}

			if (switch_value !== (switch_value = /*icon*/ ctx[6])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, span1, t1);
				} else {
					switch_instance = null;
				}
			}

			if (!current || dirty[0] & /*text*/ 16) set_data(t2, /*text*/ ctx[4]);

			if (/*expanded*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*expanded*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(li, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*id*/ 8) {
				attr(li, "id", /*id*/ ctx[3]);
			}

			if (!current || dirty[0] & /*disabled*/ 32 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[5] ? undefined : -1)) {
				attr(li, "tabindex", li_tabindex_value);
			}

			if (!current || dirty[0] & /*id, $activeNodeId*/ 2056 && li_aria_current_value !== (li_aria_current_value = /*id*/ ctx[3] === /*$activeNodeId*/ ctx[11] || undefined)) {
				attr(li, "aria-current", li_aria_current_value);
			}

			if (!current || dirty[0] & /*disabled, $selectedNodeIds, id*/ 4136 && li_aria_selected_value !== (li_aria_selected_value = /*disabled*/ ctx[5]
			? undefined
			: /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[3]))) {
				attr(li, "aria-selected", li_aria_selected_value);
			}

			if (!current || dirty[0] & /*disabled*/ 32) {
				attr(li, "aria-disabled", /*disabled*/ ctx[5]);
			}

			if (!current || dirty[0] & /*expanded*/ 1) {
				attr(li, "aria-expanded", /*expanded*/ ctx[0]);
			}

			if (dirty[0] & /*id, $activeNodeId*/ 2056) {
				toggle_class(li, "bx--tree-node--active", /*id*/ ctx[3] === /*$activeNodeId*/ ctx[11]);
			}

			if (dirty[0] & /*$selectedNodeIds, id*/ 4104) {
				toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[3]));
			}

			if (dirty[0] & /*disabled*/ 32) {
				toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[5]);
			}

			if (dirty[0] & /*icon*/ 64) {
				toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[6]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(caretdown.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(caretdown.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(caretdown);
			if (switch_instance) destroy_component(switch_instance);
			/*div_binding*/ ctx[22](null);
			if (if_block) if_block.d();
			/*li_binding*/ ctx[23](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (67:0) {#if root}
function create_if_block$a(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*children*/ ctx[1];
	const get_key = ctx => /*child*/ ctx[30].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$1(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*children*/ 2) {
				each_value = /*children*/ ctx[1];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$1, each_1_anchor, get_each_context$1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (155:4) {#if expanded}
function create_if_block_2$1(ctx) {
	let ul;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value_1 = /*children*/ ctx[1];
	const get_key = ctx => /*child*/ ctx[30].id;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "role", "group");
			toggle_class(ul, "bx--tree-node__children", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*children*/ 2) {
				each_value_1 = /*children*/ ctx[1];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, ul, outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (160:10) {:else}
function create_else_block_2(ctx) {
	let treeviewnode;
	let current;
	const treeviewnode_spread_levels = [{ leaf: true }, /*child*/ ctx[30]];
	let treeviewnode_props = {};

	for (let i = 0; i < treeviewnode_spread_levels.length; i += 1) {
		treeviewnode_props = assign(treeviewnode_props, treeviewnode_spread_levels[i]);
	}

	treeviewnode = new TreeViewNode({ props: treeviewnode_props });

	return {
		c() {
			create_component(treeviewnode.$$.fragment);
		},
		m(target, anchor) {
			mount_component(treeviewnode, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const treeviewnode_changes = (dirty[0] & /*children*/ 2)
			? get_spread_update(treeviewnode_spread_levels, [treeviewnode_spread_levels[0], get_spread_object(/*child*/ ctx[30])])
			: {};

			treeviewnode.$set(treeviewnode_changes);
		},
		i(local) {
			if (current) return;
			transition_in(treeviewnode.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(treeviewnode.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(treeviewnode, detaching);
		}
	};
}

// (158:10) {#if Array.isArray(child.children)}
function create_if_block_3(ctx) {
	let treeviewnodelist;
	let current;
	const treeviewnodelist_spread_levels = [/*child*/ ctx[30]];
	let treeviewnodelist_props = {};

	for (let i = 0; i < treeviewnodelist_spread_levels.length; i += 1) {
		treeviewnodelist_props = assign(treeviewnodelist_props, treeviewnodelist_spread_levels[i]);
	}

	treeviewnodelist = new TreeViewNodeList({ props: treeviewnodelist_props });

	return {
		c() {
			create_component(treeviewnodelist.$$.fragment);
		},
		m(target, anchor) {
			mount_component(treeviewnodelist, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const treeviewnodelist_changes = (dirty[0] & /*children*/ 2)
			? get_spread_update(treeviewnodelist_spread_levels, [get_spread_object(/*child*/ ctx[30])])
			: {};

			treeviewnodelist.$set(treeviewnodelist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(treeviewnodelist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(treeviewnodelist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(treeviewnodelist, detaching);
		}
	};
}

// (157:8) {#each children as child (child.id)}
function create_each_block_1(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_3, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (dirty[0] & /*children*/ 2) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*child*/ ctx[30].children);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (71:4) {:else}
function create_else_block$1(ctx) {
	let treeviewnode;
	let current;
	const treeviewnode_spread_levels = [{ leaf: true }, /*child*/ ctx[30]];
	let treeviewnode_props = {};

	for (let i = 0; i < treeviewnode_spread_levels.length; i += 1) {
		treeviewnode_props = assign(treeviewnode_props, treeviewnode_spread_levels[i]);
	}

	treeviewnode = new TreeViewNode({ props: treeviewnode_props });

	return {
		c() {
			create_component(treeviewnode.$$.fragment);
		},
		m(target, anchor) {
			mount_component(treeviewnode, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const treeviewnode_changes = (dirty[0] & /*children*/ 2)
			? get_spread_update(treeviewnode_spread_levels, [treeviewnode_spread_levels[0], get_spread_object(/*child*/ ctx[30])])
			: {};

			treeviewnode.$set(treeviewnode_changes);
		},
		i(local) {
			if (current) return;
			transition_in(treeviewnode.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(treeviewnode.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(treeviewnode, detaching);
		}
	};
}

// (69:4) {#if Array.isArray(child.children)}
function create_if_block_1$3(ctx) {
	let treeviewnodelist;
	let current;
	const treeviewnodelist_spread_levels = [/*child*/ ctx[30]];
	let treeviewnodelist_props = {};

	for (let i = 0; i < treeviewnodelist_spread_levels.length; i += 1) {
		treeviewnodelist_props = assign(treeviewnodelist_props, treeviewnodelist_spread_levels[i]);
	}

	treeviewnodelist = new TreeViewNodeList({ props: treeviewnodelist_props });

	return {
		c() {
			create_component(treeviewnodelist.$$.fragment);
		},
		m(target, anchor) {
			mount_component(treeviewnodelist, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const treeviewnodelist_changes = (dirty[0] & /*children*/ 2)
			? get_spread_update(treeviewnodelist_spread_levels, [get_spread_object(/*child*/ ctx[30])])
			: {};

			treeviewnodelist.$set(treeviewnodelist_changes);
		},
		i(local) {
			if (current) return;
			transition_in(treeviewnodelist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(treeviewnodelist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(treeviewnodelist, detaching);
		}
	};
}

// (68:2) {#each children as child (child.id)}
function create_each_block$1(key_1, ctx) {
	let first;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$3, create_else_block$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (dirty[0] & /*children*/ 2) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*child*/ ctx[30].children);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$p(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$a, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*root*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$p($$self, $$props, $$invalidate) {
	let parent;
	let node;
	let $expandedNodeIds;
	let $activeNodeId;
	let $selectedNodeIds;
	let { children = [] } = $$props;
	let { expanded = false } = $$props;
	let { root = false } = $$props;
	let { id = "" } = $$props;
	let { text = "" } = $$props;
	let { disabled = false } = $$props;
	let { icon = undefined } = $$props;
	let ref = null;
	let refLabel = null;
	let prevActiveId = undefined;
	const { activeNodeId, selectedNodeIds, expandedNodeIds, clickNode, selectNode, expandNode, focusNode, toggleNode } = getContext("TreeView");
	component_subscribe($$self, activeNodeId, value => $$invalidate(11, $activeNodeId = value));
	component_subscribe($$self, selectedNodeIds, value => $$invalidate(12, $selectedNodeIds = value));
	component_subscribe($$self, expandedNodeIds, value => $$invalidate(20, $expandedNodeIds = value));

	const offset = () => {
		const depth = computeTreeLeafDepth(refLabel);
		if (parent) return depth + 1;
		if (icon) return depth + 2;
		return depth + 2.5;
	};

	afterUpdate(() => {
		if (id === $activeNodeId && prevActiveId !== $activeNodeId) {
			if (!$selectedNodeIds.includes(id)) selectNode(node);
		}

		prevActiveId = $activeNodeId;
	});

	const click_handler = () => {
		if (disabled) return;
		$$invalidate(0, expanded = !expanded);
		expandNode(node, expanded);
		toggleNode(node);
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refLabel = $$value;
			$$invalidate(7, refLabel);
		});
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(9, ref);
		});
	}

	const click_handler_1 = () => {
		if (disabled) return;
		clickNode(node);
	};

	const keydown_handler = e => {
		if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Enter') {
			e.stopPropagation();
		}

		if (parent && e.key === 'ArrowLeft') {
			$$invalidate(0, expanded = false);
			expandNode(node, false);
			toggleNode(node);
		}

		if (parent && e.key === 'ArrowRight') {
			if (expanded) {
				ref.lastChild.firstElementChild?.focus();
			} else {
				$$invalidate(0, expanded = true);
				expandNode(node, true);
				toggleNode(node);
			}
		}

		if (e.key === 'Enter' || e.key === ' ') {
			e.preventDefault();
			if (disabled) return;
			$$invalidate(0, expanded = !expanded);
			toggleNode(node);
			clickNode(node);
			expandNode(node, expanded);
			ref.focus();
		}
	};

	const focus_handler = () => {
		focusNode(node);
	};

	$$self.$$set = $$props => {
		if ('children' in $$props) $$invalidate(1, children = $$props.children);
		if ('expanded' in $$props) $$invalidate(0, expanded = $$props.expanded);
		if ('root' in $$props) $$invalidate(2, root = $$props.root);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
		if ('text' in $$props) $$invalidate(4, text = $$props.text);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$props.disabled);
		if ('icon' in $$props) $$invalidate(6, icon = $$props.icon);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*children*/ 2) {
			$$invalidate(8, parent = Array.isArray(children));
		}

		if ($$self.$$.dirty[0] & /*$expandedNodeIds, id*/ 1048584) {
			$$invalidate(0, expanded = $expandedNodeIds.includes(id));
		}

		if ($$self.$$.dirty[0] & /*id, text, expanded, parent*/ 281) {
			$$invalidate(10, node = { id, text, expanded, leaf: !parent });
		}

		if ($$self.$$.dirty[0] & /*refLabel*/ 128) {
			if (refLabel) {
				$$invalidate(7, refLabel.style.marginLeft = `-${offset()}rem`, refLabel);
				$$invalidate(7, refLabel.style.paddingLeft = `${offset()}rem`, refLabel);
			}
		}
	};

	return [
		expanded,
		children,
		root,
		id,
		text,
		disabled,
		icon,
		refLabel,
		parent,
		ref,
		node,
		$activeNodeId,
		$selectedNodeIds,
		activeNodeId,
		selectedNodeIds,
		expandedNodeIds,
		clickNode,
		expandNode,
		focusNode,
		toggleNode,
		$expandedNodeIds,
		click_handler,
		div_binding,
		li_binding,
		click_handler_1,
		keydown_handler,
		focus_handler
	];
}

class TreeViewNodeList extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$p,
			create_fragment$p,
			safe_not_equal,
			{
				children: 1,
				expanded: 0,
				root: 2,
				id: 3,
				text: 4,
				disabled: 5,
				icon: 6
			},
			null,
			[-1, -1]
		);
	}
}

var TreeViewNodeList$1 = TreeViewNodeList;

/* src/TreeView/TreeView.svelte generated by Svelte v3.49.0 */
const get_labelText_slot_changes = dirty => ({});
const get_labelText_slot_context = ctx => ({});

// (184:0) {#if !hideLabel}
function create_if_block$9(ctx) {
	let label;
	let current;
	const labelText_slot_template = /*#slots*/ ctx[17].labelText;
	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[16], get_labelText_slot_context);
	const labelText_slot_or_fallback = labelText_slot || fallback_block$9(ctx);

	return {
		c() {
			label = element("label");
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
			attr(label, "id", /*labelId*/ ctx[6]);
			toggle_class(label, "bx--label", true);
		},
		m(target, anchor) {
			insert(target, label, anchor);

			if (labelText_slot_or_fallback) {
				labelText_slot_or_fallback.m(label, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (labelText_slot) {
				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						labelText_slot,
						labelText_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[16], dirty, get_labelText_slot_changes),
						get_labelText_slot_context
					);
				}
			} else {
				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 8)) {
					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(labelText_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(labelText_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(label);
			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
		}
	};
}

// (187:27) {labelText}
function fallback_block$9(ctx) {
	let t;

	return {
		c() {
			t = text(/*labelText*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*labelText*/ 8) set_data(t, /*labelText*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$o(ctx) {
	let t;
	let ul;
	let treeviewnodelist;
	let ul_aria_label_value;
	let ul_aria_labelledby_value;
	let ul_aria_multiselectable_value;
	let current;
	let mounted;
	let dispose;
	let if_block = !/*hideLabel*/ ctx[4] && create_if_block$9(ctx);

	treeviewnodelist = new TreeViewNodeList$1({
			props: {
				root: true,
				children: /*children*/ ctx[1]
			}
		});

	let ul_levels = [
		/*$$restProps*/ ctx[8],
		{ role: "tree" },
		{
			"aria-label": ul_aria_label_value = /*hideLabel*/ ctx[4] ? /*labelText*/ ctx[3] : undefined
		},
		{
			"aria-labelledby": ul_aria_labelledby_value = !/*hideLabel*/ ctx[4] ? /*labelId*/ ctx[6] : undefined
		},
		{
			"aria-multiselectable": ul_aria_multiselectable_value = /*selectedIds*/ ctx[0].length > 1 || undefined
		}
	];

	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			ul = element("ul");
			create_component(treeviewnodelist.$$.fragment);
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--tree", true);
			toggle_class(ul, "bx--tree--default", /*size*/ ctx[2] === 'default');
			toggle_class(ul, "bx--tree--compact", /*size*/ ctx[2] === 'compact');
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, ul, anchor);
			mount_component(treeviewnodelist, ul, null);
			/*ul_binding*/ ctx[19](ul);
			current = true;

			if (!mounted) {
				dispose = [
					listen(ul, "keydown", /*keydown_handler*/ ctx[18]),
					listen(ul, "keydown", stop_propagation(/*handleKeyDown*/ ctx[7]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*hideLabel*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hideLabel*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$9(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const treeviewnodelist_changes = {};
			if (dirty & /*children*/ 2) treeviewnodelist_changes.children = /*children*/ ctx[1];
			treeviewnodelist.$set(treeviewnodelist_changes);

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8],
				{ role: "tree" },
				(!current || dirty & /*hideLabel, labelText*/ 24 && ul_aria_label_value !== (ul_aria_label_value = /*hideLabel*/ ctx[4] ? /*labelText*/ ctx[3] : undefined)) && { "aria-label": ul_aria_label_value },
				(!current || dirty & /*hideLabel*/ 16 && ul_aria_labelledby_value !== (ul_aria_labelledby_value = !/*hideLabel*/ ctx[4] ? /*labelId*/ ctx[6] : undefined)) && {
					"aria-labelledby": ul_aria_labelledby_value
				},
				(!current || dirty & /*selectedIds*/ 1 && ul_aria_multiselectable_value !== (ul_aria_multiselectable_value = /*selectedIds*/ ctx[0].length > 1 || undefined)) && {
					"aria-multiselectable": ul_aria_multiselectable_value
				}
			]));

			toggle_class(ul, "bx--tree", true);
			toggle_class(ul, "bx--tree--default", /*size*/ ctx[2] === 'default');
			toggle_class(ul, "bx--tree--compact", /*size*/ ctx[2] === 'compact');
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(treeviewnodelist.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(treeviewnodelist.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(ul);
			destroy_component(treeviewnodelist);
			/*ul_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$o($$self, $$props, $$invalidate) {
	let nodes;
	let nodeIds;

	const omit_props_names = [
		"children","activeId","selectedIds","expandedIds","size","labelText","hideLabel","expandAll","collapseAll","expandNodes","collapseNodes"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { children = [] } = $$props;
	let { activeId = "" } = $$props;
	let { selectedIds = [] } = $$props;
	let { expandedIds = [] } = $$props;
	let { size = "default" } = $$props;
	let { labelText = "" } = $$props;
	let { hideLabel = false } = $$props;

	function expandAll() {
		$$invalidate(10, expandedIds = [...nodeIds]);
	}

	function collapseAll() {
		$$invalidate(10, expandedIds = []);
	}

	function expandNodes(filterNode = node => false) {
		$$invalidate(10, expandedIds = nodes.filter(node => filterNode(node) || node.children?.some(child => filterNode(child) && child.children)).map(node => node.id));
	}

	function collapseNodes(filterNode = node => true) {
		$$invalidate(10, expandedIds = nodes.filter(node => expandedIds.includes(node.id) && !filterNode(node)).map(node => node.id));
	}

	const dispatch = createEventDispatcher();
	const labelId = `label-${Math.random().toString(36)}`;
	const activeNodeId = writable(activeId);
	const selectedNodeIds = writable(selectedIds);
	const expandedNodeIds = writable(expandedIds);
	let ref = null;
	let treeWalker = null;

	setContext("TreeView", {
		activeNodeId,
		selectedNodeIds,
		expandedNodeIds,
		clickNode: node => {
			$$invalidate(9, activeId = node.id);
			$$invalidate(0, selectedIds = [node.id]);
			dispatch("select", node);
		},
		selectNode: node => {
			$$invalidate(0, selectedIds = [node.id]);
		},
		expandNode: (node, expanded) => {
			if (expanded) {
				$$invalidate(10, expandedIds = [...expandedIds, node.id]);
			} else {
				$$invalidate(10, expandedIds = expandedIds.filter(_id => _id !== node.id));
			}
		},
		focusNode: node => dispatch("focus", node),
		toggleNode: node => dispatch("toggle", node)
	});

	function handleKeyDown(e) {
		if (e.key === "ArrowUp" || e.key === "ArrowDown") e.preventDefault();
		treeWalker.currentNode = e.target;
		let node = null;
		if (e.key === "ArrowUp") node = treeWalker.previousNode();
		if (e.key === "ArrowDown") node = treeWalker.nextNode();

		if (node && node !== e.target) {
			node.tabIndex = "0";
			node.focus();
		}
	}

	onMount(() => {
		const firstFocusableNode = ref.querySelector("li.bx--tree-node:not(.bx--tree-node--disabled)");

		if (firstFocusableNode != null) {
			firstFocusableNode.tabIndex = "0";
		}
	});

	/**
 * @param {Array<TreeNode & { children?: TreeNode[] }>} children
 */
	function traverse(children) {
		let nodes = [];

		children.forEach(node => {
			nodes.push(node);

			if (Array.isArray(node.children)) {
				nodes = [...nodes, ...traverse(node.children)];
			}
		});

		return nodes;
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(5, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('children' in $$new_props) $$invalidate(1, children = $$new_props.children);
		if ('activeId' in $$new_props) $$invalidate(9, activeId = $$new_props.activeId);
		if ('selectedIds' in $$new_props) $$invalidate(0, selectedIds = $$new_props.selectedIds);
		if ('expandedIds' in $$new_props) $$invalidate(10, expandedIds = $$new_props.expandedIds);
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('labelText' in $$new_props) $$invalidate(3, labelText = $$new_props.labelText);
		if ('hideLabel' in $$new_props) $$invalidate(4, hideLabel = $$new_props.hideLabel);
		if ('$$scope' in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*children*/ 2) {
			$$invalidate(15, nodes = traverse(children));
		}

		if ($$self.$$.dirty & /*nodes*/ 32768) {
			nodeIds = nodes.map(node => node.id);
		}

		if ($$self.$$.dirty & /*activeId*/ 512) {
			activeNodeId.set(activeId);
		}

		if ($$self.$$.dirty & /*selectedIds*/ 1) {
			selectedNodeIds.set(selectedIds);
		}

		if ($$self.$$.dirty & /*expandedIds*/ 1024) {
			expandedNodeIds.set(expandedIds);
		}

		if ($$self.$$.dirty & /*ref*/ 32) {
			if (ref) {
				treeWalker = document.createTreeWalker(ref, NodeFilter.SHOW_ELEMENT, {
					acceptNode: node => {
						if (node.classList.contains("bx--tree-node--disabled")) return NodeFilter.FILTER_REJECT;
						if (node.matches("li.bx--tree-node")) return NodeFilter.FILTER_ACCEPT;
						return NodeFilter.FILTER_SKIP;
					}
				});
			}
		}
	};

	return [
		selectedIds,
		children,
		size,
		labelText,
		hideLabel,
		ref,
		labelId,
		handleKeyDown,
		$$restProps,
		activeId,
		expandedIds,
		expandAll,
		collapseAll,
		expandNodes,
		collapseNodes,
		nodes,
		$$scope,
		slots,
		keydown_handler,
		ul_binding
	];
}

class TreeView extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
			children: 1,
			activeId: 9,
			selectedIds: 0,
			expandedIds: 10,
			size: 2,
			labelText: 3,
			hideLabel: 4,
			expandAll: 11,
			collapseAll: 12,
			expandNodes: 13,
			collapseNodes: 14
		});
	}

	get expandAll() {
		return this.$$.ctx[11];
	}

	get collapseAll() {
		return this.$$.ctx[12];
	}

	get expandNodes() {
		return this.$$.ctx[13];
	}

	get collapseNodes() {
		return this.$$.ctx[14];
	}
}

var TreeView$1 = TreeView;

/* src/Truncate/Truncate.svelte generated by Svelte v3.49.0 */

function create_fragment$n(ctx) {
	let p;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let p_levels = [/*$$restProps*/ ctx[1]];
	let p_data = {};

	for (let i = 0; i < p_levels.length; i += 1) {
		p_data = assign(p_data, p_levels[i]);
	}

	return {
		c() {
			p = element("p");
			if (default_slot) default_slot.c();
			set_attributes(p, p_data);
			toggle_class(p, "bx--text-truncate--end", /*clamp*/ ctx[0] === 'end');
			toggle_class(p, "bx--text-truncate--front", /*clamp*/ ctx[0] === 'front');
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(p, p_data = get_spread_update(p_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
			toggle_class(p, "bx--text-truncate--end", /*clamp*/ ctx[0] === 'end');
			toggle_class(p, "bx--text-truncate--front", /*clamp*/ ctx[0] === 'front');
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$n($$self, $$props, $$invalidate) {
	const omit_props_names = ["clamp"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { clamp = "end" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('clamp' in $$new_props) $$invalidate(0, clamp = $$new_props.clamp);
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	return [clamp, $$restProps, $$scope, slots];
}

class Truncate extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$n, create_fragment$n, safe_not_equal, { clamp: 0 });
	}
}

var Truncate$1 = Truncate;

/**
 * Svelte action that applies single-line text truncation to an element
 * @typedef {{ clamp?: "end" | "front" }} TruncateOptions
 * @type {(node: HTMLElement, options?: TruncateOptions) => { update: (options?: TruncateOptions) => void; }}
 * @example
 * <h1 use:truncate>...</h1>
 * <h1 use:truncate={{ clamp: "front" }}>...</h1>
 */
function truncate(node, options = {}) {
  const prefix = "bx--text-truncate--";

  function toggleClass(front = false) {
    const classes = [...node.classList]
      .filter((name) => !name.startsWith(prefix))
      .join(" ");

    node.className = `${classes} ${prefix}${front ? "front" : "end"}`;
  }

  toggleClass(options.clamp === "front");

  return {
    update(options) {
      toggleClass(options.clamp === "front");
    },
  };
}

/* src/icons/Menu.svelte generated by Svelte v3.49.0 */

function create_if_block$8(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$m(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$8(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M4 6H28V8H4zM4 24H28V26H4zM4 12H28V14H4zM4 18H28V20H4z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$m($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Menu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$m, create_fragment$m, safe_not_equal, { size: 0, title: 1 });
	}
}

var Menu$1 = Menu;

const shouldRenderHamburgerMenu = writable(false);

const isSideNavCollapsed = writable(false);

/* src/UIShell/HamburgerMenu.svelte generated by Svelte v3.49.0 */

function create_fragment$l(ctx) {
	let button;
	let switch_instance;
	let current;
	let mounted;
	let dispose;

	var switch_value = /*isOpen*/ ctx[0]
	? /*iconClose*/ ctx[4]
	: /*iconMenu*/ ctx[3];

	function switch_props(ctx) {
		return { props: { size: 20 } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	let button_levels = [
		{ type: "button" },
		{ title: /*ariaLabel*/ ctx[2] },
		{ "aria-label": /*ariaLabel*/ ctx[2] },
		/*$$restProps*/ ctx[5]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (switch_instance) {
				mount_component(switch_instance, button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[6]),
					listen(button, "click", /*click_handler_1*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (switch_value !== (switch_value = /*isOpen*/ ctx[0]
			? /*iconClose*/ ctx[4]
			: /*iconMenu*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, button, null);
				} else {
					switch_instance = null;
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*ariaLabel*/ 4) && { title: /*ariaLabel*/ ctx[2] },
				(!current || dirty & /*ariaLabel*/ 4) && { "aria-label": /*ariaLabel*/ ctx[2] },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__menu-trigger", true);
			toggle_class(button, "bx--header__menu-toggle", true);
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (switch_instance) destroy_component(switch_instance);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	const omit_props_names = ["ariaLabel","isOpen","iconMenu","iconClose","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { iconMenu = Menu$1 } = $$props;
	let { iconClose = Close$1 } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => $$invalidate(0, isOpen = !isOpen);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('ariaLabel' in $$new_props) $$invalidate(2, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('iconMenu' in $$new_props) $$invalidate(3, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(4, iconClose = $$new_props.iconClose);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
	};

	return [
		isOpen,
		ref,
		ariaLabel,
		iconMenu,
		iconClose,
		$$restProps,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class HamburgerMenu extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			ariaLabel: 2,
			isOpen: 0,
			iconMenu: 3,
			iconClose: 4,
			ref: 1
		});
	}
}

var HamburgerMenu$1 = HamburgerMenu;

/* src/UIShell/Header.svelte generated by Svelte v3.49.0 */
const get_platform_slot_changes = dirty => ({});
const get_platform_slot_context = ctx => ({});
const get_skip_to_content_slot_changes = dirty => ({});
const get_skip_to_content_slot_context = ctx => ({});

// (83:2) {#if ($shouldRenderHamburgerMenu && winWidth < expansionBreakpoint) || persistentHamburgerMenu}
function create_if_block_1$2(ctx) {
	let hamburgermenu;
	let updating_isOpen;
	let current;

	function hamburgermenu_isOpen_binding(value) {
		/*hamburgermenu_isOpen_binding*/ ctx[19](value);
	}

	let hamburgermenu_props = {
		iconClose: /*iconClose*/ ctx[8],
		iconMenu: /*iconMenu*/ ctx[7]
	};

	if (/*isSideNavOpen*/ ctx[0] !== void 0) {
		hamburgermenu_props.isOpen = /*isSideNavOpen*/ ctx[0];
	}

	hamburgermenu = new HamburgerMenu$1({ props: hamburgermenu_props });
	binding_callbacks.push(() => bind(hamburgermenu, 'isOpen', hamburgermenu_isOpen_binding));

	return {
		c() {
			create_component(hamburgermenu.$$.fragment);
		},
		m(target, anchor) {
			mount_component(hamburgermenu, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const hamburgermenu_changes = {};
			if (dirty & /*iconClose*/ 256) hamburgermenu_changes.iconClose = /*iconClose*/ ctx[8];
			if (dirty & /*iconMenu*/ 128) hamburgermenu_changes.iconMenu = /*iconMenu*/ ctx[7];

			if (!updating_isOpen && dirty & /*isSideNavOpen*/ 1) {
				updating_isOpen = true;
				hamburgermenu_changes.isOpen = /*isSideNavOpen*/ ctx[0];
				add_flush_callback(() => updating_isOpen = false);
			}

			hamburgermenu.$set(hamburgermenu_changes);
		},
		i(local) {
			if (current) return;
			transition_in(hamburgermenu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(hamburgermenu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(hamburgermenu, detaching);
		}
	};
}

// (97:4) {#if company}
function create_if_block$7(ctx) {
	let span;
	let t0;
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text(/*company*/ ctx[3]);
			t1 = text(" ");
			toggle_class(span, "bx--header__name--prefix", true);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*company*/ 8) set_data(t0, /*company*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (100:26) {platformName}
function fallback_block$8(ctx) {
	let t;

	return {
		c() {
			t = text(/*platformName*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*platformName*/ 16) set_data(t, /*platformName*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$k(ctx) {
	let header;
	let t0;
	let t1;
	let a;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[18]);
	const skip_to_content_slot_template = /*#slots*/ ctx[16]["skip-to-content"];
	const skip_to_content_slot = create_slot(skip_to_content_slot_template, ctx, /*$$scope*/ ctx[15], get_skip_to_content_slot_context);
	let if_block0 = (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) && create_if_block_1$2(ctx);
	let if_block1 = /*company*/ ctx[3] && create_if_block$7(ctx);
	const platform_slot_template = /*#slots*/ ctx[16].platform;
	const platform_slot = create_slot(platform_slot_template, ctx, /*$$scope*/ ctx[15], get_platform_slot_context);
	const platform_slot_or_fallback = platform_slot || fallback_block$8(ctx);
	let a_levels = [{ href: /*href*/ ctx[2] }, /*$$restProps*/ ctx[12]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[16].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], null);

	return {
		c() {
			header = element("header");
			if (skip_to_content_slot) skip_to_content_slot.c();
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			a = element("a");
			if (if_block1) if_block1.c();
			t2 = space();
			if (platform_slot_or_fallback) platform_slot_or_fallback.c();
			t3 = space();
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__name", true);
			attr(header, "aria-label", /*ariaLabel*/ ctx[10]);
			toggle_class(header, "bx--header", true);
		},
		m(target, anchor) {
			insert(target, header, anchor);

			if (skip_to_content_slot) {
				skip_to_content_slot.m(header, null);
			}

			append(header, t0);
			if (if_block0) if_block0.m(header, null);
			append(header, t1);
			append(header, a);
			if (if_block1) if_block1.m(a, null);
			append(a, t2);

			if (platform_slot_or_fallback) {
				platform_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[20](a);
			append(header, t3);

			if (default_slot) {
				default_slot.m(header, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "resize", /*onwindowresize*/ ctx[18]),
					listen(a, "click", /*click_handler*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (skip_to_content_slot) {
				if (skip_to_content_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						skip_to_content_slot,
						skip_to_content_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(skip_to_content_slot_template, /*$$scope*/ ctx[15], dirty, get_skip_to_content_slot_changes),
						get_skip_to_content_slot_context
					);
				}
			}

			if (/*$shouldRenderHamburgerMenu*/ ctx[11] && /*winWidth*/ ctx[9] < /*expansionBreakpoint*/ ctx[6] || /*persistentHamburgerMenu*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*$shouldRenderHamburgerMenu, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 2656) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(header, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*company*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$7(ctx);
					if_block1.c();
					if_block1.m(a, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (platform_slot) {
				if (platform_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						platform_slot,
						platform_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(platform_slot_template, /*$$scope*/ ctx[15], dirty, get_platform_slot_changes),
						get_platform_slot_context
					);
				}
			} else {
				if (platform_slot_or_fallback && platform_slot_or_fallback.p && (!current || dirty & /*platformName*/ 16)) {
					platform_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 4096 && /*$$restProps*/ ctx[12]
			]));

			toggle_class(a, "bx--header__name", true);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[15],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*ariaLabel*/ 1024) {
				attr(header, "aria-label", /*ariaLabel*/ ctx[10]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(skip_to_content_slot, local);
			transition_in(if_block0);
			transition_in(platform_slot_or_fallback, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(skip_to_content_slot, local);
			transition_out(if_block0);
			transition_out(platform_slot_or_fallback, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (skip_to_content_slot) skip_to_content_slot.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (platform_slot_or_fallback) platform_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[20](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let ariaLabel;

	const omit_props_names = [
		"expandedByDefault","isSideNavOpen","uiShellAriaLabel","href","company","platformName","persistentHamburgerMenu","expansionBreakpoint","ref","iconMenu","iconClose"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $shouldRenderHamburgerMenu;
	component_subscribe($$self, shouldRenderHamburgerMenu, $$value => $$invalidate(11, $shouldRenderHamburgerMenu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expandedByDefault = true } = $$props;
	let { isSideNavOpen = false } = $$props;
	let { uiShellAriaLabel = undefined } = $$props;
	let { href = undefined } = $$props;
	let { company = undefined } = $$props;
	let { platformName = "" } = $$props;
	let { persistentHamburgerMenu = false } = $$props;
	let { expansionBreakpoint = 1056 } = $$props;
	let { ref = null } = $$props;
	let { iconMenu = Menu$1 } = $$props;
	let { iconClose = Close$1 } = $$props;
	let winWidth = undefined;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function onwindowresize() {
		$$invalidate(9, winWidth = window.innerWidth);
	}

	function hamburgermenu_isOpen_binding(value) {
		isSideNavOpen = value;
		(((($$invalidate(0, isSideNavOpen), $$invalidate(13, expandedByDefault)), $$invalidate(9, winWidth)), $$invalidate(6, expansionBreakpoint)), $$invalidate(5, persistentHamburgerMenu));
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(21, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expandedByDefault' in $$new_props) $$invalidate(13, expandedByDefault = $$new_props.expandedByDefault);
		if ('isSideNavOpen' in $$new_props) $$invalidate(0, isSideNavOpen = $$new_props.isSideNavOpen);
		if ('uiShellAriaLabel' in $$new_props) $$invalidate(14, uiShellAriaLabel = $$new_props.uiShellAriaLabel);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('company' in $$new_props) $$invalidate(3, company = $$new_props.company);
		if ('platformName' in $$new_props) $$invalidate(4, platformName = $$new_props.platformName);
		if ('persistentHamburgerMenu' in $$new_props) $$invalidate(5, persistentHamburgerMenu = $$new_props.persistentHamburgerMenu);
		if ('expansionBreakpoint' in $$new_props) $$invalidate(6, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('iconMenu' in $$new_props) $$invalidate(7, iconMenu = $$new_props.iconMenu);
		if ('iconClose' in $$new_props) $$invalidate(8, iconClose = $$new_props.iconClose);
		if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*expandedByDefault, winWidth, expansionBreakpoint, persistentHamburgerMenu*/ 8800) {
			$$invalidate(0, isSideNavOpen = expandedByDefault && winWidth >= expansionBreakpoint && !persistentHamburgerMenu);
		}

		$$invalidate(10, ariaLabel = company
		? `${company} `
		: "" + (uiShellAriaLabel || $$props["aria-label"] || platformName));
	};

	$$props = exclude_internal_props($$props);

	return [
		isSideNavOpen,
		ref,
		href,
		company,
		platformName,
		persistentHamburgerMenu,
		expansionBreakpoint,
		iconMenu,
		iconClose,
		winWidth,
		ariaLabel,
		$shouldRenderHamburgerMenu,
		$$restProps,
		expandedByDefault,
		uiShellAriaLabel,
		$$scope,
		slots,
		click_handler,
		onwindowresize,
		hamburgermenu_isOpen_binding,
		a_binding
	];
}

class Header extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
			expandedByDefault: 13,
			isSideNavOpen: 0,
			uiShellAriaLabel: 14,
			href: 2,
			company: 3,
			platformName: 4,
			persistentHamburgerMenu: 5,
			expansionBreakpoint: 6,
			ref: 1,
			iconMenu: 7,
			iconClose: 8
		});
	}
}

var Header$1 = Header;

/* src/icons/Switcher.svelte generated by Svelte v3.49.0 */

function create_if_block$6(ctx) {
	let title_1;
	let t;

	return {
		c() {
			title_1 = svg_element("title");
			t = text(/*title*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, title_1, anchor);
			append(title_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*title*/ 2) set_data(t, /*title*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(title_1);
		}
	};
}

function create_fragment$j(ctx) {
	let svg;
	let path;
	let if_block = /*title*/ ctx[1] && create_if_block$6(ctx);

	let svg_levels = [
		{ xmlns: "http://www.w3.org/2000/svg" },
		{ viewBox: "0 0 32 32" },
		{ fill: "currentColor" },
		{ preserveAspectRatio: "xMidYMid meet" },
		{ width: /*size*/ ctx[0] },
		{ height: /*size*/ ctx[0] },
		/*attributes*/ ctx[2],
		/*$$restProps*/ ctx[3]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	return {
		c() {
			svg = svg_element("svg");
			if (if_block) if_block.c();
			path = svg_element("path");
			attr(path, "d", "M14 4H18V8H14zM4 4H8V8H4zM24 4H28V8H24zM14 14H18V18H14zM4 14H8V18H4zM24 14H28V18H24zM14 24H18V28H14zM4 24H8V28H4zM24 24H28V28H24z");
			set_svg_attributes(svg, svg_data);
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, path);
		},
		p(ctx, [dirty]) {
			if (/*title*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$6(ctx);
					if_block.c();
					if_block.m(svg, path);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ xmlns: "http://www.w3.org/2000/svg" },
				{ viewBox: "0 0 32 32" },
				{ fill: "currentColor" },
				{ preserveAspectRatio: "xMidYMid meet" },
				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
			if (if_block) if_block.d();
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	let labelled;
	let attributes;
	const omit_props_names = ["size","title"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { size = 16 } = $$props;
	let { title = undefined } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
	};

	$$self.$$.update = () => {
		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

		$$invalidate(2, attributes = {
			"aria-hidden": labelled ? undefined : true,
			role: labelled ? "img" : undefined,
			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
		});
	};

	$$props = exclude_internal_props($$props);
	return [size, title, attributes, $$restProps, labelled];
}

class Switcher extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, { size: 0, title: 1 });
	}
}

var Switcher$1 = Switcher;

/* src/UIShell/HeaderAction.svelte generated by Svelte v3.49.0 */

function add_css$3(target) {
	append_styles(target, "svelte-187bdaq", ".action-text.svelte-187bdaq.svelte-187bdaq{display:inline-flex;align-items:center;width:auto;padding:0 1rem 2px 1rem;font-size:0.875rem;line-height:1.28572;letter-spacing:0.16px;color:#f4f4f4}.action-text.svelte-187bdaq>span.svelte-187bdaq{margin-left:0.75rem}");
}

const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});
const get_icon_slot_changes$3 = dirty => ({});
const get_icon_slot_context$3 = ctx => ({});
const get_closeIcon_slot_changes = dirty => ({});
const get_closeIcon_slot_context = ctx => ({});

// (77:2) {:else}
function create_else_block(ctx) {
	let current;
	const icon_slot_template = /*#slots*/ ctx[10].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[9], get_icon_slot_context$3);
	const icon_slot_or_fallback = icon_slot || fallback_block_2(ctx);

	return {
		c() {
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[9], dirty, get_icon_slot_changes$3),
						get_icon_slot_context$3
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 4)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (73:2) {#if isOpen}
function create_if_block_2(ctx) {
	let current;
	const closeIcon_slot_template = /*#slots*/ ctx[10].closeIcon;
	const closeIcon_slot = create_slot(closeIcon_slot_template, ctx, /*$$scope*/ ctx[9], get_closeIcon_slot_context);
	const closeIcon_slot_or_fallback = closeIcon_slot || fallback_block_1$1(ctx);

	return {
		c() {
			if (closeIcon_slot_or_fallback) closeIcon_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (closeIcon_slot_or_fallback) {
				closeIcon_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (closeIcon_slot) {
				if (closeIcon_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						closeIcon_slot,
						closeIcon_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(closeIcon_slot_template, /*$$scope*/ ctx[9], dirty, get_closeIcon_slot_changes),
						get_closeIcon_slot_context
					);
				}
			} else {
				if (closeIcon_slot_or_fallback && closeIcon_slot_or_fallback.p && (!current || dirty & /*closeIcon*/ 8)) {
					closeIcon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(closeIcon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(closeIcon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (closeIcon_slot_or_fallback) closeIcon_slot_or_fallback.d(detaching);
		}
	};
}

// (78:22)        
function fallback_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return { props: { size: 20 } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (74:27)        
function fallback_block_1$1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*closeIcon*/ ctx[3];

	function switch_props(ctx) {
		return { props: { size: 20 } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*closeIcon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (83:4) {#if text}
function create_if_block_1$1(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*text*/ ctx[4]);
			attr(span, "class", "svelte-187bdaq");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 16) set_data(t, /*text*/ ctx[4]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (82:20)      
function fallback_block$7(ctx) {
	let if_block_anchor;
	let if_block = /*text*/ ctx[4] && create_if_block_1$1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*text*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (86:0) {#if isOpen}
function create_if_block$5(ctx) {
	let div;
	let div_transition;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header-panel", true);
			toggle_class(div, "bx--header-panel--expanded", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[15](div);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(
					div,
					slide,
					{
						.../*transition*/ ctx[5],
						duration: /*transition*/ ctx[5] === false
						? 0
						: /*transition*/ ctx[5].duration
					},
					true
				);

				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);

			if (!div_transition) div_transition = create_bidirectional_transition(
				div,
				slide,
				{
					.../*transition*/ ctx[5],
					duration: /*transition*/ ctx[5] === false
					? 0
					: /*transition*/ ctx[5].duration
				},
				false
			);

			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[15](null);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function create_fragment$i(ctx) {
	let button;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isOpen*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const text_slot_template = /*#slots*/ ctx[10].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[9], get_text_slot_context);
	const text_slot_or_fallback = text_slot || fallback_block$7(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[8]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	let if_block1 = /*isOpen*/ ctx[0] && create_if_block$5(ctx);

	return {
		c() {
			button = element("button");
			if_block0.c();
			t0 = space();
			if (text_slot_or_fallback) text_slot_or_fallback.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[4]);
			toggle_class(button, "svelte-187bdaq", true);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			append(button, t0);

			if (text_slot_or_fallback) {
				text_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[13](button);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[12]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "click", stop_propagation(/*click_handler_2*/ ctx[14]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(button, t0);
			}

			if (text_slot) {
				if (text_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						text_slot,
						text_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(text_slot_template, /*$$scope*/ ctx[9], dirty, get_text_slot_changes),
						get_text_slot_context
					);
				}
			} else {
				if (text_slot_or_fallback && text_slot_or_fallback.p && (!current || dirty & /*text*/ 16)) {
					text_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isOpen*/ ctx[0]);
			toggle_class(button, "action-text", /*text*/ ctx[4]);
			toggle_class(button, "svelte-187bdaq", true);

			if (/*isOpen*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*isOpen*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(text_slot_or_fallback, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(text_slot_or_fallback, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if_blocks[current_block_type_index].d();
			if (text_slot_or_fallback) text_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[13](null);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$i($$self, $$props, $$invalidate) {
	const omit_props_names = ["isOpen","icon","closeIcon","text","ref","transition"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isOpen = false } = $$props;
	let { icon = Switcher$1 } = $$props;
	let { closeIcon = Close$1 } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;
	let { transition = { duration: 200 } } = $$props;
	const dispatch = createEventDispatcher();
	let refPanel = null;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (isOpen && !ref.contains(target) && !refPanel.contains(target)) {
			$$invalidate(0, isOpen = false);
			dispatch('close');
		}
	};

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_2 = () => {
		$$invalidate(0, isOpen = !isOpen);
		dispatch(isOpen ? 'open' : 'close');
	};

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refPanel = $$value;
			$$invalidate(6, refPanel);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('closeIcon' in $$new_props) $$invalidate(3, closeIcon = $$new_props.closeIcon);
		if ('text' in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('transition' in $$new_props) $$invalidate(5, transition = $$new_props.transition);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	return [
		isOpen,
		ref,
		icon,
		closeIcon,
		text,
		transition,
		refPanel,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		button_binding,
		click_handler_2,
		div_binding
	];
}

class HeaderAction extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$i,
			create_fragment$i,
			safe_not_equal,
			{
				isOpen: 0,
				icon: 2,
				closeIcon: 3,
				text: 4,
				ref: 1,
				transition: 5
			},
			add_css$3
		);
	}
}

var HeaderAction$1 = HeaderAction;

/* src/UIShell/HeaderActionLink.svelte generated by Svelte v3.49.0 */

function add_css$2(target) {
	append_styles(target, "svelte-smaelc", ".bx--header__action.svelte-smaelc{display:flex;align-items:center;justify-content:center;padding-bottom:2px}");
}

const get_icon_slot_changes$2 = dirty => ({});
const get_icon_slot_context$2 = ctx => ({});

// (29:20)      
function fallback_block$6(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return { props: { size: 20 } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$h(ctx) {
	let a;
	let a_rel_value;
	let current;
	const icon_slot_template = /*#slots*/ ctx[6].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[5], get_icon_slot_context$2);
	const icon_slot_or_fallback = icon_slot || fallback_block$6(ctx);

	let a_levels = [
		{ href: /*href*/ ctx[2] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[4].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		/*$$restProps*/ ctx[4]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__action", true);
			toggle_class(a, "bx--header__action--active", /*linkIsActive*/ ctx[1]);
			toggle_class(a, "svelte-smaelc", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(a, null);
			}

			/*a_binding*/ ctx[7](a);
			current = true;
		},
		p(ctx, [dirty]) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[5], dirty, get_icon_slot_changes$2),
						get_icon_slot_context$2
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 8)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				(!current || dirty & /*$$restProps*/ 16 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[4].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(a, "bx--header__action", true);
			toggle_class(a, "bx--header__action--active", /*linkIsActive*/ ctx[1]);
			toggle_class(a, "svelte-smaelc", true);
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[7](null);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	const omit_props_names = ["linkIsActive","href","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { linkIsActive = false } = $$props;
	let { href = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('linkIsActive' in $$new_props) $$invalidate(1, linkIsActive = $$new_props.linkIsActive);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [ref, linkIsActive, href, icon, $$restProps, $$scope, slots, a_binding];
}

class HeaderActionLink extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$h,
			create_fragment$h,
			safe_not_equal,
			{
				linkIsActive: 1,
				href: 2,
				icon: 3,
				ref: 0
			},
			add_css$2
		);
	}
}

var HeaderActionLink$1 = HeaderActionLink;

/* src/UIShell/HeaderNav.svelte generated by Svelte v3.49.0 */

function create_fragment$g(ctx) {
	let nav;
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);
	let ul_levels = [/*props*/ ctx[0], { role: "menubar" }];
	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	let nav_levels = [/*props*/ ctx[0], /*$$restProps*/ ctx[1]];
	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "bx--header__menu-bar", true);
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--header__nav", true);
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[2],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [dirty & /*props*/ 1 && /*props*/ ctx[0], { role: "menubar" }]));
			toggle_class(ul, "bx--header__menu-bar", true);

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				dirty & /*props*/ 1 && /*props*/ ctx[0],
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));

			toggle_class(nav, "bx--header__nav", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let props;
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(4, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		$$invalidate(0, props = {
			"aria-label": $$props["aria-label"],
			"aria-labelledby": $$props["aria-labelledby"]
		});
	};

	$$props = exclude_internal_props($$props);
	return [props, $$restProps, $$scope, slots];
}

class HeaderNav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});
	}
}

var HeaderNav$1 = HeaderNav;

/* src/UIShell/HeaderNavItem.svelte generated by Svelte v3.49.0 */

function create_fragment$f(ctx) {
	let li;
	let a;
	let span;
	let t;
	let a_rel_value;
	let a_aria_current_value;
	let mounted;
	let dispose;

	let a_levels = [
		{ role: "menuitem" },
		{ tabindex: "0" },
		{ href: /*href*/ ctx[1] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[7].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[3] ? 'page' : undefined
		},
		/*$$restProps*/ ctx[7]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			span = element("span");
			t = text(/*text*/ ctx[2]);
			toggle_class(span, "bx--text-truncate--end", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__menu-item", true);
			attr(li, "role", "none");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, span);
			append(span, t);
			/*a_binding*/ ctx[16](a);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[8]),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[9]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[10]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[11]),
					listen(a, "keyup", /*keyup_handler*/ ctx[12]),
					listen(a, "keydown", /*keydown_handler*/ ctx[13]),
					listen(a, "focus", /*focus_handler*/ ctx[14]),
					listen(a, "blur", /*blur_handler*/ ctx[15]),
					listen(a, "blur", /*blur_handler_1*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*text*/ 4) set_data(t, /*text*/ ctx[2]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				{ role: "menuitem" },
				{ tabindex: "0" },
				dirty & /*href*/ 2 && { href: /*href*/ ctx[1] },
				dirty & /*$$restProps*/ 128 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[7].target === '_blank'
				? 'noopener noreferrer'
				: undefined) && { rel: a_rel_value },
				dirty & /*isSelected*/ 8 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[3] ? 'page' : undefined) && { "aria-current": a_aria_current_value },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(a, "bx--header__menu-item", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
			/*a_binding*/ ctx[16](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","text","isSelected","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { isSelected = false } = $$props;
	let { ref = null } = $$props;
	const id = "ccs-" + Math.random().toString(36);
	const ctx = getContext("HeaderNavMenu");
	let selectedItemIds = [];

	const unsubSelectedItems = ctx?.selectedItems.subscribe(_selectedItems => {
		$$invalidate(4, selectedItemIds = Object.keys(_selectedItems));
	});

	onMount(() => {
		return () => {
			if (unsubSelectedItems) unsubSelectedItems();
		};
	});

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	const blur_handler_1 = () => {
		if (selectedItemIds.indexOf(id) === selectedItemIds.length - 1) {
			ctx?.closeMenu();
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('isSelected' in $$new_props) $$invalidate(3, isSelected = $$new_props.isSelected);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isSelected*/ 8) {
			ctx?.updateSelectedItems({ id, isSelected });
		}
	};

	return [
		ref,
		href,
		text,
		isSelected,
		selectedItemIds,
		id,
		ctx,
		$$restProps,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		keydown_handler,
		focus_handler,
		blur_handler,
		a_binding,
		blur_handler_1
	];
}

class HeaderNavItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { href: 1, text: 2, isSelected: 3, ref: 0 });
	}
}

var HeaderNavItem$1 = HeaderNavItem;

/* src/UIShell/HeaderNavMenu.svelte generated by Svelte v3.49.0 */

function create_fragment$e(ctx) {
	let li;
	let a;
	let t0;
	let t1;
	let chevrondown;
	let a_style_value;
	let t2;
	let ul;
	let current;
	let mounted;
	let dispose;

	chevrondown = new ChevronDown$1({
			props: { class: "bx--header__menu-arrow" }
		});

	let a_levels = [
		{ role: "menuitem" },
		{ tabindex: "0" },
		{ "aria-haspopup": "menu" },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		{ "aria-label": /*text*/ ctx[3] },
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[7],
		{
			style: a_style_value = "" + (/*$$restProps*/ ctx[7].style + "; z-index: 1")
		}
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(/*text*/ ctx[3]);
			t1 = space();
			create_component(chevrondown.$$.fragment);
			t2 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--header__menu-item", true);
			toggle_class(a, "bx--header__menu-title", true);
			attr(ul, "role", "menu");
			attr(ul, "aria-label", /*text*/ ctx[3]);
			toggle_class(ul, "bx--header__menu", true);
			attr(li, "role", "none");
			toggle_class(li, "bx--header__submenu", true);
			toggle_class(li, "bx--header__submenu--current", /*isCurrentSubmenu*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			mount_component(chevrondown, a, null);
			/*a_binding*/ ctx[20](a);
			append(li, t2);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[22](ul);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*click_handler_1*/ ctx[19]),
					listen(a, "keydown", /*keydown_handler*/ ctx[11]),
					listen(a, "keydown", /*keydown_handler_1*/ ctx[21]),
					listen(a, "click", prevent_default(/*click_handler*/ ctx[12])),
					listen(a, "mouseover", /*mouseover_handler*/ ctx[13]),
					listen(a, "mouseenter", /*mouseenter_handler*/ ctx[14]),
					listen(a, "mouseleave", /*mouseleave_handler*/ ctx[15]),
					listen(a, "keyup", /*keyup_handler*/ ctx[16]),
					listen(a, "focus", /*focus_handler*/ ctx[17]),
					listen(a, "blur", /*blur_handler*/ ctx[18]),
					listen(li, "click", /*click_handler_2*/ ctx[23]),
					listen(li, "keydown", /*keydown_handler_2*/ ctx[24])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*text*/ 8) set_data(t0, /*text*/ ctx[3]);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				{ role: "menuitem" },
				{ tabindex: "0" },
				{ "aria-haspopup": "menu" },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				(!current || dirty & /*text*/ 8) && { "aria-label": /*text*/ ctx[3] },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7],
				(!current || dirty & /*$$restProps*/ 128 && a_style_value !== (a_style_value = "" + (/*$$restProps*/ ctx[7].style + "; z-index: 1"))) && { style: a_style_value }
			]));

			toggle_class(a, "bx--header__menu-item", true);
			toggle_class(a, "bx--header__menu-title", true);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*text*/ 8) {
				attr(ul, "aria-label", /*text*/ ctx[3]);
			}

			if (dirty & /*isCurrentSubmenu*/ 32) {
				toggle_class(li, "bx--header__submenu--current", /*isCurrentSubmenu*/ ctx[5]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(chevrondown.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(chevrondown.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(chevrondown);
			/*a_binding*/ ctx[20](null);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let isCurrentSubmenu;
	const omit_props_names = ["expanded","href","text","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $selectedItems;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { expanded = false } = $$props;
	let { href = "/" } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;
	const selectedItems = writable({});
	component_subscribe($$self, selectedItems, value => $$invalidate(8, $selectedItems = value));
	let menuRef = null;

	setContext("HeaderNavMenu", {
		selectedItems,
		updateSelectedItems(item) {
			selectedItems.update(_items => ({ ..._items, [item.id]: item.isSelected }));
		},
		closeMenu() {
			$$invalidate(0, expanded = false);
		}
	});

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseover_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseenter_handler(event) {
		bubble.call(this, $$self, event);
	}

	function mouseleave_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keyup_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = ({ target }) => {
		if (!ref.contains(target)) {
			$$invalidate(0, expanded = false);
		}
	};

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const keydown_handler_1 = e => {
		if (e.key === ' ') e.preventDefault();

		if (e.key === 'Enter' || e.key === ' ') {
			$$invalidate(0, expanded = !expanded);
		}
	};

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menuRef = $$value;
			$$invalidate(4, menuRef);
		});
	}

	const click_handler_2 = e => {
		if (!menuRef.contains(e.target)) {
			e.preventDefault();
		}

		$$invalidate(0, expanded = !expanded);
	};

	const keydown_handler_2 = e => {
		if (e.key === 'Enter') {
			e.stopPropagation();
			$$invalidate(0, expanded = !expanded);
		}
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selectedItems*/ 256) {
			$$invalidate(5, isCurrentSubmenu = Object.values($selectedItems).filter(Boolean).length > 0);
		}
	};

	return [
		expanded,
		ref,
		href,
		text,
		menuRef,
		isCurrentSubmenu,
		selectedItems,
		$$restProps,
		$selectedItems,
		$$scope,
		slots,
		keydown_handler,
		click_handler,
		mouseover_handler,
		mouseenter_handler,
		mouseleave_handler,
		keyup_handler,
		focus_handler,
		blur_handler,
		click_handler_1,
		a_binding,
		keydown_handler_1,
		ul_binding,
		click_handler_2,
		keydown_handler_2
	];
}

class HeaderNavMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { expanded: 0, href: 2, text: 3, ref: 1 });
	}
}

var HeaderNavMenu$1 = HeaderNavMenu;

/* src/UIShell/HeaderPanelDivider.svelte generated by Svelte v3.49.0 */

function add_css$1(target) {
	append_styles(target, "svelte-1tbdbmc", "li.svelte-1tbdbmc{margin:2rem 1rem 0;color:#525252}span.svelte-1tbdbmc{font-size:0.75rem;line-height:1.3;letter-spacing:0.02rem;color:#c6c6c6}");
}

// (1:0) {#if $$slots.default}
function create_if_block$4(ctx) {
	let li;
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	return {
		c() {
			li = element("li");
			span = element("span");
			if (default_slot) default_slot.c();
			attr(span, "class", "svelte-1tbdbmc");
			attr(li, "class", "svelte-1tbdbmc");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$d(ctx) {
	let t;
	let hr;
	let current;
	let if_block = /*$$slots*/ ctx[0].default && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			hr = element("hr");
			toggle_class(hr, "bx--switcher__item--divider", true);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, hr, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[0].default) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(hr);
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [$$slots, $$scope, slots];
}

class HeaderPanelDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, {}, add_css$1);
	}
}

var HeaderPanelDivider$1 = HeaderPanelDivider;

/* src/UIShell/HeaderPanelLink.svelte generated by Svelte v3.49.0 */

function create_fragment$c(ctx) {
	let li;
	let a;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let a_levels = [
		{ href: /*href*/ ctx[1] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot) default_slot.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--switcher__item-link", true);
			toggle_class(li, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot) {
				default_slot.m(a, null);
			}

			/*a_binding*/ ctx[6](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
				(!current || dirty & /*$$restProps*/ 4 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[2].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--switcher__item-link", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot) default_slot.d(detaching);
			/*a_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [ref, href, $$restProps, $$scope, slots, click_handler, a_binding];
}

class HeaderPanelLink extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$c, create_fragment$c, safe_not_equal, { href: 1, ref: 0 });
	}
}

var HeaderPanelLink$1 = HeaderPanelLink;

/* src/UIShell/HeaderPanelLinks.svelte generated by Svelte v3.49.0 */

function create_fragment$b(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--switcher__item", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderPanelLinks extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});
	}
}

var HeaderPanelLinks$1 = HeaderPanelLinks;

/* src/UIShell/HeaderUtilities.svelte generated by Svelte v3.49.0 */

function create_fragment$a(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			toggle_class(div, "bx--header__global", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class HeaderUtilities extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});
	}
}

var HeaderUtilities$1 = HeaderUtilities;

/* src/UIShell/SideNav.svelte generated by Svelte v3.49.0 */

function create_if_block$3(ctx) {
	let div;
	let div_style_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "style", div_style_value = /*isOpen*/ ctx[0] && 'z-index: 6000');
			toggle_class(div, "bx--side-nav__overlay", true);
			toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*isOpen*/ 1 && div_style_value !== (div_style_value = /*isOpen*/ ctx[0] && 'z-index: 6000')) {
				attr(div, "style", div_style_value);
			}

			if (dirty & /*isOpen*/ 1) {
				toggle_class(div, "bx--side-nav__overlay-active", /*isOpen*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$9(ctx) {
	let t;
	let nav;
	let nav_aria_hidden_value;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[10]);
	let if_block = !/*fixed*/ ctx[1] && create_if_block$3(ctx);
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	let nav_levels = [
		{
			"aria-hidden": nav_aria_hidden_value = !/*isOpen*/ ctx[0]
		},
		{ "aria-label": /*ariaLabel*/ ctx[3] },
		/*$$restProps*/ ctx[7]
	];

	let nav_data = {};

	for (let i = 0; i < nav_levels.length; i += 1) {
		nav_data = assign(nav_data, nav_levels[i]);
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			nav = element("nav");
			if (default_slot) default_slot.c();
			set_attributes(nav, nav_data);
			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);

			toggle_class(nav, "bx--side-nav--expanded", /*rail*/ ctx[2] && /*winWidth*/ ctx[5] >= /*expansionBreakpoint*/ ctx[4]
			? false
			: /*isOpen*/ ctx[0]);

			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0] && !/*rail*/ ctx[2]);
			toggle_class(nav, "bx--side-nav--rail", /*rail*/ ctx[2]);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, nav, anchor);

			if (default_slot) {
				default_slot.m(nav, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(window, "resize", /*onwindowresize*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!/*fixed*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
				(!current || dirty & /*isOpen*/ 1 && nav_aria_hidden_value !== (nav_aria_hidden_value = !/*isOpen*/ ctx[0])) && { "aria-hidden": nav_aria_hidden_value },
				(!current || dirty & /*ariaLabel*/ 8) && { "aria-label": /*ariaLabel*/ ctx[3] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(nav, "bx--side-nav__navigation", true);
			toggle_class(nav, "bx--side-nav", true);
			toggle_class(nav, "bx--side-nav--ux", true);

			toggle_class(nav, "bx--side-nav--expanded", /*rail*/ ctx[2] && /*winWidth*/ ctx[5] >= /*expansionBreakpoint*/ ctx[4]
			? false
			: /*isOpen*/ ctx[0]);

			toggle_class(nav, "bx--side-nav--collapsed", !/*isOpen*/ ctx[0] && !/*rail*/ ctx[2]);
			toggle_class(nav, "bx--side-nav--rail", /*rail*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(nav);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	const omit_props_names = ["fixed","rail","ariaLabel","isOpen","expansionBreakpoint"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $isSideNavCollapsed;
	component_subscribe($$self, isSideNavCollapsed, $$value => $$invalidate(12, $isSideNavCollapsed = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { fixed = false } = $$props;
	let { rail = false } = $$props;
	let { ariaLabel = undefined } = $$props;
	let { isOpen = false } = $$props;
	let { expansionBreakpoint = 1056 } = $$props;
	const dispatch = createEventDispatcher();
	let winWidth = undefined;

	onMount(() => {
		shouldRenderHamburgerMenu.set(true);
		return () => shouldRenderHamburgerMenu.set(false);
	});

	function onwindowresize() {
		$$invalidate(5, winWidth = window.innerWidth);
	}

	const click_handler = () => {
		dispatch('click:overlay');
		$$invalidate(0, isOpen = false);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('fixed' in $$new_props) $$invalidate(1, fixed = $$new_props.fixed);
		if ('rail' in $$new_props) $$invalidate(2, rail = $$new_props.rail);
		if ('ariaLabel' in $$new_props) $$invalidate(3, ariaLabel = $$new_props.ariaLabel);
		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
		if ('expansionBreakpoint' in $$new_props) $$invalidate(4, expansionBreakpoint = $$new_props.expansionBreakpoint);
		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*isOpen*/ 1) {
			dispatch(isOpen ? "open" : "close");
		}

		if ($$self.$$.dirty & /*isOpen*/ 1) {
			set_store_value(isSideNavCollapsed, $isSideNavCollapsed = !isOpen, $isSideNavCollapsed);
		}
	};

	return [
		isOpen,
		fixed,
		rail,
		ariaLabel,
		expansionBreakpoint,
		winWidth,
		dispatch,
		$$restProps,
		$$scope,
		slots,
		onwindowresize,
		click_handler
	];
}

class SideNav extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
			fixed: 1,
			rail: 2,
			ariaLabel: 3,
			isOpen: 0,
			expansionBreakpoint: 4
		});
	}
}

var SideNav$1 = SideNav;

/* src/UIShell/SideNavItems.svelte generated by Svelte v3.49.0 */

function create_fragment$8(ctx) {
	let ul;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(ul, "bx--side-nav__items", true);
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class SideNavItems extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});
	}
}

var SideNavItems$1 = SideNavItems;

/* src/UIShell/SideNavLink.svelte generated by Svelte v3.49.0 */

const get_icon_slot_changes$1 = dirty => ({});
const get_icon_slot_context$1 = ctx => ({});

// (38:4) {#if $$slots.icon || icon}
function create_if_block$2(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[8].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[7], get_icon_slot_context$1);
	const icon_slot_or_fallback = icon_slot || fallback_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--side-nav__icon", true);
			toggle_class(div, "bx--side-nav__icon--small", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[7], dirty, get_icon_slot_changes$1),
						get_icon_slot_context$1
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 16)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (43:26)            
function fallback_block_1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[4];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[4])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (49:12)          
function fallback_block$5(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 8) set_data(t, /*text*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$7(ctx) {
	let li;
	let a;
	let t;
	let span;
	let a_aria_current_value;
	let a_rel_value;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*$$slots*/ ctx[6].icon || /*icon*/ ctx[4]) && create_if_block$2(ctx);
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);
	const default_slot_or_fallback = default_slot || fallback_block$5(ctx);

	let a_levels = [
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined
		},
		{ href: /*href*/ ctx[2] },
		{
			rel: a_rel_value = /*$$restProps*/ ctx[5].target === '_blank'
			? 'noopener noreferrer'
			: undefined
		},
		/*$$restProps*/ ctx[5]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (if_block) if_block.c();
			t = space();
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--side-nav__link-text", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
			toggle_class(li, "bx--side-nav__item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			if (if_block) if_block.m(a, null);
			append(a, t);
			append(a, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			/*a_binding*/ ctx[10](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[9]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[6].icon || /*icon*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots, icon*/ 80) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(a, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 8)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*isSelected*/ 2 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined)) && { "aria-current": a_aria_current_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				(!current || dirty & /*$$restProps*/ 32 && a_rel_value !== (a_rel_value = /*$$restProps*/ ctx[5].target === '_blank'
				? 'noopener noreferrer'
				: undefined)) && { rel: a_rel_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(a, "bx--side-nav__link--current", /*isSelected*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (if_block) if_block.d();
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	const omit_props_names = ["isSelected","href","text","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { isSelected = false } = $$props;
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isSelected' in $$new_props) $$invalidate(1, isSelected = $$new_props.isSelected);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('icon' in $$new_props) $$invalidate(4, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		isSelected,
		href,
		text,
		icon,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler,
		a_binding
	];
}

class SideNavLink extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
			isSelected: 1,
			href: 2,
			text: 3,
			icon: 4,
			ref: 0
		});
	}
}

var SideNavLink$1 = SideNavLink;

/* src/UIShell/SideNavMenu.svelte generated by Svelte v3.49.0 */
const get_icon_slot_changes = dirty => ({});
const get_icon_slot_context = ctx => ({});

// (35:4) {#if $$slots.icon || icon}
function create_if_block$1(ctx) {
	let div;
	let current;
	const icon_slot_template = /*#slots*/ ctx[7].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[6], get_icon_slot_context);
	const icon_slot_or_fallback = icon_slot || fallback_block$4(ctx);

	return {
		c() {
			div = element("div");
			if (icon_slot_or_fallback) icon_slot_or_fallback.c();
			toggle_class(div, "bx--side-nav__icon", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (icon_slot_or_fallback) {
				icon_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[6], dirty, get_icon_slot_changes),
						get_icon_slot_context
					);
				}
			} else {
				if (icon_slot_or_fallback && icon_slot_or_fallback.p && (!current || dirty & /*icon*/ 8)) {
					icon_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(icon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (icon_slot_or_fallback) icon_slot_or_fallback.d(detaching);
		}
	};
}

// (37:26)            
function fallback_block$4(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[3];

	function switch_props(ctx) {
		return {};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[3])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$6(ctx) {
	let li;
	let button;
	let t0;
	let span;
	let t1;
	let t2;
	let div;
	let chevrondown;
	let t3;
	let ul;
	let ul_style_value;
	let current;
	let mounted;
	let dispose;
	let if_block = (/*$$slots*/ ctx[5].icon || /*icon*/ ctx[3]) && create_if_block$1(ctx);
	chevrondown = new ChevronDown$1({});

	let button_levels = [
		{ type: "button" },
		{ "aria-expanded": /*expanded*/ ctx[0] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			li = element("li");
			button = element("button");
			if (if_block) if_block.c();
			t0 = space();
			span = element("span");
			t1 = text(/*text*/ ctx[2]);
			t2 = space();
			div = element("div");
			create_component(chevrondown.$$.fragment);
			t3 = space();
			ul = element("ul");
			if (default_slot) default_slot.c();
			toggle_class(span, "bx--side-nav__submenu-title", true);
			toggle_class(div, "bx--side-nav__icon", true);
			toggle_class(div, "bx--side-nav__icon--small", true);
			toggle_class(div, "bx--side-nav__submenu-chevron", true);
			set_attributes(button, button_data);
			toggle_class(button, "bx--side-nav__submenu", true);
			attr(ul, "role", "menu");
			attr(ul, "style", ul_style_value = /*expanded*/ ctx[0] && 'max-height: none');
			toggle_class(ul, "bx--side-nav__menu", true);
			toggle_class(li, "bx--side-nav__item", true);
			toggle_class(li, "bx--side-nav__item--icon", /*icon*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, button);
			if (if_block) if_block.m(button, null);
			append(button, t0);
			append(button, span);
			append(span, t1);
			append(button, t2);
			append(button, div);
			mount_component(chevrondown, div, null);
			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[9](button);
			append(li, t3);
			append(li, ul);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(button, "click", /*click_handler*/ ctx[8]),
					listen(button, "click", /*click_handler_1*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*$$slots*/ ctx[5].icon || /*icon*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots, icon*/ 40) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*text*/ 4) set_data(t1, /*text*/ ctx[2]);

			set_attributes(button, button_data = get_spread_update(button_levels, [
				{ type: "button" },
				(!current || dirty & /*expanded*/ 1) && { "aria-expanded": /*expanded*/ ctx[0] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "bx--side-nav__submenu", true);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*expanded*/ 1 && ul_style_value !== (ul_style_value = /*expanded*/ ctx[0] && 'max-height: none')) {
				attr(ul, "style", ul_style_value);
			}

			if (dirty & /*icon*/ 8) {
				toggle_class(li, "bx--side-nav__item--icon", /*icon*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(chevrondown.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(chevrondown.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (if_block) if_block.d();
			destroy_component(chevrondown);
			/*button_binding*/ ctx[9](null);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	const omit_props_names = ["expanded","text","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	const $$slots = compute_slots(slots);
	let { expanded = false } = $$props;
	let { text = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	const click_handler_1 = () => {
		$$invalidate(0, expanded = !expanded);
	};

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
		if ('text' in $$new_props) $$invalidate(2, text = $$new_props.text);
		if ('icon' in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	return [
		expanded,
		ref,
		text,
		icon,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		click_handler,
		button_binding,
		click_handler_1
	];
}

class SideNavMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { expanded: 0, text: 2, icon: 3, ref: 1 });
	}
}

var SideNavMenu$1 = SideNavMenu;

/* src/UIShell/SideNavMenuItem.svelte generated by Svelte v3.49.0 */

function fallback_block$3(ctx) {
	let t;

	return {
		c() {
			t = text(/*text*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*text*/ 8) set_data(t, /*text*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$5(ctx) {
	let li;
	let a;
	let span;
	let a_aria_current_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	const default_slot_or_fallback = default_slot || fallback_block$3(ctx);

	let a_levels = [
		{
			"aria-current": a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined
		},
		{ href: /*href*/ ctx[2] },
		/*$$restProps*/ ctx[4]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			span = element("span");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			toggle_class(span, "bx--side-nav__link-text", true);
			set_attributes(a, a_data);
			toggle_class(a, "bx--side-nav__link", true);
			toggle_class(li, "bx--side-nav__menu-item", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, span);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(span, null);
			}

			/*a_binding*/ ctx[8](a);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*text*/ 8)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*isSelected*/ 2 && a_aria_current_value !== (a_aria_current_value = /*isSelected*/ ctx[1] ? 'page' : undefined)) && { "aria-current": a_aria_current_value },
				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(a, "bx--side-nav__link", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*a_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	const omit_props_names = ["isSelected","href","text","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isSelected = false } = $$props;
	let { href = undefined } = $$props;
	let { text = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isSelected' in $$new_props) $$invalidate(1, isSelected = $$new_props.isSelected);
		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
		if ('text' in $$new_props) $$invalidate(3, text = $$new_props.text);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		isSelected,
		href,
		text,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		a_binding
	];
}

class SideNavMenuItem extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { isSelected: 1, href: 2, text: 3, ref: 0 });
	}
}

var SideNavMenuItem$1 = SideNavMenuItem;

/* src/UIShell/Content.svelte generated by Svelte v3.49.0 */

function create_fragment$4(ctx) {
	let main;
	let main_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let main_levels = [
		{ id: /*id*/ ctx[0] },
		/*$$restProps*/ ctx[2],
		{
			style: main_style_value = "" + ((/*$isSideNavCollapsed*/ ctx[1] && 'margin-left: 0;') + " " + /*$$restProps*/ ctx[2].style + "}")
		}
	];

	let main_data = {};

	for (let i = 0; i < main_levels.length; i += 1) {
		main_data = assign(main_data, main_levels[i]);
	}

	return {
		c() {
			main = element("main");
			if (default_slot) default_slot.c();
			set_attributes(main, main_data);
			toggle_class(main, "bx--content", true);
		},
		m(target, anchor) {
			insert(target, main, anchor);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(main, main_data = get_spread_update(main_levels, [
				(!current || dirty & /*id*/ 1) && { id: /*id*/ ctx[0] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2],
				(!current || dirty & /*$isSideNavCollapsed, $$restProps*/ 6 && main_style_value !== (main_style_value = "" + ((/*$isSideNavCollapsed*/ ctx[1] && 'margin-left: 0;') + " " + /*$$restProps*/ ctx[2].style + "}"))) && { style: main_style_value }
			]));

			toggle_class(main, "bx--content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	const omit_props_names = ["id"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $isSideNavCollapsed;
	component_subscribe($$self, isSideNavCollapsed, $$value => $$invalidate(1, $isSideNavCollapsed = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	let { id = "main-content" } = $$props;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('id' in $$new_props) $$invalidate(0, id = $$new_props.id);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [id, $isSideNavCollapsed, $$restProps, $$scope, slots];
}

class Content extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { id: 0 });
	}
}

var Content$1 = Content;

/* src/UIShell/SkipToContent.svelte generated by Svelte v3.49.0 */

function fallback_block$2(ctx) {
	let t;

	return {
		c() {
			t = text("Skip to main content");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$3(ctx) {
	let a;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const default_slot_or_fallback = default_slot || fallback_block$2();

	let a_levels = [
		{ href: /*href*/ ctx[0] },
		{ tabindex: /*tabindex*/ ctx[1] },
		/*$$restProps*/ ctx[2]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(a, a_data);
			toggle_class(a, "bx--skip-to-content", true);
		},
		m(target, anchor) {
			insert(target, a, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(a, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
				(!current || dirty & /*tabindex*/ 2) && { tabindex: /*tabindex*/ ctx[1] },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(a, "bx--skip-to-content", true);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","tabindex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { href = "#main-content" } = $$props;
	let { tabindex = "0" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
		if ('tabindex' in $$new_props) $$invalidate(1, tabindex = $$new_props.tabindex);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	return [href, tabindex, $$restProps, $$scope, slots, click_handler];
}

class SkipToContent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { href: 0, tabindex: 1 });
	}
}

var SkipToContent$1 = SkipToContent;

/* src/UIShell/HeaderGlobalAction.svelte generated by Svelte v3.49.0 */

function fallback_block$1(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*icon*/ ctx[2];

	function switch_props(ctx) {
		return { props: { size: 20 } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*icon*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);
	let button_levels = [{ type: "button" }, /*$$restProps*/ ctx[3]];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(button, button_data);
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*icon*/ 4)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [{ type: "button" }, dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]]));
			toggle_class(button, "bx--header__action", true);
			toggle_class(button, "bx--header__action--active", /*isActive*/ ctx[1]);
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["isActive","icon","ref"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { isActive = false } = $$props;
	let { icon = undefined } = $$props;
	let { ref = null } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(0, ref);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('isActive' in $$new_props) $$invalidate(1, isActive = $$new_props.isActive);
		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	return [
		ref,
		isActive,
		icon,
		$$restProps,
		$$scope,
		slots,
		click_handler,
		button_binding
	];
}

class HeaderGlobalAction extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { isActive: 1, icon: 2, ref: 0 });
	}
}

var HeaderGlobalAction$1 = HeaderGlobalAction;

/* src/UIShell/HeaderSearch.svelte generated by Svelte v3.49.0 */

function add_css(target) {
	append_styles(target, "svelte-qozwl4", "label.svelte-qozwl4.svelte-qozwl4{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;white-space:nowrap;border:0;visibility:inherit;clip:rect(0, 0, 0, 0)}[role=\"search\"].svelte-qozwl4.svelte-qozwl4{position:relative;display:flex;max-width:28rem;width:100%;margin-left:0.5rem;height:3rem;background-color:#393939;color:#fff;transition:max-width 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      background 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}[role=\"search\"].svelte-qozwl4.svelte-qozwl4:not(.active){max-width:3rem;background-color:#161616}[role=\"search\"].active.svelte-qozwl4.svelte-qozwl4{outline:2px solid #fff;outline-offset:-2px}[role=\"combobox\"].svelte-qozwl4.svelte-qozwl4{display:flex;flex-grow:1;border-bottom:1px solid #393939}input.svelte-qozwl4.svelte-qozwl4{width:100%;height:3rem;padding:0;font-size:1rem;font-weight:400;line-height:1.375rem;letter-spacing:0;color:#fff;caret-color:#fff;background-color:initial;border:none;outline:none;transition:opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}input.svelte-qozwl4.svelte-qozwl4:not(.active){opacity:0;pointer-events:none}button.svelte-qozwl4.svelte-qozwl4{width:3rem;height:100%;padding:0;flex-shrink:0;opacity:1;transition:background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9)}.disabled.svelte-qozwl4.svelte-qozwl4{border:none;pointer-events:none}[aria-label=\"Clear search\"].svelte-qozwl4.svelte-qozwl4:hover{background-color:#4c4c4c}.hidden.svelte-qozwl4.svelte-qozwl4{opacity:0;display:none}ul.svelte-qozwl4.svelte-qozwl4{position:absolute;z-index:10000;padding:1rem 0;left:0;right:0;top:3rem;background-color:#161616;border:1px solid #393939;border-top:none;box-shadow:0 4px 8px 0 rgba(0, 0, 0, 0.5)}[role=\"menuitem\"].svelte-qozwl4.svelte-qozwl4{padding:6px 1rem;cursor:pointer;font-size:0.875rem;font-weight:600;line-height:1.29;letter-spacing:0.16px;transition:all 70ms cubic-bezier(0.2, 0, 0.38, 0.9);display:block;text-decoration:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#c6c6c6}.selected.svelte-qozwl4.svelte-qozwl4,[role=\"menuitem\"].svelte-qozwl4.svelte-qozwl4:hover{background-color:#353535;color:#f4f4f4}[role=\"menuitem\"].svelte-qozwl4 span.svelte-qozwl4{font-size:0.75rem;font-weight:400;line-height:1.34;letter-spacing:0.32px;text-transform:lowercase;color:#c6c6c6}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

const get_default_slot_changes = dirty => ({ result: dirty & /*results*/ 16 });

const get_default_slot_context = ctx => ({
	result: /*result*/ ctx[28],
	index: /*i*/ ctx[30]
});

// (133:2) {#if active && results.length > 0}
function create_if_block(ctx) {
	let ul;
	let current;
	let each_value = /*results*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "aria-labelledby", "search-label");
			attr(ul, "role", "menu");
			attr(ul, "id", "search-menu");
			attr(ul, "class", "svelte-qozwl4");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*results, selectedId, selectedResultIndex, tick, selectResult, $$scope*/ 4692) {
				each_value = /*results*/ ctx[4];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (151:14) {#if result.description}
function create_if_block_1(ctx) {
	let span;
	let t0;
	let t1_value = /*result*/ ctx[28].description + "";
	let t1;

	return {
		c() {
			span = element("span");
			t0 = text("– ");
			t1 = text(t1_value);
			attr(span, "class", "svelte-qozwl4");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*results*/ 16 && t1_value !== (t1_value = /*result*/ ctx[28].description + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (149:48)                
function fallback_block(ctx) {
	let t0_value = /*result*/ ctx[28].text + "";
	let t0;
	let t1;
	let if_block_anchor;
	let if_block = /*result*/ ctx[28].description && create_if_block_1(ctx);

	return {
		c() {
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*results*/ 16 && t0_value !== (t0_value = /*result*/ ctx[28].text + "")) set_data(t0, t0_value);

			if (/*result*/ ctx[28].description) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (135:6) {#each results as result, i}
function create_each_block(ctx) {
	let li;
	let a;
	let a_href_value;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[26](/*i*/ ctx[30]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			t = space();
			attr(a, "tabindex", "-1");
			attr(a, "id", "search-menuitem-" + /*i*/ ctx[30]);
			attr(a, "role", "menuitem");
			attr(a, "href", a_href_value = /*result*/ ctx[28].href);
			attr(a, "class", "svelte-qozwl4");
			toggle_class(a, "selected", /*selectedId*/ ctx[6] === `search-menuitem-${/*i*/ ctx[30]}`);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(a, null);
			}

			append(li, t);
			current = true;

			if (!mounted) {
				dispose = listen(a, "click", prevent_default(click_handler_2));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope, results*/ 4112)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*results*/ 16)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			if (!current || dirty & /*results*/ 16 && a_href_value !== (a_href_value = /*result*/ ctx[28].href)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*selectedId*/ 64) {
				toggle_class(a, "selected", /*selectedId*/ ctx[6] === `search-menuitem-${/*i*/ ctx[30]}`);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$1(ctx) {
	let div1;
	let label;
	let t1;
	let div0;
	let button0;
	let iconsearch;
	let button0_tabindex_value;
	let t2;
	let input;
	let input_tabindex_value;
	let t3;
	let button1;
	let close;
	let button1_tabindex_value;
	let t4;
	let current;
	let mounted;
	let dispose;
	iconsearch = new IconSearch$1({ props: { size: 20, title: "Search" } });

	let input_levels = [
		{ type: "text" },
		{ autocomplete: "off" },
		{ placeholder: "Search..." },
		{
			tabindex: input_tabindex_value = /*active*/ ctx[0] ? '0' : '-1'
		},
		/*$$restProps*/ ctx[10],
		{ id: "search-input" },
		{
			"aria-activedescendant": /*selectedId*/ ctx[6]
		}
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	close = new Close$1({ props: { size: 20, title: "Close" } });
	let if_block = /*active*/ ctx[0] && /*results*/ ctx[4].length > 0 && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			label = element("label");
			label.textContent = "Search";
			t1 = space();
			div0 = element("div");
			button0 = element("button");
			create_component(iconsearch.$$.fragment);
			t2 = space();
			input = element("input");
			t3 = space();
			button1 = element("button");
			create_component(close.$$.fragment);
			t4 = space();
			if (if_block) if_block.c();
			attr(label, "for", "search-input");
			attr(label, "id", "search-label");
			attr(label, "class", "svelte-qozwl4");
			attr(button0, "type", "button");
			attr(button0, "aria-label", "Search");
			attr(button0, "tabindex", button0_tabindex_value = /*active*/ ctx[0] ? '-1' : '0');
			attr(button0, "class", "svelte-qozwl4");
			toggle_class(button0, "bx--header__action", true);
			toggle_class(button0, "disabled", /*active*/ ctx[0]);
			set_attributes(input, input_data);
			toggle_class(input, "active", /*active*/ ctx[0]);
			toggle_class(input, "svelte-qozwl4", true);
			attr(button1, "type", "button");
			attr(button1, "aria-label", "Clear search");
			attr(button1, "tabindex", button1_tabindex_value = /*active*/ ctx[0] ? '0' : '-1');
			attr(button1, "class", "svelte-qozwl4");
			toggle_class(button1, "bx--header__action", true);
			toggle_class(button1, "hidden", !/*active*/ ctx[0]);
			attr(div0, "role", "combobox");
			attr(div0, "aria-expanded", /*active*/ ctx[0]);
			attr(div0, "class", "svelte-qozwl4");
			attr(div1, "role", "search");
			attr(div1, "class", "svelte-qozwl4");
			toggle_class(div1, "active", /*active*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, label);
			append(div1, t1);
			append(div1, div0);
			append(div0, button0);
			mount_component(iconsearch, button0, null);
			append(div0, t2);
			append(div0, input);
			if (input.autofocus) input.focus();
			/*input_binding*/ ctx[22](input);
			set_input_value(input, /*value*/ ctx[3]);
			append(div0, t3);
			append(div0, button1);
			mount_component(close, button1, null);
			append(div1, t4);
			if (if_block) if_block.m(div1, null);
			/*div1_binding*/ ctx[27](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mouseup", /*mouseup_handler*/ ctx[20]),
					listen(button0, "click", /*click_handler*/ ctx[21]),
					listen(input, "input", /*input_input_handler*/ ctx[23]),
					listen(input, "change", /*change_handler*/ ctx[14]),
					listen(input, "input", /*input_handler*/ ctx[15]),
					listen(input, "focus", /*focus_handler*/ ctx[16]),
					listen(input, "blur", /*blur_handler*/ ctx[17]),
					listen(input, "keydown", /*keydown_handler*/ ctx[18]),
					listen(input, "keydown", /*keydown_handler_1*/ ctx[24]),
					listen(input, "paste", /*paste_handler*/ ctx[19]),
					listen(button1, "click", /*click_handler_1*/ ctx[25])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*active*/ 1 && button0_tabindex_value !== (button0_tabindex_value = /*active*/ ctx[0] ? '-1' : '0')) {
				attr(button0, "tabindex", button0_tabindex_value);
			}

			if (dirty & /*active*/ 1) {
				toggle_class(button0, "disabled", /*active*/ ctx[0]);
			}

			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "text" },
				{ autocomplete: "off" },
				{ placeholder: "Search..." },
				(!current || dirty & /*active*/ 1 && input_tabindex_value !== (input_tabindex_value = /*active*/ ctx[0] ? '0' : '-1')) && { tabindex: input_tabindex_value },
				dirty & /*$$restProps*/ 1024 && /*$$restProps*/ ctx[10],
				{ id: "search-input" },
				(!current || dirty & /*selectedId*/ 64) && {
					"aria-activedescendant": /*selectedId*/ ctx[6]
				}
			]));

			if (dirty & /*value*/ 8 && input.value !== /*value*/ ctx[3]) {
				set_input_value(input, /*value*/ ctx[3]);
			}

			toggle_class(input, "active", /*active*/ ctx[0]);
			toggle_class(input, "svelte-qozwl4", true);

			if (!current || dirty & /*active*/ 1 && button1_tabindex_value !== (button1_tabindex_value = /*active*/ ctx[0] ? '0' : '-1')) {
				attr(button1, "tabindex", button1_tabindex_value);
			}

			if (dirty & /*active*/ 1) {
				toggle_class(button1, "hidden", !/*active*/ ctx[0]);
			}

			if (!current || dirty & /*active*/ 1) {
				attr(div0, "aria-expanded", /*active*/ ctx[0]);
			}

			if (/*active*/ ctx[0] && /*results*/ ctx[4].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*active, results*/ 17) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*active*/ 1) {
				toggle_class(div1, "active", /*active*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(iconsearch.$$.fragment, local);
			transition_in(close.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(iconsearch.$$.fragment, local);
			transition_out(close.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(iconsearch);
			/*input_binding*/ ctx[22](null);
			destroy_component(close);
			if (if_block) if_block.d();
			/*div1_binding*/ ctx[27](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let selectedResult;
	let selectedId;
	const omit_props_names = ["value","active","ref","results","selectedResultIndex"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = "" } = $$props;
	let { active = false } = $$props;
	let { ref = null } = $$props;
	let { results = [] } = $$props;
	let { selectedResultIndex = 0 } = $$props;
	const dispatch = createEventDispatcher();
	let refSearch = null;

	function reset() {
		$$invalidate(0, active = false);
		$$invalidate(3, value = "");
		$$invalidate(2, selectedResultIndex = 0);
	}

	function selectResult() {
		dispatch("select", {
			value,
			selectedResultIndex,
			selectedResult
		});

		reset();
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function input_handler(event) {
		bubble.call(this, $$self, event);
	}

	function focus_handler(event) {
		bubble.call(this, $$self, event);
	}

	function blur_handler(event) {
		bubble.call(this, $$self, event);
	}

	function keydown_handler(event) {
		bubble.call(this, $$self, event);
	}

	function paste_handler(event) {
		bubble.call(this, $$self, event);
	}

	const mouseup_handler = ({ target }) => {
		if (active && !refSearch.contains(target)) $$invalidate(0, active = false);
	};

	const click_handler = () => {
		$$invalidate(0, active = true);
	};

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			ref = $$value;
			$$invalidate(1, ref);
		});
	}

	function input_input_handler() {
		value = this.value;
		$$invalidate(3, value);
	}

	const keydown_handler_1 = e => {
		switch (e.key) {
			case 'Enter':
				selectResult();
				break;
			case 'ArrowDown':
				e.preventDefault();
				if (selectedResultIndex === results.length - 1) {
					$$invalidate(2, selectedResultIndex = 0);
				} else {
					$$invalidate(2, selectedResultIndex += 1);
				}
				break;
			case 'ArrowUp':
				e.preventDefault();
				if (selectedResultIndex === 0) {
					$$invalidate(2, selectedResultIndex = results.length - 1);
				} else {
					$$invalidate(2, selectedResultIndex -= 1);
				}
				break;
		}
	};

	const click_handler_1 = () => {
		reset();
		dispatch('clear');
	};

	const click_handler_2 = async i => {
		$$invalidate(2, selectedResultIndex = i);
		await tick();
		selectResult();
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refSearch = $$value;
			$$invalidate(5, refSearch);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
		if ('results' in $$new_props) $$invalidate(4, results = $$new_props.results);
		if ('selectedResultIndex' in $$new_props) $$invalidate(2, selectedResultIndex = $$new_props.selectedResultIndex);
		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*active, ref*/ 3) {
			if (active && ref) ref.focus();
		}

		if ($$self.$$.dirty & /*active*/ 1) {
			dispatch(active ? "active" : "inactive");
		}

		if ($$self.$$.dirty & /*results, selectedResultIndex*/ 20) {
			$$invalidate(11, selectedResult = results[selectedResultIndex]);
		}

		if ($$self.$$.dirty & /*selectedResult, selectedResultIndex*/ 2052) {
			$$invalidate(6, selectedId = selectedResult
			? `search-menuitem-${selectedResultIndex}`
			: undefined);
		}
	};

	return [
		active,
		ref,
		selectedResultIndex,
		value,
		results,
		refSearch,
		selectedId,
		dispatch,
		reset,
		selectResult,
		$$restProps,
		selectedResult,
		$$scope,
		slots,
		change_handler,
		input_handler,
		focus_handler,
		blur_handler,
		keydown_handler,
		paste_handler,
		mouseup_handler,
		click_handler,
		input_binding,
		input_input_handler,
		keydown_handler_1,
		click_handler_1,
		click_handler_2,
		div1_binding
	];
}

class HeaderSearch extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				value: 3,
				active: 0,
				ref: 1,
				results: 4,
				selectedResultIndex: 2
			},
			add_css
		);
	}
}

var HeaderSearch$1 = HeaderSearch;

/* src/UIShell/SideNavDivider.svelte generated by Svelte v3.49.0 */

function create_fragment(ctx) {
	let li;
	let li_levels = [{ role: "separator" }, /*$$restProps*/ ctx[0]];
	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	return {
		c() {
			li = element("li");
			set_attributes(li, li_data);
			toggle_class(li, "bx--side-nav__divider", true);
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		p(ctx, [dirty]) {
			set_attributes(li, li_data = get_spread_update(li_levels, [{ role: "separator" }, dirty & /*$$restProps*/ 1 && /*$$restProps*/ ctx[0]]));
			toggle_class(li, "bx--side-nav__divider", true);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [];
	let $$restProps = compute_rest_props($$props, omit_props_names);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(0, $$restProps = compute_rest_props($$props, omit_props_names));
	};

	return [$$restProps];
}

class SideNavDivider extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

var SideNavDivider$1 = SideNavDivider;

function rangePlugin(config = {}) {
    return function (fp) {
        let dateFormat = "", secondInput, _secondInputFocused, _prevDates;
        const createSecondInput = () => {
            if (config.input) {
                secondInput =
                    config.input instanceof Element
                        ? config.input
                        : window.document.querySelector(config.input);
                if (!secondInput) {
                    fp.config.errorHandler(new Error("Invalid input element specified"));
                    return;
                }
                if (fp.config.wrap) {
                    secondInput = secondInput.querySelector("[data-input]");
                }
            }
            else {
                secondInput = fp._input.cloneNode();
                secondInput.removeAttribute("id");
                secondInput._flatpickr = undefined;
            }
            if (secondInput.value) {
                const parsedDate = fp.parseDate(secondInput.value);
                if (parsedDate)
                    fp.selectedDates.push(parsedDate);
            }
            secondInput.setAttribute("data-fp-omit", "");
            if (fp.config.clickOpens) {
                fp._bind(secondInput, ["focus", "click"], () => {
                    if (fp.selectedDates[1]) {
                        fp.latestSelectedDateObj = fp.selectedDates[1];
                        fp._setHoursFromDate(fp.selectedDates[1]);
                        fp.jumpToDate(fp.selectedDates[1]);
                    }
                    _secondInputFocused = true;
                    fp.isOpen = false;
                    fp.open(undefined, config.position === "left" ? fp._input : secondInput);
                });
                fp._bind(fp._input, ["focus", "click"], (e) => {
                    e.preventDefault();
                    fp.isOpen = false;
                    fp.open();
                });
            }
            if (fp.config.allowInput)
                fp._bind(secondInput, "keydown", (e) => {
                    if (e.key === "Enter") {
                        fp.setDate([fp.selectedDates[0], secondInput.value], true, dateFormat);
                        secondInput.click();
                    }
                });
            if (!config.input)
                fp._input.parentNode &&
                    fp._input.parentNode.insertBefore(secondInput, fp._input.nextSibling);
        };
        const plugin = {
            onParseConfig() {
                fp.config.mode = "range";
                dateFormat = fp.config.altInput
                    ? fp.config.altFormat
                    : fp.config.dateFormat;
            },
            onReady() {
                createSecondInput();
                fp.config.ignoredFocusElements.push(secondInput);
                if (fp.config.allowInput) {
                    fp._input.removeAttribute("readonly");
                    secondInput.removeAttribute("readonly");
                }
                else {
                    secondInput.setAttribute("readonly", "readonly");
                }
                fp._bind(fp._input, "focus", () => {
                    fp.latestSelectedDateObj = fp.selectedDates[0];
                    fp._setHoursFromDate(fp.selectedDates[0]);
                    _secondInputFocused = false;
                    fp.jumpToDate(fp.selectedDates[0]);
                });
                if (fp.config.allowInput)
                    fp._bind(fp._input, "keydown", (e) => {
                        if (e.key === "Enter")
                            fp.setDate([fp._input.value, fp.selectedDates[1]], true, dateFormat);
                    });
                fp.setDate(fp.selectedDates, false);
                plugin.onValueUpdate(fp.selectedDates);
                fp.loadedPlugins.push("range");
            },
            onPreCalendarPosition() {
                if (_secondInputFocused) {
                    fp._positionElement = secondInput;
                    setTimeout(() => {
                        fp._positionElement = fp._input;
                    }, 0);
                }
            },
            onChange() {
                if (!fp.selectedDates.length) {
                    setTimeout(() => {
                        if (fp.selectedDates.length)
                            return;
                        secondInput.value = "";
                        _prevDates = [];
                    }, 10);
                }
                if (_secondInputFocused) {
                    setTimeout(() => {
                        secondInput.focus();
                    }, 0);
                }
            },
            onDestroy() {
                if (!config.input)
                    secondInput.parentNode &&
                        secondInput.parentNode.removeChild(secondInput);
            },
            onValueUpdate(selDates) {
                if (!secondInput)
                    return;
                _prevDates =
                    !_prevDates || selDates.length >= _prevDates.length
                        ? [...selDates]
                        : _prevDates;
                if (_prevDates.length > selDates.length) {
                    const newSelectedDate = selDates[0];
                    const newDates = _secondInputFocused
                        ? [_prevDates[0], newSelectedDate]
                        : [newSelectedDate, _prevDates[1]];
                    fp.setDate(newDates, false);
                    _prevDates = [...newDates];
                }
                [
                    fp._input.value = "",
                    secondInput.value = "",
                ] = fp.selectedDates.map((d) => fp.formatDate(d, dateFormat));
            },
        };
        return plugin;
    };
}

var rangePlugin$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': rangePlugin
});

export { Accordion$1 as Accordion, AccordionItem$1 as AccordionItem, AccordionSkeleton$1 as AccordionSkeleton, AspectRatio$1 as AspectRatio, Breadcrumb$1 as Breadcrumb, BreadcrumbItem$1 as BreadcrumbItem, BreadcrumbSkeleton$1 as BreadcrumbSkeleton, Breakpoint$1 as Breakpoint, Button$1 as Button, ButtonSet$1 as ButtonSet, ButtonSkeleton$1 as ButtonSkeleton, Checkbox$1 as Checkbox, CheckboxSkeleton$1 as CheckboxSkeleton, ClickableTile$1 as ClickableTile, CodeSnippet$1 as CodeSnippet, CodeSnippetSkeleton$1 as CodeSnippetSkeleton, Column$1 as Column, ComboBox$1 as ComboBox, ComposedModal$1 as ComposedModal, Content$1 as Content, ContentSwitcher$1 as ContentSwitcher, ContextMenu$1 as ContextMenu, ContextMenuDivider$1 as ContextMenuDivider, ContextMenuGroup$1 as ContextMenuGroup, ContextMenuOption$1 as ContextMenuOption, ContextMenuRadioGroup$1 as ContextMenuRadioGroup, CopyButton$1 as CopyButton, DataTable$1 as DataTable, DataTableSkeleton$1 as DataTableSkeleton, DatePicker$1 as DatePicker, DatePickerInput$1 as DatePickerInput, DatePickerSkeleton$1 as DatePickerSkeleton, Dropdown$1 as Dropdown, DropdownSkeleton$1 as DropdownSkeleton, ExpandableTile$1 as ExpandableTile, FileUploader$1 as FileUploader, FileUploaderButton$1 as FileUploaderButton, FileUploaderDropContainer$1 as FileUploaderDropContainer, FileUploaderItem$1 as FileUploaderItem, FileUploaderSkeleton$1 as FileUploaderSkeleton, Filename$1 as Filename, FluidForm$1 as FluidForm, Form$1 as Form, FormGroup$1 as FormGroup, FormItem$1 as FormItem, FormLabel$1 as FormLabel, Grid$1 as Grid, Header$1 as Header, HeaderAction$1 as HeaderAction, HeaderActionLink$1 as HeaderActionLink, HeaderGlobalAction$1 as HeaderGlobalAction, HeaderNav$1 as HeaderNav, HeaderNavItem$1 as HeaderNavItem, HeaderNavMenu$1 as HeaderNavMenu, HeaderPanelDivider$1 as HeaderPanelDivider, HeaderPanelLink$1 as HeaderPanelLink, HeaderPanelLinks$1 as HeaderPanelLinks, HeaderSearch$1 as HeaderSearch, HeaderUtilities$1 as HeaderUtilities, ImageLoader$1 as ImageLoader, InlineLoading$1 as InlineLoading, InlineNotification$1 as InlineNotification, Link$1 as Link, ListBox$1 as ListBox, ListBoxField$1 as ListBoxField, ListBoxMenu$1 as ListBoxMenu, ListBoxMenuIcon$1 as ListBoxMenuIcon, ListBoxMenuItem$1 as ListBoxMenuItem, ListBoxSelection$1 as ListBoxSelection, ListItem$1 as ListItem, Loading$1 as Loading, LocalStorage$1 as LocalStorage, Modal$1 as Modal, ModalBody$1 as ModalBody, ModalFooter$1 as ModalFooter, ModalHeader$1 as ModalHeader, MultiSelect$1 as MultiSelect, NotificationActionButton$1 as NotificationActionButton, NotificationButton$1 as NotificationButton, NotificationIcon$1 as NotificationIcon, NumberInput$1 as NumberInput, NumberInputSkeleton$1 as NumberInputSkeleton, OrderedList$1 as OrderedList, OutboundLink$1 as OutboundLink, OverflowMenu$1 as OverflowMenu, OverflowMenuItem$1 as OverflowMenuItem, Pagination$1 as Pagination, PaginationNav$1 as PaginationNav, PaginationSkeleton$1 as PaginationSkeleton, PasswordInput$1 as PasswordInput, Popover$1 as Popover, ProgressBar$1 as ProgressBar, ProgressIndicator$1 as ProgressIndicator, ProgressIndicatorSkeleton$1 as ProgressIndicatorSkeleton, ProgressStep$1 as ProgressStep, RadioButton$1 as RadioButton, RadioButtonGroup$1 as RadioButtonGroup, RadioButtonSkeleton$1 as RadioButtonSkeleton, RadioTile$1 as RadioTile, RecursiveList$1 as RecursiveList, Row$1 as Row, Search$1 as Search, SearchSkeleton$1 as SearchSkeleton, Select$1 as Select, SelectItem$1 as SelectItem, SelectItemGroup$1 as SelectItemGroup, SelectSkeleton$1 as SelectSkeleton, SelectableTile$1 as SelectableTile, SideNav$1 as SideNav, SideNavDivider$1 as SideNavDivider, SideNavItems$1 as SideNavItems, SideNavLink$1 as SideNavLink, SideNavMenu$1 as SideNavMenu, SideNavMenuItem$1 as SideNavMenuItem, SkeletonPlaceholder$1 as SkeletonPlaceholder, SkeletonText$1 as SkeletonText, SkipToContent$1 as SkipToContent, Slider$1 as Slider, SliderSkeleton$1 as SliderSkeleton, StructuredList$1 as StructuredList, StructuredListBody$1 as StructuredListBody, StructuredListCell$1 as StructuredListCell, StructuredListHead$1 as StructuredListHead, StructuredListInput$1 as StructuredListInput, StructuredListRow$1 as StructuredListRow, StructuredListSkeleton$1 as StructuredListSkeleton, Switch$1 as Switch, Tab$1 as Tab, TabContent$1 as TabContent, Table$1 as Table, TableBody$1 as TableBody, TableCell$1 as TableCell, TableContainer$1 as TableContainer, TableHead$1 as TableHead, TableHeader$1 as TableHeader, TableRow$1 as TableRow, Tabs$1 as Tabs, TabsSkeleton$1 as TabsSkeleton, Tag$1 as Tag, TagSkeleton$1 as TagSkeleton, TextArea$1 as TextArea, TextAreaSkeleton$1 as TextAreaSkeleton, TextInput$1 as TextInput, TextInputSkeleton$1 as TextInputSkeleton, Theme$1 as Theme, Tile$1 as Tile, TileGroup$1 as TileGroup, TimePicker$1 as TimePicker, TimePickerSelect$1 as TimePickerSelect, ToastNotification$1 as ToastNotification, Toggle$1 as Toggle, ToggleSkeleton$1 as ToggleSkeleton, Toolbar$1 as Toolbar, ToolbarBatchActions$1 as ToolbarBatchActions, ToolbarContent$1 as ToolbarContent, ToolbarMenu$1 as ToolbarMenu, ToolbarMenuItem$1 as ToolbarMenuItem, ToolbarSearch$1 as ToolbarSearch, Tooltip$1 as Tooltip, TooltipDefinition$1 as TooltipDefinition, TooltipFooter$1 as TooltipFooter, TooltipIcon$1 as TooltipIcon, TreeView$1 as TreeView, Truncate$1 as Truncate, UnorderedList$1 as UnorderedList, breakpointObserver, breakpoints$1 as breakpoints, truncate };
