"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvelteFragmentMapper = exports.TranspiledSvelteDocument = exports.SvelteDocument = exports.TranspileErrorSource = void 0;
const source_map_1 = require("source-map");
const documents_1 = require("../../lib/documents");
const importPackage_1 = require("../../importPackage");
const utils_1 = require("../../utils");
var TranspileErrorSource;
(function (TranspileErrorSource) {
    TranspileErrorSource["Script"] = "Script";
    TranspileErrorSource["Style"] = "Style";
})(TranspileErrorSource = exports.TranspileErrorSource || (exports.TranspileErrorSource = {}));
/**
 * Represents a text document that contains a svelte component.
 */
class SvelteDocument {
    constructor(parent) {
        this.parent = parent;
        this.languageId = 'svelte';
        this.version = 0;
        this.uri = this.parent.uri;
        this.config = this.parent.config;
        this.script = this.parent.scriptInfo;
        this.moduleScript = this.parent.moduleScriptInfo;
        this.style = this.parent.styleInfo;
        this.version = this.parent.version;
    }
    getText() {
        return this.parent.getText();
    }
    getFilePath() {
        return this.parent.getFilePath() || '';
    }
    offsetAt(position) {
        return this.parent.offsetAt(position);
    }
    async getTranspiled() {
        if (!this.transpiledDoc) {
            this.transpiledDoc = await TranspiledSvelteDocument.create(this.parent, this.parent.config.preprocess);
        }
        return this.transpiledDoc;
    }
    async getCompiled() {
        if (!this.compileResult) {
            this.compileResult = await this.getCompiledWith(this.parent.config.compilerOptions);
        }
        return this.compileResult;
    }
    async getCompiledWith(options = {}) {
        const svelte = importPackage_1.importSvelte(this.getFilePath());
        return svelte.compile((await this.getTranspiled()).getText(), options);
    }
    /**
     * Needs to be called before cleanup to prevent source map memory leaks.
     */
    destroyTranspiled() {
        if (this.transpiledDoc) {
            this.transpiledDoc.destroy();
            this.transpiledDoc = undefined;
        }
    }
}
exports.SvelteDocument = SvelteDocument;
class TranspiledSvelteDocument {
    constructor(parent, transpiled, scriptMapper, styleMapper) {
        var _a, _b;
        this.parent = parent;
        this.transpiled = transpiled;
        this.scriptMapper = scriptMapper;
        this.styleMapper = styleMapper;
        this.fragmentInfos = [(_a = this.scriptMapper) === null || _a === void 0 ? void 0 : _a.fragmentInfo, (_b = this.styleMapper) === null || _b === void 0 ? void 0 : _b.fragmentInfo]
            .filter(utils_1.isNotNullOrUndefined)
            .sort((i1, i2) => i1.end - i2.end);
    }
    static async create(document, preprocessors = []) {
        const { transpiled, processedScripts, processedStyles } = await transpile(document, preprocessors);
        const scriptMapper = await SvelteFragmentMapper.createScript(document, transpiled, processedScripts);
        const styleMapper = await SvelteFragmentMapper.createStyle(document, transpiled, processedStyles);
        return new TranspiledSvelteDocument(document, transpiled, scriptMapper, styleMapper);
    }
    getOriginalPosition(generatedPosition) {
        var _a, _b;
        if ((_a = this.scriptMapper) === null || _a === void 0 ? void 0 : _a.isInTranspiledFragment(generatedPosition)) {
            return this.scriptMapper.getOriginalPosition(generatedPosition);
        }
        if ((_b = this.styleMapper) === null || _b === void 0 ? void 0 : _b.isInTranspiledFragment(generatedPosition)) {
            return this.styleMapper.getOriginalPosition(generatedPosition);
        }
        // Position is not in fragments, but we still need to account for
        // the length differences of the fragments before the position.
        let offset = documents_1.offsetAt(generatedPosition, this.transpiled);
        for (const fragmentInfo of this.fragmentInfos) {
            if (offset > fragmentInfo.end) {
                offset += fragmentInfo.diff;
            }
        }
        return this.parent.positionAt(offset);
    }
    getURL() {
        return this.parent.getURL();
    }
    getText() {
        return this.transpiled;
    }
    getGeneratedPosition(originalPosition) {
        const { styleInfo, scriptInfo } = this.parent;
        if (documents_1.isInTag(originalPosition, scriptInfo) && this.scriptMapper) {
            return this.scriptMapper.getGeneratedPosition(originalPosition);
        }
        if (documents_1.isInTag(originalPosition, styleInfo) && this.styleMapper) {
            return this.styleMapper.getGeneratedPosition(originalPosition);
        }
        // Add length difference of each fragment
        let offset = documents_1.offsetAt(originalPosition, this.parent.getText());
        for (const fragmentInfo of this.fragmentInfos) {
            if (offset > fragmentInfo.end) {
                offset -= fragmentInfo.diff;
            }
        }
        return documents_1.positionAt(offset, this.getText());
    }
    /**
     * Needs to be called before cleanup to prevent source map memory leaks.
     */
    destroy() {
        var _a, _b;
        (_a = this.scriptMapper) === null || _a === void 0 ? void 0 : _a.destroy();
        (_b = this.styleMapper) === null || _b === void 0 ? void 0 : _b.destroy();
    }
}
exports.TranspiledSvelteDocument = TranspiledSvelteDocument;
class SvelteFragmentMapper {
    constructor(
    /**
     * End offset + length difference to original
     */
    fragmentInfo, 
    /**
     * Maps between full original source and fragment within that original.
     */
    originalFragmentMapper, 
    /**
     * Maps between full transpiled source and fragment within that transpiled.
     */
    transpiledFragmentMapper, 
    /**
     * Maps between original and transpiled, within fragment.
     */
    sourceMapper) {
        this.fragmentInfo = fragmentInfo;
        this.originalFragmentMapper = originalFragmentMapper;
        this.transpiledFragmentMapper = transpiledFragmentMapper;
        this.sourceMapper = sourceMapper;
    }
    static async createStyle(originalDoc, transpiled, processed) {
        return SvelteFragmentMapper.create(originalDoc, transpiled, originalDoc.styleInfo, documents_1.extractStyleTag(transpiled), processed);
    }
    static async createScript(originalDoc, transpiled, processed) {
        const scriptInfo = originalDoc.scriptInfo || originalDoc.moduleScriptInfo;
        const maybeScriptTag = documents_1.extractScriptTags(transpiled);
        const maybeScriptTagInfo = maybeScriptTag && (maybeScriptTag.script || maybeScriptTag.moduleScript);
        return SvelteFragmentMapper.create(originalDoc, transpiled, scriptInfo, maybeScriptTagInfo || null, processed);
    }
    static async create(originalDoc, transpiled, originalTagInfo, transpiledTagInfo, processed) {
        const sourceMapper = processed.length > 0
            ? await SvelteFragmentMapper.createSourceMapper(processed, originalDoc)
            : new documents_1.IdentityMapper(originalDoc.uri);
        if (originalTagInfo && transpiledTagInfo) {
            const sourceLength = originalTagInfo.container.end - originalTagInfo.container.start;
            const transpiledLength = transpiledTagInfo.container.end - transpiledTagInfo.container.start;
            const diff = sourceLength - transpiledLength;
            return new SvelteFragmentMapper({ end: transpiledTagInfo.container.end, diff }, new documents_1.FragmentMapper(originalDoc.getText(), originalTagInfo, originalDoc.uri), new documents_1.FragmentMapper(transpiled, transpiledTagInfo, originalDoc.uri), sourceMapper);
        }
        return null;
    }
    static async createSourceMapper(processed, originalDoc) {
        return processed.reduce(async (parent, processedSingle) => (processedSingle === null || processedSingle === void 0 ? void 0 : processedSingle.map)
            ? new documents_1.SourceMapDocumentMapper(await new source_map_1.SourceMapConsumer(processedSingle.map.toString()), originalDoc.uri, await parent)
            : new documents_1.IdentityMapper(originalDoc.uri, await parent), Promise.resolve(undefined));
    }
    isInTranspiledFragment(generatedPosition) {
        return this.transpiledFragmentMapper.isInGenerated(generatedPosition);
    }
    getOriginalPosition(generatedPosition) {
        // Map the position to be relative to the transpiled fragment
        const positionInTranspiledFragment = this.transpiledFragmentMapper.getGeneratedPosition(generatedPosition);
        // Map the position, using the sourcemap, to the original position in the source fragment
        const positionInOriginalFragment = this.sourceMapper.getOriginalPosition(positionInTranspiledFragment);
        // Map the position to be in the original fragment's parent
        return this.originalFragmentMapper.getOriginalPosition(positionInOriginalFragment);
    }
    /**
     * Reversing `getOriginalPosition`
     */
    getGeneratedPosition(originalPosition) {
        const positionInOriginalFragment = this.originalFragmentMapper.getGeneratedPosition(originalPosition);
        const positionInTranspiledFragment = this.sourceMapper.getGeneratedPosition(positionInOriginalFragment);
        return this.transpiledFragmentMapper.getOriginalPosition(positionInTranspiledFragment);
    }
    /**
     * Needs to be called before cleanup to prevent source map memory leaks.
     */
    destroy() {
        if (this.sourceMapper.destroy) {
            this.sourceMapper.destroy();
        }
    }
}
exports.SvelteFragmentMapper = SvelteFragmentMapper;
async function transpile(document, preprocessors = []) {
    var _a;
    preprocessors = Array.isArray(preprocessors) ? preprocessors : [preprocessors];
    const processedScripts = [];
    const processedStyles = [];
    const wrappedPreprocessors = preprocessors.map((preprocessor) => {
        const wrappedPreprocessor = { markup: preprocessor.markup };
        if (preprocessor.script) {
            wrappedPreprocessor.script = async (args) => {
                try {
                    const res = await preprocessor.script(args);
                    if (res && res.map) {
                        processedScripts.push(res);
                    }
                    return res;
                }
                catch (e) {
                    e.__source = TranspileErrorSource.Script;
                    throw e;
                }
            };
        }
        if (preprocessor.style) {
            wrappedPreprocessor.style = async (args) => {
                try {
                    const res = await preprocessor.style(args);
                    if (res && res.map) {
                        processedStyles.push(res);
                    }
                    return res;
                }
                catch (e) {
                    e.__source = TranspileErrorSource.Style;
                    throw e;
                }
            };
        }
        return wrappedPreprocessor;
    });
    const svelte = importPackage_1.importSvelte(document.getFilePath() || '');
    const result = await svelte.preprocess(document.getText(), wrappedPreprocessors, {
        filename: document.getFilePath() || ''
    });
    const transpiled = result.code || ((_a = result.toString) === null || _a === void 0 ? void 0 : _a.call(result)) || '';
    return { transpiled, processedScripts, processedStyles };
}
//# sourceMappingURL=SvelteDocument.js.map