"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindReferencesProviderImpl = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const utils_1 = require("../../../utils");
const utils_2 = require("../utils");
class FindReferencesProviderImpl {
    constructor(lsAndTsDocResolver) {
        this.lsAndTsDocResolver = lsAndTsDocResolver;
    }
    async findReferences(document, position, context) {
        const { lang, tsDoc } = this.getLSAndTSDoc(document);
        const fragment = await tsDoc.getFragment();
        const references = lang.getReferencesAtPosition(tsDoc.filePath, fragment.offsetAt(fragment.getGeneratedPosition(position)));
        if (!references) {
            return null;
        }
        const docs = new Map([[tsDoc.filePath, fragment]]);
        return await Promise.all(references
            .filter((ref) => context.includeDeclaration || !ref.isDefinition)
            .map(async (ref) => {
            let defDoc = docs.get(ref.fileName);
            if (!defDoc) {
                defDoc = await this.getSnapshot(ref.fileName).getFragment();
                docs.set(ref.fileName, defDoc);
            }
            return vscode_languageserver_1.Location.create(utils_1.pathToUrl(ref.fileName), utils_2.convertToLocationRange(defDoc, ref.textSpan));
        }));
    }
    getLSAndTSDoc(document) {
        return this.lsAndTsDocResolver.getLSAndTSDoc(document);
    }
    getSnapshot(filePath, document) {
        return this.lsAndTsDocResolver.getSnapshot(filePath, document);
    }
}
exports.FindReferencesProviderImpl = FindReferencesProviderImpl;
//# sourceMappingURL=FindReferencesProvider.js.map