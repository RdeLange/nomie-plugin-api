import ts from 'typescript';
import { Document, DocumentManager } from '../../lib/documents';
import { LSConfigManager } from '../../ls-config';
import { DocumentSnapshot, SvelteDocumentSnapshot } from './DocumentSnapshot';
import { SnapshotManager } from './SnapshotManager';
export declare class LSAndTSDocResolver {
    private readonly docManager;
    private readonly workspaceUris;
    private readonly configManager;
    private readonly transformOnTemplateError;
    constructor(docManager: DocumentManager, workspaceUris: string[], configManager: LSConfigManager, transformOnTemplateError?: boolean);
    /**
     * Create a svelte document -> should only be invoked with svelte files.
     */
    private createDocument;
    private get lsDocumentContext();
    getLSForPath(path: string): ts.LanguageService;
    getLSAndTSDoc(document: Document): {
        tsDoc: SvelteDocumentSnapshot;
        lang: ts.LanguageService;
        userPreferences: ts.UserPreferences;
    };
    getSnapshot(filePath: string, document: Document): SvelteDocumentSnapshot;
    getSnapshot(filePath: string, document?: Document): DocumentSnapshot;
    updateSnapshotPath(oldPath: string, newPath: string): DocumentSnapshot;
    deleteSnapshot(filePath: string): void;
    getSnapshotManager(filePath: string): SnapshotManager;
    private getTSService;
    private getUserPreferences;
}
