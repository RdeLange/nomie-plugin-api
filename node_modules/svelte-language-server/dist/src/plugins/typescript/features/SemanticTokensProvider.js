"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SemanticTokensProviderImpl = void 0;
const typescript_1 = __importDefault(require("typescript"));
const vscode_languageserver_1 = require("vscode-languageserver");
const documents_1 = require("../../../lib/documents");
const utils_1 = require("../utils");
const CONTENT_LENGTH_LIMIT = 50000;
class SemanticTokensProviderImpl {
    constructor(lsAndTsDocResolver) {
        this.lsAndTsDocResolver = lsAndTsDocResolver;
    }
    async getSemanticTokens(textDocument, range) {
        const { lang, tsDoc } = this.lsAndTsDocResolver.getLSAndTSDoc(textDocument);
        const fragment = await tsDoc.getFragment();
        // for better performance, don't do full-file semantic tokens when the file is too big
        if (!range && fragment.text.length > CONTENT_LENGTH_LIMIT) {
            return null;
        }
        const textSpan = range
            ? utils_1.convertToTextSpan(range, fragment)
            : {
                start: 0,
                length: tsDoc.parserError
                    ? fragment.text.length
                    : // This is appended by svelte2tsx, there's nothing mappable afterwards
                        fragment.text.lastIndexOf('return { props:') || fragment.text.length
            };
        const { spans } = lang.getEncodedSemanticClassifications(tsDoc.filePath, textSpan, typescript_1.default.SemanticClassificationFormat.TwentyTwenty);
        const data = [];
        let index = 0;
        while (index < spans.length) {
            // [start, length, encodedClassification, start2, length2, encodedClassification2]
            const generatedOffset = spans[index++];
            const generatedLength = spans[index++];
            const encodedClassification = spans[index++];
            const classificationType = this.getTokenTypeFromClassification(encodedClassification);
            if (classificationType < 0) {
                continue;
            }
            const originalPosition = this.mapToOrigin(textDocument, fragment, generatedOffset, generatedLength);
            if (!originalPosition) {
                continue;
            }
            const [line, character, length] = originalPosition;
            // remove identifiers whose start and end mapped to the same location,
            // like the svelte2tsx inserted render function,
            // or reversed like Component.$on
            if (length <= 0) {
                continue;
            }
            const modifier = this.getTokenModifierFromClassification(encodedClassification);
            data.push([line, character, length, classificationType, modifier]);
        }
        const sorted = data.sort((a, b) => {
            const [lineA, charA] = a;
            const [lineB, charB] = b;
            return lineA - lineB || charA - charB;
        });
        const builder = new vscode_languageserver_1.SemanticTokensBuilder();
        sorted.forEach((tokenData) => builder.push(...tokenData));
        return builder.build();
    }
    mapToOrigin(document, fragment, generatedOffset, generatedLength) {
        const range = {
            start: fragment.positionAt(generatedOffset),
            end: fragment.positionAt(generatedOffset + generatedLength)
        };
        const { start: startPosition, end: endPosition } = documents_1.mapRangeToOriginal(fragment, range);
        if (startPosition.line < 0 || endPosition.line < 0) {
            return;
        }
        const startOffset = document.offsetAt(startPosition);
        const endOffset = document.offsetAt(endPosition);
        return [startPosition.line, startPosition.character, endOffset - startOffset];
    }
    /**
     *  TSClassification = (TokenType + 1) << TokenEncodingConsts.typeOffset + TokenModifier
     */
    getTokenTypeFromClassification(tsClassification) {
        return (tsClassification >> 8 /* typeOffset */) - 1;
    }
    getTokenModifierFromClassification(tsClassification) {
        return tsClassification & 255 /* modifierMask */;
    }
}
exports.SemanticTokensProviderImpl = SemanticTokensProviderImpl;
//# sourceMappingURL=SemanticTokensProvider.js.map