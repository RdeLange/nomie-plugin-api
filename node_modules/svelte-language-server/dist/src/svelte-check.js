"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SvelteCheck = void 0;
const documents_1 = require("./lib/documents");
const ls_config_1 = require("./ls-config");
const plugins_1 = require("./plugins");
const vscode_languageserver_1 = require("vscode-languageserver");
const logger_1 = require("./logger");
const utils_1 = require("./utils");
/**
 * Small wrapper around PluginHost's Diagnostic Capabilities
 * for svelte-check, without the overhead of the lsp.
 */
class SvelteCheck {
    constructor(workspacePath, options = {}) {
        this.docManager = new documents_1.DocumentManager((textDocument) => new documents_1.Document(textDocument.uri, textDocument.text));
        this.configManager = new ls_config_1.LSConfigManager();
        this.pluginHost = new plugins_1.PluginHost(this.docManager);
        logger_1.Logger.setLogErrorsOnly(true);
        this.initialize(workspacePath, options);
    }
    initialize(workspacePath, options) {
        this.configManager.update({
            svelte: {
                compilerWarnings: options.compilerWarnings
            }
        });
        // No HTMLPlugin, it does not provide diagnostics
        if (shouldRegister('svelte')) {
            this.pluginHost.register(new plugins_1.SveltePlugin(this.configManager));
        }
        if (shouldRegister('css')) {
            this.pluginHost.register(new plugins_1.CSSPlugin(this.docManager, this.configManager));
        }
        if (shouldRegister('js')) {
            this.pluginHost.register(new plugins_1.TypeScriptPlugin(this.docManager, this.configManager, [utils_1.pathToUrl(workspacePath)], 
            /**isEditor */ false));
        }
        function shouldRegister(source) {
            return !options.diagnosticSources || options.diagnosticSources.includes(source);
        }
    }
    /**
     * Creates/updates given document
     *
     * @param doc Text and Uri of the document
     */
    upsertDocument(doc) {
        if (doc.uri.endsWith('.ts') || doc.uri.endsWith('.js')) {
            this.pluginHost.updateTsOrJsFile(utils_1.urlToPath(doc.uri) || '', [
                {
                    range: vscode_languageserver_1.Range.create(vscode_languageserver_1.Position.create(0, 0), vscode_languageserver_1.Position.create(Number.MAX_VALUE, Number.MAX_VALUE)),
                    text: doc.text
                }
            ]);
        }
        else {
            this.docManager.openDocument({
                text: doc.text,
                uri: doc.uri
            });
            this.docManager.markAsOpenedInClient(doc.uri);
        }
    }
    /**
     * Removes/closes document
     *
     * @param uri Uri of the document
     */
    removeDocument(uri) {
        this.docManager.closeDocument(uri);
        this.docManager.releaseDocument(uri);
    }
    /**
     * Gets the diagnostics for all currently open files.
     */
    async getDiagnostics() {
        return await Promise.all(this.docManager.getAllOpenedByClient().map(async (doc) => {
            var _a;
            const uri = doc[1].uri;
            const diagnostics = await this.pluginHost.getDiagnostics({ uri });
            return {
                filePath: utils_1.urlToPath(uri) || '',
                text: ((_a = this.docManager.get(uri)) === null || _a === void 0 ? void 0 : _a.getText()) || '',
                diagnostics
            };
        }));
    }
}
exports.SvelteCheck = SvelteCheck;
//# sourceMappingURL=svelte-check.js.map