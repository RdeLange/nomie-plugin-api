"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
const logger_1 = require("../../logger");
const cosmiconfig_1 = require("cosmiconfig");
const importPackage_1 = require("../../importPackage");
const DEFAULT_OPTIONS = {
    dev: true
};
const NO_GENERATE = {
    generate: false
};
const svelteConfigExplorer = cosmiconfig_1.cosmiconfigSync('svelte', {
    packageProp: 'svelte-ls',
    cache: true
});
/**
 * Tries to load `svelte.config.js`
 *
 * @param path File path of the document to load the config for
 */
function loadConfig(path) {
    var _a;
    logger_1.Logger.log('Trying to load config for', path);
    try {
        const result = svelteConfigExplorer.search(path);
        const config = (_a = result === null || result === void 0 ? void 0 : result.config) !== null && _a !== void 0 ? _a : useFallbackPreprocessor(path, false);
        if (result) {
            logger_1.Logger.log('Found config at ', result.filepath);
        }
        return {
            ...config,
            compilerOptions: { ...DEFAULT_OPTIONS, ...config.compilerOptions, ...NO_GENERATE }
        };
    }
    catch (err) {
        logger_1.Logger.error('Error while loading config');
        logger_1.Logger.error(err);
        return {
            ...useFallbackPreprocessor(path, true),
            compilerOptions: {
                ...DEFAULT_OPTIONS,
                ...NO_GENERATE
            },
            loadConfigError: err
        };
    }
}
exports.loadConfig = loadConfig;
function useFallbackPreprocessor(path, foundConfig) {
    logger_1.Logger.log((foundConfig
        ? 'Found svelte.config.js but there was an error loading it. '
        : 'No svelte.config.js found. ') +
        'Using https://github.com/sveltejs/svelte-preprocess as fallback');
    return {
        preprocess: importPackage_1.importSveltePreprocess(path)({
            // 4.x does not have transpileOnly anymore, but if the user has version 3.x
            // in his repo, that one is loaded instead, for which we still need this.
            typescript: { transpileOnly: true, compilerOptions: { sourceMap: true } }
        })
    };
}
//# sourceMappingURL=configLoader.js.map